./active.h:
  438 :   const timebin_t spart_bin = sp->time_bin;
  442 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  446 :         "s-particle in an impossible time-zone! sp->ti_end=%lld "
  541 :   return sp->time_bin == time_bin_inhibited;
  747 :   const timebin_t spart_bin = sp->time_bin;
  752 :       get_integer_time_begin(ti_current + 1, sp->time_bin);
  756 :         "s-particle in an impossible time-zone! sp->ti_beg=%lld "
./cell.c:
 1353 :     if ((sp->x[0] < c->loc[0] / space_stretch) ||
 1354 :         (sp->x[1] < c->loc[1] / space_stretch) ||
 1355 :         (sp->x[2] < c->loc[2] / space_stretch) ||
 1356 :         (sp->x[0] >= (c->loc[0] + c->width[0]) * space_stretch) ||
 1357 :         (sp->x[1] >= (c->loc[1] + c->width[1]) * space_stretch) ||
 1358 :         (sp->x[2] >= (c->loc[2] + c->width[2]) * space_stretch))
 1361 :     if (sp->time_bin != time_bin_not_created &&
 1362 :         sp->time_bin != time_bin_inhibited) {
 1363 :       const struct gpart *gp = sp->gpart;
 1364 :       if (gp == NULL && sp->time_bin != time_bin_not_created)
./cell_convert_part.c:
  255 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
  256 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
  257 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
  260 :   sp->time_bin = e->min_active_bin;
  264 :   sp->ti_drift = e->ti_current;
  388 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
  389 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
  390 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
  393 :   sp->time_bin = e->min_active_bin;
  397 :   sp->ti_drift = e->ti_current;
  642 :   if (sp->time_bin == time_bin_inhibited) return;
  645 :   sp->time_bin = time_bin_inhibited;
  646 :   if (sp->gpart) {
  647 :     sp->gpart->time_bin = time_bin_inhibited;
  648 :     sp->gpart->id_or_neg_offset = sp->id;
  649 :     sp->gpart->type = swift_type_dark_matter;
  655 :   if (sp->gpart) {
  660 :   sp->gpart = NULL;
  813 :   if (sp->gpart == NULL)
  817 :   struct gpart *gp = sp->gpart;
  820 :   sp->time_bin = time_bin_inhibited;
  823 :   sp->gpart = NULL;
  827 :   gp->id_or_neg_offset = sp->id;
  830 :   gp->ti_kick = sp->ti_kick;
  873 :   sp->x_diff[0] = xp->x_diff[0];
  874 :   sp->x_diff[1] = xp->x_diff[1];
  875 :   sp->x_diff[2] = xp->x_diff[2];
  881 :   sp->id = gp->id_or_neg_offset;
  885 :   sp->gpart = gp;
  889 :   gp->time_bin = sp->time_bin;
  892 :   sp->mass = gp->mass;
  893 :   sp->x[0] = gp->x[0];
  894 :   sp->x[1] = gp->x[1];
  895 :   sp->x[2] = gp->x[2];
  896 :   sp->v[0] = gp->v_full[0];
  897 :   sp->v[1] = gp->v_full[1];
  898 :   sp->v[2] = gp->v_full[2];
  901 :   sp->ti_kick = gp->ti_kick;
  902 :   gp->ti_drift = sp->ti_drift;
  906 :   sp->h = p->h;
  941 :   sp->x_diff[0] = xp->x_diff[0];
  942 :   sp->x_diff[1] = xp->x_diff[1];
  943 :   sp->x_diff[2] = xp->x_diff[2];
  959 :   sp->id = space_get_new_unique_id(e->s);
  963 :   sp->gpart = gp;
  967 :   gp->time_bin = sp->time_bin;
  970 :   sp->mass = hydro_get_mass(p);
  971 :   sp->x[0] = p->x[0];
  972 :   sp->x[1] = p->x[1];
  973 :   sp->x[2] = p->x[2];
  974 :   sp->v[0] = p->v_full[0];
  975 :   sp->v[1] = p->v_full[1];
  976 :   sp->v[2] = p->v_full[2];
  979 :   sp->ti_kick = p->ti_kick;
  980 :   sp->ti_drift = p->ti_drift;
  984 :   sp->h = p->h;
 1024 :   sp->x_diff[0] = xp->x_diff[0];
 1025 :   sp->x_diff[1] = xp->x_diff[1];
 1026 :   sp->x_diff[2] = xp->x_diff[2];
 1032 :   sp->id = p->id;
 1036 :   sp->gpart = gp;
 1040 :   gp->time_bin = sp->time_bin;
 1043 :   sp->mass = gp->mass;
 1044 :   sp->x[0] = gp->x[0];
 1045 :   sp->x[1] = gp->x[1];
 1046 :   sp->x[2] = gp->x[2];
 1047 :   sp->v[0] = gp->v_full[0];
 1048 :   sp->v[1] = gp->v_full[1];
 1049 :   sp->v[2] = gp->v_full[2];
 1052 :   sp->ti_kick = gp->ti_kick;
 1053 :   gp->ti_drift = sp->ti_drift;
 1057 :   sp->r_cut = e->sink_properties->cut_off_radius;
 1090 :   sp->x_diff[0] = s->x_diff[0];
 1091 :   sp->x_diff[1] = s->x_diff[1];
 1092 :   sp->x_diff[2] = s->x_diff[2];
 1108 :   sp->id = space_get_new_unique_id(e->s);
 1112 :   sp->gpart = gp;
 1116 :   gp->time_bin = sp->time_bin;
 1119 :   sp->mass = s->mass;
 1120 :   sp->x[0] = s->x[0];
 1121 :   sp->x[1] = s->x[1];
 1122 :   sp->x[2] = s->x[2];
 1123 :   sp->v[0] = s->v[0];
 1124 :   sp->v[1] = s->v[1];
 1125 :   sp->v[2] = s->v[2];
 1128 :   sp->ti_kick = s->ti_kick;
 1129 :   sp->ti_drift = s->ti_drift;
 1133 :   sp->h = s->r_cut;
./cell_drift.c:
  666 :       if (fabs(sp->v[0] * dt_drift) > e->s->dim[0] ||
  667 :           fabs(sp->v[1] * dt_drift) > e->s->dim[1] ||
  668 :           fabs(sp->v[2] * dt_drift) > e->s->dim[2]) {
  677 :         if ((sp->x[0] > dim[0]) || (sp->x[0] < 0.) ||  // x
  678 :             (sp->x[1] > dim[1]) || (sp->x[1] < 0.) ||  // y
  679 :             (sp->x[2] > dim[2]) || (sp->x[2] < 0.)) {  // z
  707 :       sp->h = min(sp->h, stars_h_max);
  708 :       sp->h = max(sp->h, stars_h_min);
  711 :       const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  712 :                         sp->x_diff[1] * sp->x_diff[1] +
  713 :                         sp->x_diff[2] * sp->x_diff[2];
  716 :       const float dx2_sort = sp->x_diff_sort[0] * sp->x_diff_sort[0] +
  717 :                              sp->x_diff_sort[1] * sp->x_diff_sort[1] +
  718 :                              sp->x_diff_sort[2] * sp->x_diff_sort[2];
  723 :       cell_h_max = max(cell_h_max, sp->h);
  732 :         cell_h_max_active = max(cell_h_max_active, sp->h);
 1094 :       /* sp->h does not need to be limited. */
./cell_unskip.c:
  864 :       for (int k = 0; k < csp->count; k++) {
  865 :         const int pid = csp->pairs[k].pid;
  866 :         const int pjd = csp->pairs[k].pjd;
  994 :       for (int k = 0; k < csp->count; k++) {
  995 :         const int pid = csp->pairs[k].pid;
  996 :         const int pjd = csp->pairs[k].pjd;
 1120 :       for (int k = 0; k < csp->count; k++) {
 1121 :         const int pid = csp->pairs[k].pid;
 1122 :         const int pjd = csp->pairs[k].pjd;
 1225 :       for (int k = 0; k < csp->count; k++) {
 1226 :         const int pid = csp->pairs[k].pid;
 1227 :         const int pjd = csp->pairs[k].pjd;
 1298 :   const struct engine *e = sp->e;
 1523 :   const struct engine *e = sp->e;
 1605 :       for (int k = 0; k < csp->count; k++) {
 1606 :         const int pid = csp->pairs[k].pid;
 1607 :         const int pjd = csp->pairs[k].pjd;
./chemistry/AGORA/chemistry.h:
   69 :     sp->chemistry_data.metal_mass_fraction[i] =
   73 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  297 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  449 :   return sp->chemistry_data
  465 :   return sp->chemistry_data.metal_mass_fraction;
  554 :   return sp->chemistry_data
  556 :          sp->mass;
./chemistry/EAGLE/chemistry.h:
  193 :     sp->chemistry_data.metal_mass_fraction_total =
  197 :       sp->chemistry_data.metal_mass_fraction[elem] =
  203 :     sp->chemistry_data.smoothed_metal_mass_fraction_total =
  207 :       sp->chemistry_data.smoothed_metal_mass_fraction[elem] =
  517 :   return sp->chemistry_data.smoothed_metal_mass_fraction_total;
  532 :   return sp->chemistry_data.smoothed_metal_mass_fraction;
  615 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  640 :   return sp->chemistry_data.metal_mass_fraction_total;
./chemistry/GEAR/chemistry.h:
   55 :     sp->chemistry_data.metal_mass_fraction[i] =
   59 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  429 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  549 :   return sp->chemistry_data
  564 :   return sp->chemistry_data.metal_mass_fraction[0];
  577 :   return sp->chemistry_data.metal_mass_fraction;
  654 :   return sp->chemistry_data
  656 :          sp->mass;
./chemistry/GEAR_DIFFUSION/chemistry.h:
   56 :     sp->chemistry_data.metal_mass_fraction[i] =
   60 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  416 :     sp->chemistry_data.metal_mass_fraction[i] =
  417 :         data->initial_metallicities[i] * sp->mass;
  487 :   return sp->chemistry_data
  501 :   return sp->chemistry_data.metal_mass_fraction;
  590 :   return sp->chemistry_data
  592 :          sp->mass;
./chemistry/KIARA/chemistry.h:
  254 :     sp->chemistry_data.metal_mass_fraction_total =
  258 :       sp->chemistry_data.metal_mass_fraction[elem] =
  601 :   return sp->chemistry_data.metal_mass_fraction_total;
  616 :   return sp->chemistry_data.metal_mass_fraction;
  699 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  724 :   return sp->chemistry_data.metal_mass_fraction_total;
./chemistry/SIMBA/chemistry.h:
  158 :     sp->chemistry_data.metal_mass_fraction_total =
  162 :       sp->chemistry_data.metal_mass_fraction[elem] =
  467 :   return sp->chemistry_data.metal_mass_fraction_total;
  482 :   return sp->chemistry_data.metal_mass_fraction;
  565 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  590 :   return sp->chemistry_data.metal_mass_fraction_total;
./csds.c:
  100 :     if (!spart_is_inhibited(sp, e) && sp->time_bin != time_bin_not_created) {
./debug.c:
  395 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  396 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  397 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  402 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  408 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  409 :                       sp->x_diff[1] * sp->x_diff[1] +
  410 :                       sp->x_diff[2] * sp->x_diff[2];
  412 :     stars_h_max = max(stars_h_max, sp->h);
  422 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  423 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  424 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  429 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  435 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  436 :                       sp->x_diff[1] * sp->x_diff[1] +
  437 :                       sp->x_diff[2] * sp->x_diff[2];
  439 :     sinks_h_max = max(sinks_h_max, sp->r_cut);
./drift.h:
  248 :   if (sp->ti_drift != ti_old)
  251 :         "sp->ti_drift=%lld, "
  253 :         sp->ti_drift, ti_old, ti_current);
  255 :   sp->ti_drift = ti_current;
  261 :   const long long id = sp->id;
  267 :     sp->v[0] = 0.f;
  268 :     sp->v[1] = 0.f;
  269 :     sp->v[2] = 0.f;
  275 :   const double x[3] = {sp->x[0], sp->x[1], sp->x[2]};
  276 :   const float v_full[3] = {sp->v[0], sp->v[1], sp->v[2]};
  280 :   sp->x[0] += sp->v[0] * dt_drift;
  281 :   sp->x[1] += sp->v[1] * dt_drift;
  282 :   sp->x[2] += sp->v[2] * dt_drift;
  289 :     const float dx = sp->v[k] * dt_drift;
  290 :     sp->x_diff[k] -= dx;
  291 :     sp->x_diff_sort[k] -= dx;
  296 :   if (sp->gpart)
  297 :     lightcone_check_particle_crosses(e, replication_list, x, v_full, sp->gpart,
./engine_io.c:
  105 :           get_integer_time_begin(e->ti_current, sp->time_bin);
  112 :       if (e->ti_current - ti_begin == get_integer_timestep(sp->time_bin))
 1361 :             get_integer_time_begin(e->ti_current, sp->time_bin);
./engine_redistribute.c:
  755 :     if (sp->time_bin == time_bin_inhibited)
  758 :     if (sp->time_bin == time_bin_not_created)
  763 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
  764 :                    sp->x[2] * s->iwidth[2]);
  773 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
  774 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
  775 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
./engine_strays.c:
  519 :           sp->gpart = gp;
./feedback/AGORA/feedback.c:
  109 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  110 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  118 :     dt_star = get_timestep(sp->time_bin, time_base);
  124 :     if (cosmo->a > (double)sp->birth_scale_factor)
  126 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  130 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  163 :   if (sp->feedback_data.idle == 1) {
  164 :     sp->feedback_data.will_do_feedback = 0;
  176 :   sp->feedback_data.energy_ejected = 0;
  177 :   sp->feedback_data.will_do_feedback = 0;
  180 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  195 :   double NSN = sp->mass / phys_const->const_solar_mass *
  199 :   sp->feedback_data.energy_ejected = NSN * feedback_props->energy_per_CCSN;
  200 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  203 :   sp->feedback_data.mass_ejected = NSN * feedback_props->ejected_mass_per_CCSN;
  206 :   sp->feedback_data.metal_mass_ejected[0] =
  208 :   sp->feedback_data.metal_mass_ejected[AGORA_CHEMISTRY_ELEMENT_COUNT - 1] =
  212 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  215 :   sp->feedback_data.idle = 1;
  226 :   return sp->feedback_data.will_do_feedback;
  236 :   sp->feedback_data.enrichment_weight = 0.f;
  250 :   sp->feedback_data.energy_ejected = 0;
  253 :   sp->feedback_data.will_do_feedback = 1;
  256 :   sp->feedback_data.idle = 0;
  274 :   sp->feedback_data.energy_ejected = 0;
  277 :   sp->feedback_data.will_do_feedback = 1;
  280 :   sp->feedback_data.idle = 0;
  323 :   const float hi_inv = 1.f / sp->h;
  325 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
./feedback/EAGLE/enrichment.h:
   39 :   return props->num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  139 :   return num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
./feedback/EAGLE_kinetic/feedback.c:
  110 :   const double rho_birth = sp->birth_density;
  175 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  177 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  247 :             sp->id, i, ti_begin, random_number_stellar_feedback_2);
  277 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  281 :     sp->f_E = f_E;
  282 :     sp->feedback_data.to_distribute.SNII_E_kinetic = E_kinetic;
  283 :     sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj =
  312 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  322 :   const double M_init = sp->mass_init;
  335 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  336 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  337 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  338 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  343 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  350 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  353 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  366 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  369 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  407 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  411 :                 abundances, feedback_props, &sp->feedback_data);
  415 :                abundances, feedback_props, &sp->feedback_data);
  419 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  424 :   sp->feedback_data.to_distribute.mass =
  425 :       sp->feedback_data.to_distribute.total_metal_mass +
  426 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  427 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  430 :   sp->feedback_data.to_distribute.energy +=
  431 :       sp->feedback_data.to_distribute.mass *
  435 :   sp->feedback_data.to_distribute.energy +=
  436 :       sp->feedback_data.to_distribute.mass * 0.5f *
  437 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
./feedback/EAGLE_kinetic/feedback.h:
  104 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  127 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  128 :   sp->feedback_data.to_collect.ngb_N = 0;
  129 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  130 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  131 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  134 :   ray_init(sp->feedback_data.SNII_rays_true, eagle_SNII_feedback_num_of_rays);
  135 :   ray_init(sp->feedback_data.SNII_rays_mirr, eagle_SNII_feedback_num_of_rays);
  136 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_true,
  138 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_mirr,
  142 :   sp->has_done_feedback = 0;
  164 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  166 :     return time - (double)sp->last_enrichment_time;
  178 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  181 :   sp->feedback_data.to_distribute.mass = 0.f;
  185 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  187 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  188 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  189 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  190 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  191 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  192 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  193 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  194 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  197 :   sp->feedback_data.to_distribute.energy = 0.f;
  200 :   sp->feedback_data.to_distribute.SNII_E_kinetic = 0.f;
  203 :   sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj = 0;
  258 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  262 :   const float h = sp->h;
  266 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  267 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  268 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  276 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  280 :     sp->last_enrichment_time = cosmo->a;
  282 :     sp->last_enrichment_time = time;
  285 :   sp->has_done_feedback = 1;
  313 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  316 :       sp->count_since_last_enrichment = 0;
  322 :     if (sp->birth_time == (float)time) {
  325 :       sp->count_since_last_enrichment = 0;
  336 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  338 :     age_of_star = time - (double)sp->birth_time;
  345 :     sp->count_since_last_enrichment = 0;
  350 :     sp->count_since_last_enrichment++;
  352 :     if ((sp->count_since_last_enrichment %
  356 :       sp->count_since_last_enrichment = 0;
./feedback/EAGLE_thermal/feedback.c:
  124 :   const double rho_birth = sp->birth_density;
  207 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  209 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  255 :             sp->id, i, ti_begin, random_number_stellar_feedback_3);
  271 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  287 :     double star_f_E = sp->f_E * sp->number_of_SNII_events;
  290 :     star_f_E = (star_f_E + f_E) / (sp->number_of_SNII_events + 1.);
  293 :     sp->f_E = star_f_E;
  294 :     sp->number_of_SNII_events++;
  295 :     sp->feedback_data.to_distribute.SNII_delta_u = delta_u;
  296 :     sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj =
  325 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  335 :   const double M_init = sp->mass_init;
  348 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  349 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  350 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  351 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  356 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  363 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  366 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  379 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  382 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  420 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  424 :                 abundances, feedback_props, &sp->feedback_data);
  428 :                abundances, feedback_props, &sp->feedback_data);
  432 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  437 :   sp->feedback_data.to_distribute.mass =
  438 :       sp->feedback_data.to_distribute.total_metal_mass +
  439 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  440 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  443 :   sp->feedback_data.to_distribute.energy +=
  444 :       sp->feedback_data.to_distribute.mass *
  448 :   sp->feedback_data.to_distribute.energy +=
  449 :       sp->feedback_data.to_distribute.mass * 0.5f *
  450 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
./feedback/EAGLE_thermal/feedback.h:
  103 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  126 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  127 :   sp->feedback_data.to_collect.ngb_N = 0;
  128 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  129 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  130 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  133 :   ray_init(sp->feedback_data.SNII_rays, eagle_SNII_feedback_num_of_rays);
  136 :   sp->has_done_feedback = 0;
  158 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  160 :     return time - sp->last_enrichment_time;
  172 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  175 :   sp->feedback_data.to_distribute.mass = 0.f;
  179 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  181 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  182 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  183 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  184 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  185 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  186 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  187 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  188 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  191 :   sp->feedback_data.to_distribute.energy = 0.f;
  194 :   sp->feedback_data.to_distribute.SNII_delta_u = 0.f;
  197 :   sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj = 0;
  252 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  256 :   const float h = sp->h;
  260 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  261 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  262 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  270 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  274 :     sp->last_enrichment_time = cosmo->a;
  276 :     sp->last_enrichment_time = time;
  279 :   sp->has_done_feedback = 1;
  307 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  310 :       sp->count_since_last_enrichment = 0;
  316 :     if (sp->birth_time == (float)time) {
  319 :       sp->count_since_last_enrichment = 0;
  330 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  332 :     age_of_star = time - (double)sp->birth_time;
  339 :     sp->count_since_last_enrichment = 0;
  344 :     sp->count_since_last_enrichment++;
  346 :     if ((sp->count_since_last_enrichment %
  350 :       sp->count_since_last_enrichment = 0;
./feedback/GEAR/feedback.c:
  169 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  170 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  178 :     dt_star = get_timestep(sp->time_bin, time_base);
  184 :     if (cosmo->a > (double)sp->birth_scale_factor)
  186 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  190 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  230 :   sp->feedback_data.energy_ejected = 0;
  231 :   sp->feedback_data.will_do_feedback = 0;
  234 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  258 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  261 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  272 :   return sp->feedback_data.will_do_feedback;
  302 :   sp->feedback_data.enrichment_weight = 0.f;
  316 :   sp->feedback_data.energy_ejected = 0;
  319 :   sp->feedback_data.will_do_feedback = 1;
  346 :   sp->feedback_data.energy_ejected = 0;
  349 :   sp->feedback_data.will_do_feedback = 1;
  392 :   const float hi_inv = 1.f / sp->h;
  394 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
./feedback/GEAR/stellar_evolution.c:
   74 :   const float rand_sn = random_unit_interval(sp->id, ti_begin, random_type);
  121 :   sp->feedback_data.mass_ejected = mass_frac_snii * sp->sf_data.birth_mass +
  125 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  127 :     message("Negative mass, skipping current star: %lli", sp->id);
  129 :     sp->feedback_data.number_snia = 0;
  130 :     sp->feedback_data.number_snii = 0;
  131 :     sp->feedback_data.mass_ejected = 0;
  136 :   sp->mass -= sp->feedback_data.mass_ejected;
  156 :     sp->feedback_data.metal_mass_ejected[i] =
  164 :     sp->feedback_data.metal_mass_ejected[i] *= sp->sf_data.birth_mass;
  167 :     sp->feedback_data.metal_mass_ejected[i] +=
  212 :   sp->feedback_data.mass_ejected = mass_snia + mass_snii;
  215 :   sp->feedback_data.mass_ejected *= phys_const->const_solar_mass;
  218 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  220 :     message("Negative mass, skipping current star: %lli", sp->id);
  222 :     sp->feedback_data.number_snia = 0;
  223 :     sp->feedback_data.number_snii = 0;
  224 :     sp->feedback_data.mass_ejected = 0;
  229 :   sp->mass -= sp->feedback_data.mass_ejected;
  247 :     sp->feedback_data.metal_mass_ejected[i] =
  255 :     sp->feedback_data.metal_mass_ejected[i] *= m_avg * number_snii;
  258 :     sp->feedback_data.metal_mass_ejected[i] += snia_yields[i] * number_snia;
  261 :     sp->feedback_data.metal_mass_ejected[i] *= phys_const->const_solar_mass;
  331 :   const float m_init = sp->sf_data.birth_mass / phys_const->const_solar_mass;
  366 :     sp->feedback_data.number_snia = number_snia;
  367 :     sp->feedback_data.number_snii = number_snii;
  376 :     sp->feedback_data.number_snia = number_snia_f;
  377 :     sp->feedback_data.number_snii = number_snii_f;
  393 :   sp->feedback_data.energy_ejected = 0;
  397 :   sp->feedback_data.energy_ejected +=
  398 :       sp->feedback_data.number_snia * snia_energy;
  404 :   sp->feedback_data.energy_ejected +=
  405 :       sp->feedback_data.number_snii * snii_energy;
./feedback/KIARA/feedback.c:
   96 :   double logmass6 = log10(sp->mass * fb_props->mass_to_solar_mass * 1.e-6); 
   99 :   double z = sp->chemistry_data.metal_mass_fraction_total;
  183 :   for (k=0; k<chemistry_element_count; k++) sp->feedback_data.delta_dust_mass[k]=0.f;
  187 :     sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->delta_AGBCOG1[chemistry_element_C] * 
  190 :     if (sp->feedback_data.delta_dust_mass[chemistry_element_C] > fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C])
  191 :             sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C];
  193 :     delta_metal_mass[chemistry_element_C] -= sp->feedback_data.delta_dust_mass[chemistry_element_C];
  202 :         sp->feedback_data.delta_dust_mass[k] = 16.0 * (delta_table[chemistry_element_Mg] * delta_metal_mass[chemistry_element_Mg] / 24.305 
  209 :         sp->feedback_data.delta_dust_mass[k] = delta_table[k] * delta_metal_mass[k];
  211 :       if (sp->feedback_data.delta_dust_mass[k] > fb_props->max_dust_fraction * delta_metal_mass[k])
  212 :             sp->feedback_data.delta_dust_mass[k] = fb_props->max_dust_fraction * delta_metal_mass[k];
  213 :       delta_metal_mass[k] -= sp->feedback_data.delta_dust_mass[k];
  261 :   if (sp->mass_init == sp->mass) fb_first = 1;
  263 :   z = sp->chemistry_data.metal_mass_fraction_total;
  272 :     feh = sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H];
  777 :   *ejecta_unprocessed = max(0.f, sp->mass_init * SNII_U);
  778 :   *ejecta_mass = max(0.f, sp->mass_init * SNII_E);
  793 :       SWn = sp->mass_init * SW_R;
  804 :       SWn = sp->mass_init * SW_R;
  805 :       SNn = sp->mass_init * SNII_R;
  808 :         *ejecta_energy += sp->mass_init * SNII_ENE;
  815 :       ejecta_metal_mass[k] = sp->mass_init * SNII_Z[k];
  824 :         SNn = sp->mass_init * SNIa_R;
  840 : /*    if (sp->id == 3554000 ) message("Star %lld with m=%g (frac=%g), age=%g Myr, Z=%g is ejecting %g Msun (fIa=%g, Zej=%g) and %g erg in %g Myr.",
  841 :           sp->id,
  842 :           sp->mass * fb_props->mass_to_solar_mass,
  843 :           sp->mass/sp->mass_init,
./feedback/KIARA/feedback.h:
  240 :   sp->feedback_data.enrichment_weight_inv = 0.f;
  241 :   sp->feedback_data.ngb_N = 0;
  242 :   sp->feedback_data.ngb_mass = 0.f;
  243 :   sp->feedback_data.ngb_rho = 0.f;
  244 :   sp->feedback_data.ngb_Z = 0.f;
  246 :   sp->has_done_feedback = 0;
  289 :   sp->feedback_data.enrichment_weight = 0.f;
  292 :   sp->feedback_data.mass = 0.f;
  296 :     sp->feedback_data.metal_mass[i] = 0.f;
  298 :     sp->feedback_data.delta_dust_mass[i] = 0.f;
  301 :   sp->feedback_data.total_metal_mass = 0.f;
  304 :   sp->feedback_data.energy = 0.f;
  346 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  374 :       sp->gpart->fof_data.group_stellar_mass;
  387 :       sp->gpart->fof_data.group_mass;
  396 :   const double rand_for_scatter = random_unit_interval(sp->id, ti_current,
  437 :   if (sp->feedback_data.ngb_rho <= 0.) {
  438 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  443 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  447 :   const float h = sp->h;
  451 :   sp->feedback_data.ngb_rho *= h_inv_dim;
  453 :   const float rho_inv = 1.f / sp->feedback_data.ngb_rho;
  454 :   sp->feedback_data.ngb_Z *= h_inv_dim * rho_inv;
  459 :   if (sp->feedback_data.ngb_rho <= 0) {
  461 :             sp->id, sp->mass);
  468 :   if (sp->feedback_data.ngb_rho <= 0)
  470 :             sp->id, sp->mass);
  471 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  476 :   const float ngb_gas_mass = sp->feedback_data.ngb_mass;
  479 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  486 :       sp->feedback_data.enrichment_weight_inv;
  489 :   if (sp->feedback_data.enrichment_weight_inv < 0.)
  496 :   sp->feedback_data.enrichment_weight = enrichment_weight;
  499 :   if (sp->feedback_data.enrichment_weight < 0.)
  506 :      sp->feedback_data.feedback_mass_to_launch = eta * sp->mass;
  507 :      sp->feedback_data.feedback_wind_velocity = feedback_compute_kick_velocity(sp, cosmo, feedback_props, ti_begin);
  512 :   //sp->feedback_data.lum_habing = feedback_get_lum_from_star_particle(sp, star_age_beg_step, feedback_props);
  513 :   //message("G0: age %g  Lhabing %g\n",star_age_beg_step*feedback_props->time_to_Myr, sp->feedback_data.lum_habing);
  517 :   sp->feedback_data.mass = 0.f;
  521 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  547 :     message("[Fe/H] = %g", sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H]);
  548 :     message("Z = %g", sp->chemistry_data.metal_mass_fraction_total);
  551 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  556 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  561 :   if (sp->mass-ejecta_mass < 0.2 * sp->mass_init) {
  563 :           sp->id, sp->mass, ejecta_mass);
  578 :     dum = ejecta_unprocessed * sp->chemistry_data.metal_mass_fraction[elem];
  604 :   sp->feedback_data.total_metal_mass = 0.f;
  606 :     sp->feedback_data.metal_mass[elem] = ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  610 :       sp->feedback_data.total_metal_mass += ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  615 :     if (sp->mass/sp->mass_init<0.2) message("Star particle %lld with mass %g (init %g) is giving away %g Msun and %g erg (%g Msun metals).",
  616 :           sp->id, 
  617 :           sp->mass, 
  618 :           sp->mass_init, 
  621 :           sp->feedback_data.total_metal_mass * feedback_props->mass_to_solar_mass);
  626 :   if (sp->feedback_data.total_metal_mass > 0.f) {
  628 :                                          sp->feedback_data.metal_mass);
  633 :   sp->feedback_data.mass = ejecta_mass;
  637 :   //sp->feedback_data.energy = ejecta_energy;
  640 :   sp->feedback_data.feedback_energy_reservoir += ejecta_energy * cosmo->a_inv * cosmo->a_inv;
  643 :   sp->mass -= ejecta_mass;
  646 :   sp->last_enrichment_time = cosmo->a;
  650 :   sp->feedback_data.SNe_ThisTimeStep = N_SNe;
  654 :   sp->has_done_feedback = 1;
./feedback/KIARA/feedback_iact.h:
  285 :   pj->feedback_data.radius_stream = si->sf_data.SFR * si->feedback_mass_to_launch/ (sp->mass *2 * M_PI * rho_volumefilling * (wind_velocity - sp->velocity));
./feedback/SIMBA/feedback.c:
  344 :   if (sp->feedback_data.to_collect.ngb_rho <= 0) {
  346 :             sp->id, sp->mass);
  353 :   if (sp->feedback_data.to_collect.ngb_rho <= 0)
  355 :             sp->id, sp->mass);
  356 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  366 :   const double M_init = sp->mass_init;
  379 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  382 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  389 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  392 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  405 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  408 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  439 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  443 :                 abundances, feedback_props, &sp->feedback_data);
  447 :                abundances, feedback_props, &sp->feedback_data);
  451 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  456 :   sp->feedback_data.to_distribute.mass =
  457 :       sp->feedback_data.to_distribute.total_metal_mass +
  458 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  459 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  462 :   sp->feedback_data.to_distribute.energy +=
  463 :       sp->feedback_data.to_distribute.mass *
  467 :   sp->feedback_data.to_distribute.energy +=
  468 :       sp->feedback_data.to_distribute.mass * 0.5f *
  469 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
./feedback/SIMBA/feedback.h:
  177 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  200 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  201 :   sp->feedback_data.to_collect.ngb_N = 0;
  202 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  203 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  204 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  206 :   sp->has_done_feedback = 0;
  242 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  244 :     return time - (double)sp->last_enrichment_time;
  256 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  259 :   sp->feedback_data.to_distribute.mass = 0.f;
  263 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  265 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  266 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  267 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  268 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  269 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  270 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  271 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  272 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  275 :   sp->feedback_data.to_distribute.energy = 0.f;
  331 :   if (sp->feedback_data.to_collect.ngb_rho <= 0.) {
  332 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  337 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  341 :   const float h = sp->h;
  345 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  347 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  348 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  356 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  360 :     sp->last_enrichment_time = cosmo->a;
  362 :     sp->last_enrichment_time = time;
  365 :   sp->has_done_feedback = 1;
  393 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  396 :       sp->count_since_last_enrichment = 0;
  402 :     if (sp->birth_time == (float)time) {
  405 :       sp->count_since_last_enrichment = 0;
  416 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  418 :     age_of_star = time - (double)sp->birth_time;
  425 :     sp->count_since_last_enrichment = 0;
  430 :     sp->count_since_last_enrichment++;
  432 :     if ((sp->count_since_last_enrichment %
  436 :       sp->count_since_last_enrichment = 0;
./feedback/SIMBA_alexei/feedback.h:
   41 :   const float v_circ = pow(sp->feedback_data.host_galaxy_mass /
   44 :   const float sigma = sqrtf(sp->potential * cosmo->a_inv);
   48 :   sp->feedback_data.to_distribute.v_kick =
   59 :   sp->feedback_data.to_distribute.v_kick =
  121 :   return (sp->birth_time != -1.);
  132 :   sp->feedback_data.host_galaxy_mass = 1.;
  153 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  155 :     return time - (double)sp->last_enrichment_time;
  177 :   sp->feedback_data.to_distribute.simba_delay_time =
  218 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  232 :     sp->last_enrichment_time = cosmo->a;
  234 :     sp->last_enrichment_time = time;
  237 :   sp->has_done_feedback = 1;
./fof.c:
 4585 :   sp->gpart->fof_data.is_grouppable = 1;
 4626 :   if (sp->gpart != gp) error("Copying group properties to the wrong star!");
 4629 :   sp->group_data.mass = gp->fof_data.group_mass;
 4630 :   sp->group_data.stellar_mass = gp->fof_data.group_stellar_mass;
 4632 :     sp->group_data.ssfr = gp->fof_data.group_sfr / gp->fof_data.group_stellar_mass;
 4634 :     sp->group_data.ssfr = 0.f;
./fof_data:
   44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
   45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
   46 :   649 :     sp->gpart->type = swift_type_dark_matter;
   89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
   90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
   91 :   355 :       sp->gpart->fof_data.group_mass;
  120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  123 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  124 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  125 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  126 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  127 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  128 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  129 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  130 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  131 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  132 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  133 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  134 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  135 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  136 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  137 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  138 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  139 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  140 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  141 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  142 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  143 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  144 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  145 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  146 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  147 :  1490 :   251 :   sp->gpart->mass += gas_mass;
  148 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  149 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  150 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  151 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
  152 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
  153 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
  154 :  1591 :   339 :     sp->gpart->mass = mass_star;
  155 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  156 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  157 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  158 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  159 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  160 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  161 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  162 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  163 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  164 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  165 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  166 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  167 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  168 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  169 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  170 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  171 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  172 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  173 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  174 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  175 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  176 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  177 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  178 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  179 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  180 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  181 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  182 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  183 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  184 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  185 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  186 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  187 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  190 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  308 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  309 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  310 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  311 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  312 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  313 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  314 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  315 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  316 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  375 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  382 :   251 :   sp->gpart->mass += gas_mass;
  383 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  384 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  385 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  421 :   274 :   sp->gpart->x[0] = sp->x[0];
  422 :   275 :   sp->gpart->x[1] = sp->x[1];
  423 :   276 :   sp->gpart->x[2] = sp->x[2];
  427 :   339 :     sp->gpart->mass = mass_star;
  430 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  431 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  432 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  434 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  435 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  436 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  438 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  439 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  440 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  441 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  442 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  443 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  444 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  445 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  446 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  447 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  448 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  449 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  450 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  451 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  452 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  453 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  454 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  455 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  457 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  458 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  459 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  460 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  461 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  462 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  463 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  464 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  465 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
./fof_data.:
   44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
   45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
   46 :   649 :     sp->gpart->type = swift_type_dark_matter;
   89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
   90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
   91 :   355 :       sp->gpart->fof_data.group_mass;
  120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  162 :    44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  163 :    45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  164 :    46 :   649 :     sp->gpart->type = swift_type_dark_matter;
  202 :    89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  203 :    90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  204 :    91 :   355 :       sp->gpart->fof_data.group_mass;
  230 :   120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  232 :   123 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  233 :   124 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  234 :   125 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  235 :   126 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  236 :   127 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  237 :   128 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  238 :   129 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  239 :   130 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  240 :   131 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  241 :   132 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  242 :   133 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  243 :   134 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  244 :   135 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  245 :   136 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  246 :   137 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  247 :   138 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  248 :   139 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  249 :   140 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  250 :   141 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  251 :   142 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  252 :   143 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  253 :   144 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  254 :   145 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  255 :   146 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  256 :   147 :  1490 :   251 :   sp->gpart->mass += gas_mass;
  257 :   148 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  258 :   149 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  259 :   150 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  260 :   151 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
  261 :   152 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
  262 :   153 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
  263 :   154 :  1591 :   339 :     sp->gpart->mass = mass_star;
  264 :   155 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  265 :   156 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  266 :   157 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  267 :   158 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  268 :   159 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  269 :   160 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  270 :   161 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  271 :   162 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  272 :   163 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  273 :   164 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  274 :   165 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  275 :   166 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  276 :   167 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  277 :   168 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  278 :   169 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  279 :   170 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  280 :   171 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  281 :   172 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  282 :   173 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  283 :   174 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  284 :   175 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  285 :   176 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  286 :   177 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  287 :   178 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  288 :   179 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  289 :   180 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  290 :   181 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  291 :   182 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  292 :   183 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  293 :   184 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  294 :   185 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  295 :   186 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  296 :   187 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  298 :   190 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  397 :   308 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  398 :   309 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  399 :   310 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  400 :   311 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  401 :   312 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  402 :   313 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  403 :   314 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  404 :   315 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  405 :   316 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  461 :   375 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  467 :   382 :   251 :   sp->gpart->mass += gas_mass;
  468 :   383 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  469 :   384 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  470 :   385 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  500 :   421 :   274 :   sp->gpart->x[0] = sp->x[0];
  501 :   422 :   275 :   sp->gpart->x[1] = sp->x[1];
  502 :   423 :   276 :   sp->gpart->x[2] = sp->x[2];
  506 :   427 :   339 :     sp->gpart->mass = mass_star;
  508 :   430 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  509 :   431 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  510 :   432 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  511 :   434 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  512 :   435 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  513 :   436 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  514 :   438 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  515 :   439 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  516 :   440 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  517 :   441 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  518 :   442 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  519 :   443 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  520 :   444 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  521 :   445 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  522 :   446 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  523 :   447 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  524 :   448 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  525 :   449 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  526 :   450 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  527 :   451 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  528 :   452 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  529 :   453 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  530 :   454 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  531 :   455 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  532 :   457 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  533 :   458 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  534 :   459 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  535 :   460 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  536 :   461 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  537 :   462 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  538 :   463 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  539 :   464 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  540 :   465 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  581 :    44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  582 :    45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  583 :    46 :   649 :     sp->gpart->type = swift_type_dark_matter;
  621 :    89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  622 :    90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  623 :    91 :   355 :       sp->gpart->fof_data.group_mass;
  649 :   120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  690 :   162 :    44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  691 :   163 :    45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  692 :   164 :    46 :   649 :     sp->gpart->type = swift_type_dark_matter;
  730 :   202 :    89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  731 :   203 :    90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  732 :   204 :    91 :   355 :       sp->gpart->fof_data.group_mass;
  758 :   230 :   120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  760 :   232 :   123 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  761 :   233 :   124 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  762 :   234 :   125 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  763 :   235 :   126 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  764 :   236 :   127 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  765 :   237 :   128 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  766 :   238 :   129 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  767 :   239 :   130 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  768 :   240 :   131 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  769 :   241 :   132 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  770 :   242 :   133 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  771 :   243 :   134 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  772 :   244 :   135 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  773 :   245 :   136 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  774 :   246 :   137 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  775 :   247 :   138 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  776 :   248 :   139 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  777 :   249 :   140 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  778 :   250 :   141 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  779 :   251 :   142 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  780 :   252 :   143 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  781 :   253 :   144 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  782 :   254 :   145 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  783 :   255 :   146 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  784 :   256 :   147 :  1490 :   251 :   sp->gpart->mass += gas_mass;
  785 :   257 :   148 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  786 :   258 :   149 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  787 :   259 :   150 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  788 :   260 :   151 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
  789 :   261 :   152 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
  790 :   262 :   153 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
  791 :   263 :   154 :  1591 :   339 :     sp->gpart->mass = mass_star;
  792 :   264 :   155 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  793 :   265 :   156 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  794 :   266 :   157 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  795 :   267 :   158 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  796 :   268 :   159 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  797 :   269 :   160 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  798 :   270 :   161 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  799 :   271 :   162 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  800 :   272 :   163 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  801 :   273 :   164 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  802 :   274 :   165 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  803 :   275 :   166 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  804 :   276 :   167 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  805 :   277 :   168 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  806 :   278 :   169 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  807 :   279 :   170 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  808 :   280 :   171 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  809 :   281 :   172 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  810 :   282 :   173 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  811 :   283 :   174 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  812 :   284 :   175 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  813 :   285 :   176 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  814 :   286 :   177 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  815 :   287 :   178 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  816 :   288 :   179 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  817 :   289 :   180 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  818 :   290 :   181 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  819 :   291 :   182 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  820 :   292 :   183 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  821 :   293 :   184 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  822 :   294 :   185 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  823 :   295 :   186 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  824 :   296 :   187 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  826 :   298 :   190 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  925 :   397 :   308 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  926 :   398 :   309 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  927 :   399 :   310 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  928 :   400 :   311 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  929 :   401 :   312 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  930 :   402 :   313 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  931 :   403 :   314 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  932 :   404 :   315 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  933 :   405 :   316 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  989 :   461 :   375 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  995 :   467 :   382 :   251 :   sp->gpart->mass += gas_mass;
  996 :   468 :   383 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  997 :   469 :   384 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  998 :   470 :   385 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 1028 :   500 :   421 :   274 :   sp->gpart->x[0] = sp->x[0];
 1029 :   501 :   422 :   275 :   sp->gpart->x[1] = sp->x[1];
 1030 :   502 :   423 :   276 :   sp->gpart->x[2] = sp->x[2];
 1034 :   506 :   427 :   339 :     sp->gpart->mass = mass_star;
 1036 :   508 :   430 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1037 :   509 :   431 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1038 :   510 :   432 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1039 :   511 :   434 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1040 :   512 :   435 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1041 :   513 :   436 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1042 :   514 :   438 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1043 :   515 :   439 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1044 :   516 :   440 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1045 :   517 :   441 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1046 :   518 :   442 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1047 :   519 :   443 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1048 :   520 :   444 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1049 :   521 :   445 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1050 :   522 :   446 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1051 :   523 :   447 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1052 :   524 :   448 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1053 :   525 :   449 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1054 :   526 :   450 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1055 :   527 :   451 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1056 :   528 :   452 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1057 :   529 :   453 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1058 :   530 :   454 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1059 :   531 :   455 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1060 :   532 :   457 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1061 :   533 :   458 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1062 :   534 :   459 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1063 :   535 :   460 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1064 :   536 :   461 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1065 :   537 :   462 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1066 :   538 :   463 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1067 :   539 :   464 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1068 :   540 :   465 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1070 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
 1071 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
 1072 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
 1073 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
 1074 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
 1075 :   536 :   355 :       sp->gpart->fof_data.group_mass;
 1076 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
 1077 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
 1078 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
 1079 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
 1080 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
 1081 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
 1082 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
 1083 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
 1084 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
 1085 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
 1086 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
 1087 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
 1088 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
 1089 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
 1090 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
 1091 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
 1092 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
 1093 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
 1094 :  1490 :   251 :   sp->gpart->mass += gas_mass;
 1095 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
 1096 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
 1097 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 1098 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
 1099 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
 1100 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
 1101 :  1591 :   339 :     sp->gpart->mass = mass_star;
 1102 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1103 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1104 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1105 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1106 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1107 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1108 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1109 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1110 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1111 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1112 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1113 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1114 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1115 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1116 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1117 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1118 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1119 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1120 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1121 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1122 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1123 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1124 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1125 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1126 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1127 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1128 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1129 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1130 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1131 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1132 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1133 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1134 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1137 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
 1255 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
 1256 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
 1257 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
 1258 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
 1259 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
 1260 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
 1261 :   331 :   sp->gpart->v_full[0] = sp->v[0];
 1262 :   332 :   sp->gpart->v_full[1] = sp->v[1];
 1263 :   333 :   sp->gpart->v_full[2] = sp->v[2];
 1322 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
 1329 :   251 :   sp->gpart->mass += gas_mass;
 1330 :   279 :   sp->gpart->v_full[0] = sp->v[0];
 1331 :   280 :   sp->gpart->v_full[1] = sp->v[1];
 1332 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 1368 :   274 :   sp->gpart->x[0] = sp->x[0];
 1369 :   275 :   sp->gpart->x[1] = sp->x[1];
 1370 :   276 :   sp->gpart->x[2] = sp->x[2];
 1374 :   339 :     sp->gpart->mass = mass_star;
 1377 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1378 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1379 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1381 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1382 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1383 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1385 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1386 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1387 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1388 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1389 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1390 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1391 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1392 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1393 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1394 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1395 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1396 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1397 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1398 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1399 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1400 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1401 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1402 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1404 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1405 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1406 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1407 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1408 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1409 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1410 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1411 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1412 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
./fof_data.group_stellar_mass:
    2 :   438 :   const timebin_t spart_bin = sp->time_bin;
    3 :   442 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
    4 :   446 :         "s-particle in an impossible time-zone! sp->ti_end=%lld "
    5 :   541 :   return sp->time_bin == time_bin_inhibited;
    6 :   747 :   const timebin_t spart_bin = sp->time_bin;
    7 :   752 :       get_integer_time_begin(ti_current + 1, sp->time_bin);
    8 :   756 :         "s-particle in an impossible time-zone! sp->ti_beg=%lld "
   10 :  1353 :     if ((sp->x[0] < c->loc[0] / space_stretch) ||
   11 :  1354 :         (sp->x[1] < c->loc[1] / space_stretch) ||
   12 :  1355 :         (sp->x[2] < c->loc[2] / space_stretch) ||
   13 :  1356 :         (sp->x[0] >= (c->loc[0] + c->width[0]) * space_stretch) ||
   14 :  1357 :         (sp->x[1] >= (c->loc[1] + c->width[1]) * space_stretch) ||
   15 :  1358 :         (sp->x[2] >= (c->loc[2] + c->width[2]) * space_stretch))
   16 :  1361 :     if (sp->time_bin != time_bin_not_created &&
   17 :  1362 :         sp->time_bin != time_bin_inhibited) {
   18 :  1363 :       const struct gpart *gp = sp->gpart;
   19 :  1364 :       if (gp == NULL && sp->time_bin != time_bin_not_created)
   21 :   255 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
   22 :   256 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
   23 :   257 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
   24 :   260 :   sp->time_bin = e->min_active_bin;
   25 :   264 :   sp->ti_drift = e->ti_current;
   26 :   388 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
   27 :   389 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
   28 :   390 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
   29 :   393 :   sp->time_bin = e->min_active_bin;
   30 :   397 :   sp->ti_drift = e->ti_current;
   31 :   642 :   if (sp->time_bin == time_bin_inhibited) return;
   32 :   645 :   sp->time_bin = time_bin_inhibited;
   33 :   646 :   if (sp->gpart) {
   34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
   35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
   36 :   649 :     sp->gpart->type = swift_type_dark_matter;
   37 :   655 :   if (sp->gpart) {
   38 :   660 :   sp->gpart = NULL;
   39 :   813 :   if (sp->gpart == NULL)
   40 :   817 :   struct gpart *gp = sp->gpart;
   41 :   820 :   sp->time_bin = time_bin_inhibited;
   42 :   823 :   sp->gpart = NULL;
   43 :   827 :   gp->id_or_neg_offset = sp->id;
   44 :   830 :   gp->ti_kick = sp->ti_kick;
   45 :   873 :   sp->x_diff[0] = xp->x_diff[0];
   46 :   874 :   sp->x_diff[1] = xp->x_diff[1];
   47 :   875 :   sp->x_diff[2] = xp->x_diff[2];
   48 :   881 :   sp->id = gp->id_or_neg_offset;
   49 :   885 :   sp->gpart = gp;
   50 :   889 :   gp->time_bin = sp->time_bin;
   51 :   892 :   sp->mass = gp->mass;
   52 :   893 :   sp->x[0] = gp->x[0];
   53 :   894 :   sp->x[1] = gp->x[1];
   54 :   895 :   sp->x[2] = gp->x[2];
   55 :   896 :   sp->v[0] = gp->v_full[0];
   56 :   897 :   sp->v[1] = gp->v_full[1];
   57 :   898 :   sp->v[2] = gp->v_full[2];
   58 :   901 :   sp->ti_kick = gp->ti_kick;
   59 :   902 :   gp->ti_drift = sp->ti_drift;
   60 :   906 :   sp->h = p->h;
   61 :   941 :   sp->x_diff[0] = xp->x_diff[0];
   62 :   942 :   sp->x_diff[1] = xp->x_diff[1];
   63 :   943 :   sp->x_diff[2] = xp->x_diff[2];
   64 :   959 :   sp->id = space_get_new_unique_id(e->s);
   65 :   963 :   sp->gpart = gp;
   66 :   967 :   gp->time_bin = sp->time_bin;
   67 :   970 :   sp->mass = hydro_get_mass(p);
   68 :   971 :   sp->x[0] = p->x[0];
   69 :   972 :   sp->x[1] = p->x[1];
   70 :   973 :   sp->x[2] = p->x[2];
   71 :   974 :   sp->v[0] = p->v_full[0];
   72 :   975 :   sp->v[1] = p->v_full[1];
   73 :   976 :   sp->v[2] = p->v_full[2];
   74 :   979 :   sp->ti_kick = p->ti_kick;
   75 :   980 :   sp->ti_drift = p->ti_drift;
   76 :   984 :   sp->h = p->h;
   77 :  1024 :   sp->x_diff[0] = xp->x_diff[0];
   78 :  1025 :   sp->x_diff[1] = xp->x_diff[1];
   79 :  1026 :   sp->x_diff[2] = xp->x_diff[2];
   80 :  1032 :   sp->id = p->id;
   81 :  1036 :   sp->gpart = gp;
   82 :  1040 :   gp->time_bin = sp->time_bin;
   83 :  1043 :   sp->mass = gp->mass;
   84 :  1044 :   sp->x[0] = gp->x[0];
   85 :  1045 :   sp->x[1] = gp->x[1];
   86 :  1046 :   sp->x[2] = gp->x[2];
   87 :  1047 :   sp->v[0] = gp->v_full[0];
   88 :  1048 :   sp->v[1] = gp->v_full[1];
   89 :  1049 :   sp->v[2] = gp->v_full[2];
   90 :  1052 :   sp->ti_kick = gp->ti_kick;
   91 :  1053 :   gp->ti_drift = sp->ti_drift;
   92 :  1057 :   sp->r_cut = e->sink_properties->cut_off_radius;
   93 :  1090 :   sp->x_diff[0] = s->x_diff[0];
   94 :  1091 :   sp->x_diff[1] = s->x_diff[1];
   95 :  1092 :   sp->x_diff[2] = s->x_diff[2];
   96 :  1108 :   sp->id = space_get_new_unique_id(e->s);
   97 :  1112 :   sp->gpart = gp;
   98 :  1116 :   gp->time_bin = sp->time_bin;
   99 :  1119 :   sp->mass = s->mass;
  100 :  1120 :   sp->x[0] = s->x[0];
  101 :  1121 :   sp->x[1] = s->x[1];
  102 :  1122 :   sp->x[2] = s->x[2];
  103 :  1123 :   sp->v[0] = s->v[0];
  104 :  1124 :   sp->v[1] = s->v[1];
  105 :  1125 :   sp->v[2] = s->v[2];
  106 :  1128 :   sp->ti_kick = s->ti_kick;
  107 :  1129 :   sp->ti_drift = s->ti_drift;
  108 :  1133 :   sp->h = s->r_cut;
  110 :   666 :       if (fabs(sp->v[0] * dt_drift) > e->s->dim[0] ||
  111 :   667 :           fabs(sp->v[1] * dt_drift) > e->s->dim[1] ||
  112 :   668 :           fabs(sp->v[2] * dt_drift) > e->s->dim[2]) {
  113 :   677 :         if ((sp->x[0] > dim[0]) || (sp->x[0] < 0.) ||  // x
  114 :   678 :             (sp->x[1] > dim[1]) || (sp->x[1] < 0.) ||  // y
  115 :   679 :             (sp->x[2] > dim[2]) || (sp->x[2] < 0.)) {  // z
  116 :   707 :       sp->h = min(sp->h, stars_h_max);
  117 :   708 :       sp->h = max(sp->h, stars_h_min);
  118 :   711 :       const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  119 :   712 :                         sp->x_diff[1] * sp->x_diff[1] +
  120 :   713 :                         sp->x_diff[2] * sp->x_diff[2];
  121 :   716 :       const float dx2_sort = sp->x_diff_sort[0] * sp->x_diff_sort[0] +
  122 :   717 :                              sp->x_diff_sort[1] * sp->x_diff_sort[1] +
  123 :   718 :                              sp->x_diff_sort[2] * sp->x_diff_sort[2];
  124 :   723 :       cell_h_max = max(cell_h_max, sp->h);
  125 :   732 :         cell_h_max_active = max(cell_h_max_active, sp->h);
  126 :  1094 :       /* sp->h does not need to be limited. */
  128 :   864 :       for (int k = 0; k < csp->count; k++) {
  129 :   865 :         const int pid = csp->pairs[k].pid;
  130 :   866 :         const int pjd = csp->pairs[k].pjd;
  131 :   994 :       for (int k = 0; k < csp->count; k++) {
  132 :   995 :         const int pid = csp->pairs[k].pid;
  133 :   996 :         const int pjd = csp->pairs[k].pjd;
  134 :  1120 :       for (int k = 0; k < csp->count; k++) {
  135 :  1121 :         const int pid = csp->pairs[k].pid;
  136 :  1122 :         const int pjd = csp->pairs[k].pjd;
  137 :  1225 :       for (int k = 0; k < csp->count; k++) {
  138 :  1226 :         const int pid = csp->pairs[k].pid;
  139 :  1227 :         const int pjd = csp->pairs[k].pjd;
  140 :  1298 :   const struct engine *e = sp->e;
  141 :  1523 :   const struct engine *e = sp->e;
  142 :  1605 :       for (int k = 0; k < csp->count; k++) {
  143 :  1606 :         const int pid = csp->pairs[k].pid;
  144 :  1607 :         const int pjd = csp->pairs[k].pjd;
  146 :    69 :     sp->chemistry_data.metal_mass_fraction[i] =
  147 :    73 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  148 :   297 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  149 :   449 :   return sp->chemistry_data
  150 :   465 :   return sp->chemistry_data.metal_mass_fraction;
  151 :   554 :   return sp->chemistry_data
  152 :   556 :          sp->mass;
  154 :   193 :     sp->chemistry_data.metal_mass_fraction_total =
  155 :   197 :       sp->chemistry_data.metal_mass_fraction[elem] =
  156 :   203 :     sp->chemistry_data.smoothed_metal_mass_fraction_total =
  157 :   207 :       sp->chemistry_data.smoothed_metal_mass_fraction[elem] =
  158 :   517 :   return sp->chemistry_data.smoothed_metal_mass_fraction_total;
  159 :   532 :   return sp->chemistry_data.smoothed_metal_mass_fraction;
  160 :   615 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  161 :   640 :   return sp->chemistry_data.metal_mass_fraction_total;
  163 :    55 :     sp->chemistry_data.metal_mass_fraction[i] =
  164 :    59 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  165 :   429 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  166 :   549 :   return sp->chemistry_data
  167 :   564 :   return sp->chemistry_data.metal_mass_fraction[0];
  168 :   577 :   return sp->chemistry_data.metal_mass_fraction;
  169 :   654 :   return sp->chemistry_data
  170 :   656 :          sp->mass;
  172 :    56 :     sp->chemistry_data.metal_mass_fraction[i] =
  173 :    60 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  174 :   416 :     sp->chemistry_data.metal_mass_fraction[i] =
  175 :   417 :         data->initial_metallicities[i] * sp->mass;
  176 :   487 :   return sp->chemistry_data
  177 :   501 :   return sp->chemistry_data.metal_mass_fraction;
  178 :   590 :   return sp->chemistry_data
  179 :   592 :          sp->mass;
  181 :   254 :     sp->chemistry_data.metal_mass_fraction_total =
  182 :   258 :       sp->chemistry_data.metal_mass_fraction[elem] =
  183 :   601 :   return sp->chemistry_data.metal_mass_fraction_total;
  184 :   616 :   return sp->chemistry_data.metal_mass_fraction;
  185 :   699 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  186 :   724 :   return sp->chemistry_data.metal_mass_fraction_total;
  188 :   158 :     sp->chemistry_data.metal_mass_fraction_total =
  189 :   162 :       sp->chemistry_data.metal_mass_fraction[elem] =
  190 :   467 :   return sp->chemistry_data.metal_mass_fraction_total;
  191 :   482 :   return sp->chemistry_data.metal_mass_fraction;
  192 :   565 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  193 :   590 :   return sp->chemistry_data.metal_mass_fraction_total;
  195 :   100 :     if (!spart_is_inhibited(sp, e) && sp->time_bin != time_bin_not_created) {
  197 :   395 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  198 :   396 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  199 :   397 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  200 :   402 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  201 :   408 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  202 :   409 :                       sp->x_diff[1] * sp->x_diff[1] +
  203 :   410 :                       sp->x_diff[2] * sp->x_diff[2];
  204 :   412 :     stars_h_max = max(stars_h_max, sp->h);
  205 :   422 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  206 :   423 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  207 :   424 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  208 :   429 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  209 :   435 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  210 :   436 :                       sp->x_diff[1] * sp->x_diff[1] +
  211 :   437 :                       sp->x_diff[2] * sp->x_diff[2];
  212 :   439 :     sinks_h_max = max(sinks_h_max, sp->r_cut);
  214 :   248 :   if (sp->ti_drift != ti_old)
  215 :   251 :         "sp->ti_drift=%lld, "
  216 :   253 :         sp->ti_drift, ti_old, ti_current);
  217 :   255 :   sp->ti_drift = ti_current;
  218 :   261 :   const long long id = sp->id;
  219 :   267 :     sp->v[0] = 0.f;
  220 :   268 :     sp->v[1] = 0.f;
  221 :   269 :     sp->v[2] = 0.f;
  222 :   275 :   const double x[3] = {sp->x[0], sp->x[1], sp->x[2]};
  223 :   276 :   const float v_full[3] = {sp->v[0], sp->v[1], sp->v[2]};
  224 :   280 :   sp->x[0] += sp->v[0] * dt_drift;
  225 :   281 :   sp->x[1] += sp->v[1] * dt_drift;
  226 :   282 :   sp->x[2] += sp->v[2] * dt_drift;
  227 :   289 :     const float dx = sp->v[k] * dt_drift;
  228 :   290 :     sp->x_diff[k] -= dx;
  229 :   291 :     sp->x_diff_sort[k] -= dx;
  230 :   296 :   if (sp->gpart)
  231 :   297 :     lightcone_check_particle_crosses(e, replication_list, x, v_full, sp->gpart,
  233 :   105 :           get_integer_time_begin(e->ti_current, sp->time_bin);
  234 :   112 :       if (e->ti_current - ti_begin == get_integer_timestep(sp->time_bin))
  235 :  1355 :             get_integer_time_begin(e->ti_current, sp->time_bin);
  237 :   755 :     if (sp->time_bin == time_bin_inhibited)
  238 :   758 :     if (sp->time_bin == time_bin_not_created)
  239 :   763 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
  240 :   764 :                    sp->x[2] * s->iwidth[2]);
  241 :   773 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
  242 :   774 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
  243 :   775 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
  245 :   519 :           sp->gpart = gp;
  247 :   109 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  248 :   110 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  249 :   118 :     dt_star = get_timestep(sp->time_bin, time_base);
  250 :   124 :     if (cosmo->a > (double)sp->birth_scale_factor)
  251 :   126 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  252 :   130 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  253 :   163 :   if (sp->feedback_data.idle == 1) {
  254 :   164 :     sp->feedback_data.will_do_feedback = 0;
  255 :   176 :   sp->feedback_data.energy_ejected = 0;
  256 :   177 :   sp->feedback_data.will_do_feedback = 0;
  257 :   180 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  258 :   195 :   double NSN = sp->mass / phys_const->const_solar_mass *
  259 :   199 :   sp->feedback_data.energy_ejected = NSN * feedback_props->energy_per_CCSN;
  260 :   200 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  261 :   203 :   sp->feedback_data.mass_ejected = NSN * feedback_props->ejected_mass_per_CCSN;
  262 :   206 :   sp->feedback_data.metal_mass_ejected[0] =
  263 :   208 :   sp->feedback_data.metal_mass_ejected[AGORA_CHEMISTRY_ELEMENT_COUNT - 1] =
  264 :   212 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  265 :   215 :   sp->feedback_data.idle = 1;
  266 :   226 :   return sp->feedback_data.will_do_feedback;
  267 :   236 :   sp->feedback_data.enrichment_weight = 0.f;
  268 :   250 :   sp->feedback_data.energy_ejected = 0;
  269 :   253 :   sp->feedback_data.will_do_feedback = 1;
  270 :   256 :   sp->feedback_data.idle = 0;
  271 :   274 :   sp->feedback_data.energy_ejected = 0;
  272 :   277 :   sp->feedback_data.will_do_feedback = 1;
  273 :   280 :   sp->feedback_data.idle = 0;
  274 :   323 :   const float hi_inv = 1.f / sp->h;
  275 :   325 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
  277 :    39 :   return props->num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  278 :   139 :   return num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  280 :   110 :   const double rho_birth = sp->birth_density;
  281 :   175 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  282 :   177 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  283 :   247 :             sp->id, i, ti_begin, random_number_stellar_feedback_2);
  284 :   277 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  285 :   281 :     sp->f_E = f_E;
  286 :   282 :     sp->feedback_data.to_distribute.SNII_E_kinetic = E_kinetic;
  287 :   283 :     sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj =
  288 :   312 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  289 :   322 :   const double M_init = sp->mass_init;
  290 :   335 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  291 :   336 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  292 :   337 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  293 :   338 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  294 :   343 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  295 :   350 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  296 :   353 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  297 :   366 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  298 :   369 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  299 :   407 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  300 :   411 :                 abundances, feedback_props, &sp->feedback_data);
  301 :   415 :                abundances, feedback_props, &sp->feedback_data);
  302 :   419 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  303 :   424 :   sp->feedback_data.to_distribute.mass =
  304 :   425 :       sp->feedback_data.to_distribute.total_metal_mass +
  305 :   426 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  306 :   427 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  307 :   430 :   sp->feedback_data.to_distribute.energy +=
  308 :   431 :       sp->feedback_data.to_distribute.mass *
  309 :   435 :   sp->feedback_data.to_distribute.energy +=
  310 :   436 :       sp->feedback_data.to_distribute.mass * 0.5f *
  311 :   437 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  313 :   104 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  314 :   127 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  315 :   128 :   sp->feedback_data.to_collect.ngb_N = 0;
  316 :   129 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  317 :   130 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  318 :   131 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  319 :   134 :   ray_init(sp->feedback_data.SNII_rays_true, eagle_SNII_feedback_num_of_rays);
  320 :   135 :   ray_init(sp->feedback_data.SNII_rays_mirr, eagle_SNII_feedback_num_of_rays);
  321 :   136 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_true,
  322 :   138 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_mirr,
  323 :   142 :   sp->has_done_feedback = 0;
  324 :   164 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  325 :   166 :     return time - (double)sp->last_enrichment_time;
  326 :   178 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  327 :   181 :   sp->feedback_data.to_distribute.mass = 0.f;
  328 :   185 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  329 :   187 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  330 :   188 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  331 :   189 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  332 :   190 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  333 :   191 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  334 :   192 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  335 :   193 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  336 :   194 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  337 :   197 :   sp->feedback_data.to_distribute.energy = 0.f;
  338 :   200 :   sp->feedback_data.to_distribute.SNII_E_kinetic = 0.f;
  339 :   203 :   sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj = 0;
  340 :   258 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  341 :   262 :   const float h = sp->h;
  342 :   266 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  343 :   267 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  344 :   268 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  345 :   276 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  346 :   280 :     sp->last_enrichment_time = cosmo->a;
  347 :   282 :     sp->last_enrichment_time = time;
  348 :   285 :   sp->has_done_feedback = 1;
  349 :   313 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  350 :   316 :       sp->count_since_last_enrichment = 0;
  351 :   322 :     if (sp->birth_time == (float)time) {
  352 :   325 :       sp->count_since_last_enrichment = 0;
  353 :   336 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  354 :   338 :     age_of_star = time - (double)sp->birth_time;
  355 :   345 :     sp->count_since_last_enrichment = 0;
  356 :   350 :     sp->count_since_last_enrichment++;
  357 :   352 :     if ((sp->count_since_last_enrichment %
  358 :   356 :       sp->count_since_last_enrichment = 0;
  360 :   124 :   const double rho_birth = sp->birth_density;
  361 :   207 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  362 :   209 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  363 :   255 :             sp->id, i, ti_begin, random_number_stellar_feedback_3);
  364 :   271 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  365 :   287 :     double star_f_E = sp->f_E * sp->number_of_SNII_events;
  366 :   290 :     star_f_E = (star_f_E + f_E) / (sp->number_of_SNII_events + 1.);
  367 :   293 :     sp->f_E = star_f_E;
  368 :   294 :     sp->number_of_SNII_events++;
  369 :   295 :     sp->feedback_data.to_distribute.SNII_delta_u = delta_u;
  370 :   296 :     sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj =
  371 :   325 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  372 :   335 :   const double M_init = sp->mass_init;
  373 :   348 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  374 :   349 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  375 :   350 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  376 :   351 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  377 :   356 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  378 :   363 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  379 :   366 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  380 :   379 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  381 :   382 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  382 :   420 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  383 :   424 :                 abundances, feedback_props, &sp->feedback_data);
  384 :   428 :                abundances, feedback_props, &sp->feedback_data);
  385 :   432 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  386 :   437 :   sp->feedback_data.to_distribute.mass =
  387 :   438 :       sp->feedback_data.to_distribute.total_metal_mass +
  388 :   439 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  389 :   440 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  390 :   443 :   sp->feedback_data.to_distribute.energy +=
  391 :   444 :       sp->feedback_data.to_distribute.mass *
  392 :   448 :   sp->feedback_data.to_distribute.energy +=
  393 :   449 :       sp->feedback_data.to_distribute.mass * 0.5f *
  394 :   450 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  396 :   103 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  397 :   126 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  398 :   127 :   sp->feedback_data.to_collect.ngb_N = 0;
  399 :   128 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  400 :   129 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  401 :   130 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  402 :   133 :   ray_init(sp->feedback_data.SNII_rays, eagle_SNII_feedback_num_of_rays);
  403 :   136 :   sp->has_done_feedback = 0;
  404 :   158 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  405 :   160 :     return time - sp->last_enrichment_time;
  406 :   172 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  407 :   175 :   sp->feedback_data.to_distribute.mass = 0.f;
  408 :   179 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  409 :   181 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  410 :   182 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  411 :   183 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  412 :   184 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  413 :   185 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  414 :   186 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  415 :   187 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  416 :   188 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  417 :   191 :   sp->feedback_data.to_distribute.energy = 0.f;
  418 :   194 :   sp->feedback_data.to_distribute.SNII_delta_u = 0.f;
  419 :   197 :   sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj = 0;
  420 :   252 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  421 :   256 :   const float h = sp->h;
  422 :   260 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  423 :   261 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  424 :   262 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  425 :   270 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  426 :   274 :     sp->last_enrichment_time = cosmo->a;
  427 :   276 :     sp->last_enrichment_time = time;
  428 :   279 :   sp->has_done_feedback = 1;
  429 :   307 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  430 :   310 :       sp->count_since_last_enrichment = 0;
  431 :   316 :     if (sp->birth_time == (float)time) {
  432 :   319 :       sp->count_since_last_enrichment = 0;
  433 :   330 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  434 :   332 :     age_of_star = time - (double)sp->birth_time;
  435 :   339 :     sp->count_since_last_enrichment = 0;
  436 :   344 :     sp->count_since_last_enrichment++;
  437 :   346 :     if ((sp->count_since_last_enrichment %
  438 :   350 :       sp->count_since_last_enrichment = 0;
  440 :   169 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  441 :   170 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  442 :   178 :     dt_star = get_timestep(sp->time_bin, time_base);
  443 :   184 :     if (cosmo->a > (double)sp->birth_scale_factor)
  444 :   186 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  445 :   190 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  446 :   230 :   sp->feedback_data.energy_ejected = 0;
  447 :   231 :   sp->feedback_data.will_do_feedback = 0;
  448 :   234 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  449 :   258 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  450 :   261 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  451 :   272 :   return sp->feedback_data.will_do_feedback;
  452 :   302 :   sp->feedback_data.enrichment_weight = 0.f;
  453 :   316 :   sp->feedback_data.energy_ejected = 0;
  454 :   319 :   sp->feedback_data.will_do_feedback = 1;
  455 :   346 :   sp->feedback_data.energy_ejected = 0;
  456 :   349 :   sp->feedback_data.will_do_feedback = 1;
  457 :   392 :   const float hi_inv = 1.f / sp->h;
  458 :   394 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
  460 :    74 :   const float rand_sn = random_unit_interval(sp->id, ti_begin, random_type);
  461 :   121 :   sp->feedback_data.mass_ejected = mass_frac_snii * sp->sf_data.birth_mass +
  462 :   125 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  463 :   127 :     message("Negative mass, skipping current star: %lli", sp->id);
  464 :   129 :     sp->feedback_data.number_snia = 0;
  465 :   130 :     sp->feedback_data.number_snii = 0;
  466 :   131 :     sp->feedback_data.mass_ejected = 0;
  467 :   136 :   sp->mass -= sp->feedback_data.mass_ejected;
  468 :   156 :     sp->feedback_data.metal_mass_ejected[i] =
  469 :   164 :     sp->feedback_data.metal_mass_ejected[i] *= sp->sf_data.birth_mass;
  470 :   167 :     sp->feedback_data.metal_mass_ejected[i] +=
  471 :   212 :   sp->feedback_data.mass_ejected = mass_snia + mass_snii;
  472 :   215 :   sp->feedback_data.mass_ejected *= phys_const->const_solar_mass;
  473 :   218 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  474 :   220 :     message("Negative mass, skipping current star: %lli", sp->id);
  475 :   222 :     sp->feedback_data.number_snia = 0;
  476 :   223 :     sp->feedback_data.number_snii = 0;
  477 :   224 :     sp->feedback_data.mass_ejected = 0;
  478 :   229 :   sp->mass -= sp->feedback_data.mass_ejected;
  479 :   247 :     sp->feedback_data.metal_mass_ejected[i] =
  480 :   255 :     sp->feedback_data.metal_mass_ejected[i] *= m_avg * number_snii;
  481 :   258 :     sp->feedback_data.metal_mass_ejected[i] += snia_yields[i] * number_snia;
  482 :   261 :     sp->feedback_data.metal_mass_ejected[i] *= phys_const->const_solar_mass;
  483 :   331 :   const float m_init = sp->sf_data.birth_mass / phys_const->const_solar_mass;
  484 :   366 :     sp->feedback_data.number_snia = number_snia;
  485 :   367 :     sp->feedback_data.number_snii = number_snii;
  486 :   376 :     sp->feedback_data.number_snia = number_snia_f;
  487 :   377 :     sp->feedback_data.number_snii = number_snii_f;
  488 :   393 :   sp->feedback_data.energy_ejected = 0;
  489 :   397 :   sp->feedback_data.energy_ejected +=
  490 :   398 :       sp->feedback_data.number_snia * snia_energy;
  491 :   404 :   sp->feedback_data.energy_ejected +=
  492 :   405 :       sp->feedback_data.number_snii * snii_energy;
  494 :    96 :   double logmass6 = log10(sp->mass * fb_props->mass_to_solar_mass * 1.e-6); 
  495 :    99 :   double z = sp->chemistry_data.metal_mass_fraction_total;
  496 :   183 :   for (k=0; k<chemistry_element_count; k++) sp->feedback_data.delta_dust_mass[k]=0.f;
  497 :   187 :     sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->delta_AGBCOG1[chemistry_element_C] * 
  498 :   190 :     if (sp->feedback_data.delta_dust_mass[chemistry_element_C] > fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C])
  499 :   191 :             sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C];
  500 :   193 :     delta_metal_mass[chemistry_element_C] -= sp->feedback_data.delta_dust_mass[chemistry_element_C];
  501 :   202 :         sp->feedback_data.delta_dust_mass[k] = 16.0 * (delta_table[chemistry_element_Mg] * delta_metal_mass[chemistry_element_Mg] / 24.305 
  502 :   209 :         sp->feedback_data.delta_dust_mass[k] = delta_table[k] * delta_metal_mass[k];
  503 :   211 :       if (sp->feedback_data.delta_dust_mass[k] > fb_props->max_dust_fraction * delta_metal_mass[k])
  504 :   212 :             sp->feedback_data.delta_dust_mass[k] = fb_props->max_dust_fraction * delta_metal_mass[k];
  505 :   213 :       delta_metal_mass[k] -= sp->feedback_data.delta_dust_mass[k];
  506 :   261 :   if (sp->mass_init == sp->mass) fb_first = 1;
  507 :   263 :   z = sp->chemistry_data.metal_mass_fraction_total;
  508 :   272 :     feh = sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H];
  509 :   777 :   *ejecta_unprocessed = max(0.f, sp->mass_init * SNII_U);
  510 :   778 :   *ejecta_mass = max(0.f, sp->mass_init * SNII_E);
  511 :   793 :       SWn = sp->mass_init * SW_R;
  512 :   804 :       SWn = sp->mass_init * SW_R;
  513 :   805 :       SNn = sp->mass_init * SNII_R;
  514 :   808 :         *ejecta_energy += sp->mass_init * SNII_ENE;
  515 :   815 :       ejecta_metal_mass[k] = sp->mass_init * SNII_Z[k];
  516 :   824 :         SNn = sp->mass_init * SNIa_R;
  517 :   840 : /*    if (sp->id == 3554000 ) message("Star %lld with m=%g (frac=%g), age=%g Myr, Z=%g is ejecting %g Msun (fIa=%g, Zej=%g) and %g erg in %g Myr.",
  518 :   841 :           sp->id,
  519 :   842 :           sp->mass * fb_props->mass_to_solar_mass,
  520 :   843 :           sp->mass/sp->mass_init,
  522 :   215 :   sp->feedback_data.enrichment_weight_inv = 0.f;
  523 :   216 :   sp->feedback_data.ngb_N = 0;
  524 :   217 :   sp->feedback_data.ngb_mass = 0.f;
  525 :   218 :   sp->feedback_data.ngb_rho = 0.f;
  526 :   219 :   sp->feedback_data.ngb_Z = 0.f;
  527 :   221 :   sp->has_done_feedback = 0;
  528 :   264 :   sp->feedback_data.enrichment_weight = 0.f;
  529 :   267 :   sp->feedback_data.mass = 0.f;
  530 :   271 :     sp->feedback_data.metal_mass[i] = 0.f;
  531 :   273 :     sp->feedback_data.delta_dust_mass[i] = 0.f;
  532 :   276 :   sp->feedback_data.total_metal_mass = 0.f;
  533 :   279 :   sp->feedback_data.energy = 0.f;
  534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  536 :   355 :       sp->gpart->fof_data.group_mass;
  537 :   364 :   const double rand_for_scatter = random_unit_interval(sp->id, ti_current,
  538 :   405 :   if (sp->feedback_data.ngb_rho <= 0.) {
  539 :   406 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  540 :   411 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  541 :   415 :   const float h = sp->h;
  542 :   419 :   sp->feedback_data.ngb_rho *= h_inv_dim;
  543 :   421 :   const float rho_inv = 1.f / sp->feedback_data.ngb_rho;
  544 :   422 :   sp->feedback_data.ngb_Z *= h_inv_dim * rho_inv;
  545 :   427 :   if (sp->feedback_data.ngb_rho <= 0) {
  546 :   429 :             sp->id, sp->mass);
  547 :   436 :   if (sp->feedback_data.ngb_rho <= 0)
  548 :   438 :             sp->id, sp->mass);
  549 :   439 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  550 :   444 :   const float ngb_gas_mass = sp->feedback_data.ngb_mass;
  551 :   447 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  552 :   454 :       sp->feedback_data.enrichment_weight_inv;
  553 :   457 :   if (sp->feedback_data.enrichment_weight_inv < 0.)
  554 :   464 :   sp->feedback_data.enrichment_weight = enrichment_weight;
  555 :   467 :   if (sp->feedback_data.enrichment_weight < 0.)
  556 :   474 :      sp->feedback_data.feedback_mass_to_launch = eta * sp->mass;
  557 :   475 :      sp->feedback_data.feedback_wind_velocity = feedback_compute_kick_velocity(sp, cosmo, feedback_props, ti_begin);
  558 :   480 :   //sp->feedback_data.lum_habing = feedback_get_lum_from_star_particle(sp, star_age_beg_step, feedback_props);
  559 :   481 :   //message("G0: age %g  Lhabing %g\n",star_age_beg_step*feedback_props->time_to_Myr, sp->feedback_data.lum_habing);
  560 :   485 :   sp->feedback_data.mass = 0.f;
  561 :   489 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  562 :   515 :     message("[Fe/H] = %g", sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H]);
  563 :   516 :     message("Z = %g", sp->chemistry_data.metal_mass_fraction_total);
  564 :   519 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  565 :   524 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  566 :   529 :   if (sp->mass-ejecta_mass < 0.2 * sp->mass_init) {
  567 :   531 :           sp->id, sp->mass, ejecta_mass);
  568 :   546 :     dum = ejecta_unprocessed * sp->chemistry_data.metal_mass_fraction[elem];
  569 :   572 :   sp->feedback_data.total_metal_mass = 0.f;
  570 :   574 :     sp->feedback_data.metal_mass[elem] = ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  571 :   578 :       sp->feedback_data.total_metal_mass += ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  572 :   583 :     if (sp->mass/sp->mass_init<0.2) message("Star particle %lld with mass %g (init %g) is giving away %g Msun and %g erg (%g Msun metals).",
  573 :   584 :           sp->id, 
  574 :   585 :           sp->mass, 
  575 :   586 :           sp->mass_init, 
  576 :   589 :           sp->feedback_data.total_metal_mass * feedback_props->mass_to_solar_mass);
  577 :   594 :   if (sp->feedback_data.total_metal_mass > 0.f) {
  578 :   596 :                                          sp->feedback_data.metal_mass);
  579 :   601 :   sp->feedback_data.mass = ejecta_mass;
  580 :   605 :   //sp->feedback_data.energy = ejecta_energy;
  581 :   608 :   sp->feedback_data.feedback_energy_reservoir += ejecta_energy;
  582 :   611 :   sp->mass -= ejecta_mass;
  583 :   614 :   sp->last_enrichment_time = cosmo->a;
  584 :   618 :   sp->feedback_data.SNe_ThisTimeStep = N_SNe;
  585 :   622 :   sp->has_done_feedback = 1;
  587 :   344 :   if (sp->feedback_data.to_collect.ngb_rho <= 0) {
  588 :   346 :             sp->id, sp->mass);
  589 :   353 :   if (sp->feedback_data.to_collect.ngb_rho <= 0)
  590 :   355 :             sp->id, sp->mass);
  591 :   356 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  592 :   366 :   const double M_init = sp->mass_init;
  593 :   379 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  594 :   382 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  595 :   389 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  596 :   392 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  597 :   405 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  598 :   408 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  599 :   439 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  600 :   443 :                 abundances, feedback_props, &sp->feedback_data);
  601 :   447 :                abundances, feedback_props, &sp->feedback_data);
  602 :   451 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  603 :   456 :   sp->feedback_data.to_distribute.mass =
  604 :   457 :       sp->feedback_data.to_distribute.total_metal_mass +
  605 :   458 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  606 :   459 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  607 :   462 :   sp->feedback_data.to_distribute.energy +=
  608 :   463 :       sp->feedback_data.to_distribute.mass *
  609 :   467 :   sp->feedback_data.to_distribute.energy +=
  610 :   468 :       sp->feedback_data.to_distribute.mass * 0.5f *
  611 :   469 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  613 :   176 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  614 :   199 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  615 :   200 :   sp->feedback_data.to_collect.ngb_N = 0;
  616 :   201 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  617 :   202 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  618 :   203 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  619 :   205 :   sp->has_done_feedback = 0;
  620 :   241 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  621 :   243 :     return time - (double)sp->last_enrichment_time;
  622 :   255 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  623 :   258 :   sp->feedback_data.to_distribute.mass = 0.f;
  624 :   262 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  625 :   264 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  626 :   265 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  627 :   266 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  628 :   267 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  629 :   268 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  630 :   269 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  631 :   270 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  632 :   271 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  633 :   274 :   sp->feedback_data.to_distribute.energy = 0.f;
  634 :   330 :   if (sp->feedback_data.to_collect.ngb_rho <= 0.) {
  635 :   331 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  636 :   336 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  637 :   340 :   const float h = sp->h;
  638 :   344 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  639 :   346 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  640 :   347 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  641 :   355 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  642 :   359 :     sp->last_enrichment_time = cosmo->a;
  643 :   361 :     sp->last_enrichment_time = time;
  644 :   364 :   sp->has_done_feedback = 1;
  645 :   392 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  646 :   395 :       sp->count_since_last_enrichment = 0;
  647 :   401 :     if (sp->birth_time == (float)time) {
  648 :   404 :       sp->count_since_last_enrichment = 0;
  649 :   415 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  650 :   417 :     age_of_star = time - (double)sp->birth_time;
  651 :   424 :     sp->count_since_last_enrichment = 0;
  652 :   429 :     sp->count_since_last_enrichment++;
  653 :   431 :     if ((sp->count_since_last_enrichment %
  654 :   435 :       sp->count_since_last_enrichment = 0;
  656 :    41 :   const float v_circ = pow(sp->feedback_data.host_galaxy_mass /
  657 :    44 :   const float sigma = sqrtf(sp->potential * cosmo->a_inv);
  658 :    48 :   sp->feedback_data.to_distribute.v_kick =
  659 :    59 :   sp->feedback_data.to_distribute.v_kick =
  660 :   121 :   return (sp->birth_time != -1.);
  661 :   132 :   sp->feedback_data.host_galaxy_mass = 1.;
  662 :   153 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  663 :   155 :     return time - (double)sp->last_enrichment_time;
  664 :   177 :   sp->feedback_data.to_distribute.simba_delay_time =
  665 :   218 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  666 :   232 :     sp->last_enrichment_time = cosmo->a;
  667 :   234 :     sp->last_enrichment_time = time;
  668 :   237 :   sp->has_done_feedback = 1;
  670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  671 :  3671 :   if (sp->gpart != gp) error("Copying group properties to the wrong star!");
  672 :  3674 :   sp->group_data.mass = gp->fof_data.group_mass;
  673 :  3675 :   sp->group_data.stellar_mass = gp->fof_data.group_stellar_mass;
  674 :  3677 :     sp->group_data.ssfr = gp->fof_data.group_sfr / gp->fof_data.group_stellar_mass;
  675 :  3679 :     sp->group_data.ssfr = 0.f;
  677 :     2 :   438 :   const timebin_t spart_bin = sp->time_bin;
  678 :     3 :   442 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  679 :     4 :   446 :         "s-particle in an impossible time-zone! sp->ti_end=%lld "
  680 :     5 :   541 :   return sp->time_bin == time_bin_inhibited;
  681 :     6 :   747 :   const timebin_t spart_bin = sp->time_bin;
  682 :     7 :   752 :       get_integer_time_begin(ti_current + 1, sp->time_bin);
  683 :     8 :   756 :         "s-particle in an impossible time-zone! sp->ti_beg=%lld "
  684 :    10 :  1353 :     if ((sp->x[0] < c->loc[0] / space_stretch) ||
  685 :    11 :  1354 :         (sp->x[1] < c->loc[1] / space_stretch) ||
  686 :    12 :  1355 :         (sp->x[2] < c->loc[2] / space_stretch) ||
  687 :    13 :  1356 :         (sp->x[0] >= (c->loc[0] + c->width[0]) * space_stretch) ||
  688 :    14 :  1357 :         (sp->x[1] >= (c->loc[1] + c->width[1]) * space_stretch) ||
  689 :    15 :  1358 :         (sp->x[2] >= (c->loc[2] + c->width[2]) * space_stretch))
  690 :    16 :  1361 :     if (sp->time_bin != time_bin_not_created &&
  691 :    17 :  1362 :         sp->time_bin != time_bin_inhibited) {
  692 :    18 :  1363 :       const struct gpart *gp = sp->gpart;
  693 :    19 :  1364 :       if (gp == NULL && sp->time_bin != time_bin_not_created)
  694 :    21 :   255 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
  695 :    22 :   256 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
  696 :    23 :   257 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
  697 :    24 :   260 :   sp->time_bin = e->min_active_bin;
  698 :    25 :   264 :   sp->ti_drift = e->ti_current;
  699 :    26 :   388 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
  700 :    27 :   389 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
  701 :    28 :   390 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
  702 :    29 :   393 :   sp->time_bin = e->min_active_bin;
  703 :    30 :   397 :   sp->ti_drift = e->ti_current;
  704 :    31 :   642 :   if (sp->time_bin == time_bin_inhibited) return;
  705 :    32 :   645 :   sp->time_bin = time_bin_inhibited;
  706 :    33 :   646 :   if (sp->gpart) {
  707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  710 :    37 :   655 :   if (sp->gpart) {
  711 :    38 :   660 :   sp->gpart = NULL;
  712 :    39 :   813 :   if (sp->gpart == NULL)
  713 :    40 :   817 :   struct gpart *gp = sp->gpart;
  714 :    41 :   820 :   sp->time_bin = time_bin_inhibited;
  715 :    42 :   823 :   sp->gpart = NULL;
  716 :    43 :   827 :   gp->id_or_neg_offset = sp->id;
  717 :    44 :   830 :   gp->ti_kick = sp->ti_kick;
  718 :    45 :   873 :   sp->x_diff[0] = xp->x_diff[0];
  719 :    46 :   874 :   sp->x_diff[1] = xp->x_diff[1];
  720 :    47 :   875 :   sp->x_diff[2] = xp->x_diff[2];
  721 :    48 :   881 :   sp->id = gp->id_or_neg_offset;
  722 :    49 :   885 :   sp->gpart = gp;
  723 :    50 :   889 :   gp->time_bin = sp->time_bin;
  724 :    51 :   892 :   sp->mass = gp->mass;
  725 :    52 :   893 :   sp->x[0] = gp->x[0];
  726 :    53 :   894 :   sp->x[1] = gp->x[1];
  727 :    54 :   895 :   sp->x[2] = gp->x[2];
  728 :    55 :   896 :   sp->v[0] = gp->v_full[0];
  729 :    56 :   897 :   sp->v[1] = gp->v_full[1];
  730 :    57 :   898 :   sp->v[2] = gp->v_full[2];
  731 :    58 :   901 :   sp->ti_kick = gp->ti_kick;
  732 :    59 :   902 :   gp->ti_drift = sp->ti_drift;
  733 :    60 :   906 :   sp->h = p->h;
  734 :    61 :   941 :   sp->x_diff[0] = xp->x_diff[0];
  735 :    62 :   942 :   sp->x_diff[1] = xp->x_diff[1];
  736 :    63 :   943 :   sp->x_diff[2] = xp->x_diff[2];
  737 :    64 :   959 :   sp->id = space_get_new_unique_id(e->s);
  738 :    65 :   963 :   sp->gpart = gp;
  739 :    66 :   967 :   gp->time_bin = sp->time_bin;
  740 :    67 :   970 :   sp->mass = hydro_get_mass(p);
  741 :    68 :   971 :   sp->x[0] = p->x[0];
  742 :    69 :   972 :   sp->x[1] = p->x[1];
  743 :    70 :   973 :   sp->x[2] = p->x[2];
  744 :    71 :   974 :   sp->v[0] = p->v_full[0];
  745 :    72 :   975 :   sp->v[1] = p->v_full[1];
  746 :    73 :   976 :   sp->v[2] = p->v_full[2];
  747 :    74 :   979 :   sp->ti_kick = p->ti_kick;
  748 :    75 :   980 :   sp->ti_drift = p->ti_drift;
  749 :    76 :   984 :   sp->h = p->h;
  750 :    77 :  1024 :   sp->x_diff[0] = xp->x_diff[0];
  751 :    78 :  1025 :   sp->x_diff[1] = xp->x_diff[1];
  752 :    79 :  1026 :   sp->x_diff[2] = xp->x_diff[2];
  753 :    80 :  1032 :   sp->id = p->id;
  754 :    81 :  1036 :   sp->gpart = gp;
  755 :    82 :  1040 :   gp->time_bin = sp->time_bin;
  756 :    83 :  1043 :   sp->mass = gp->mass;
  757 :    84 :  1044 :   sp->x[0] = gp->x[0];
  758 :    85 :  1045 :   sp->x[1] = gp->x[1];
  759 :    86 :  1046 :   sp->x[2] = gp->x[2];
  760 :    87 :  1047 :   sp->v[0] = gp->v_full[0];
  761 :    88 :  1048 :   sp->v[1] = gp->v_full[1];
  762 :    89 :  1049 :   sp->v[2] = gp->v_full[2];
  763 :    90 :  1052 :   sp->ti_kick = gp->ti_kick;
  764 :    91 :  1053 :   gp->ti_drift = sp->ti_drift;
  765 :    92 :  1057 :   sp->r_cut = e->sink_properties->cut_off_radius;
  766 :    93 :  1090 :   sp->x_diff[0] = s->x_diff[0];
  767 :    94 :  1091 :   sp->x_diff[1] = s->x_diff[1];
  768 :    95 :  1092 :   sp->x_diff[2] = s->x_diff[2];
  769 :    96 :  1108 :   sp->id = space_get_new_unique_id(e->s);
  770 :    97 :  1112 :   sp->gpart = gp;
  771 :    98 :  1116 :   gp->time_bin = sp->time_bin;
  772 :    99 :  1119 :   sp->mass = s->mass;
  773 :   100 :  1120 :   sp->x[0] = s->x[0];
  774 :   101 :  1121 :   sp->x[1] = s->x[1];
  775 :   102 :  1122 :   sp->x[2] = s->x[2];
  776 :   103 :  1123 :   sp->v[0] = s->v[0];
  777 :   104 :  1124 :   sp->v[1] = s->v[1];
  778 :   105 :  1125 :   sp->v[2] = s->v[2];
  779 :   106 :  1128 :   sp->ti_kick = s->ti_kick;
  780 :   107 :  1129 :   sp->ti_drift = s->ti_drift;
  781 :   108 :  1133 :   sp->h = s->r_cut;
  782 :   110 :   666 :       if (fabs(sp->v[0] * dt_drift) > e->s->dim[0] ||
  783 :   111 :   667 :           fabs(sp->v[1] * dt_drift) > e->s->dim[1] ||
  784 :   112 :   668 :           fabs(sp->v[2] * dt_drift) > e->s->dim[2]) {
  785 :   113 :   677 :         if ((sp->x[0] > dim[0]) || (sp->x[0] < 0.) ||  // x
  786 :   114 :   678 :             (sp->x[1] > dim[1]) || (sp->x[1] < 0.) ||  // y
  787 :   115 :   679 :             (sp->x[2] > dim[2]) || (sp->x[2] < 0.)) {  // z
  788 :   116 :   707 :       sp->h = min(sp->h, stars_h_max);
  789 :   117 :   708 :       sp->h = max(sp->h, stars_h_min);
  790 :   118 :   711 :       const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  791 :   119 :   712 :                         sp->x_diff[1] * sp->x_diff[1] +
  792 :   120 :   713 :                         sp->x_diff[2] * sp->x_diff[2];
  793 :   121 :   716 :       const float dx2_sort = sp->x_diff_sort[0] * sp->x_diff_sort[0] +
  794 :   122 :   717 :                              sp->x_diff_sort[1] * sp->x_diff_sort[1] +
  795 :   123 :   718 :                              sp->x_diff_sort[2] * sp->x_diff_sort[2];
  796 :   124 :   723 :       cell_h_max = max(cell_h_max, sp->h);
  797 :   125 :   732 :         cell_h_max_active = max(cell_h_max_active, sp->h);
  798 :   126 :  1094 :       /* sp->h does not need to be limited. */
  799 :   128 :   864 :       for (int k = 0; k < csp->count; k++) {
  800 :   129 :   865 :         const int pid = csp->pairs[k].pid;
  801 :   130 :   866 :         const int pjd = csp->pairs[k].pjd;
  802 :   131 :   994 :       for (int k = 0; k < csp->count; k++) {
  803 :   132 :   995 :         const int pid = csp->pairs[k].pid;
  804 :   133 :   996 :         const int pjd = csp->pairs[k].pjd;
  805 :   134 :  1120 :       for (int k = 0; k < csp->count; k++) {
  806 :   135 :  1121 :         const int pid = csp->pairs[k].pid;
  807 :   136 :  1122 :         const int pjd = csp->pairs[k].pjd;
  808 :   137 :  1225 :       for (int k = 0; k < csp->count; k++) {
  809 :   138 :  1226 :         const int pid = csp->pairs[k].pid;
  810 :   139 :  1227 :         const int pjd = csp->pairs[k].pjd;
  811 :   140 :  1298 :   const struct engine *e = sp->e;
  812 :   141 :  1523 :   const struct engine *e = sp->e;
  813 :   142 :  1605 :       for (int k = 0; k < csp->count; k++) {
  814 :   143 :  1606 :         const int pid = csp->pairs[k].pid;
  815 :   144 :  1607 :         const int pjd = csp->pairs[k].pjd;
  816 :   146 :    69 :     sp->chemistry_data.metal_mass_fraction[i] =
  817 :   147 :    73 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  818 :   148 :   297 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  819 :   149 :   449 :   return sp->chemistry_data
  820 :   150 :   465 :   return sp->chemistry_data.metal_mass_fraction;
  821 :   151 :   554 :   return sp->chemistry_data
  822 :   152 :   556 :          sp->mass;
  823 :   154 :   193 :     sp->chemistry_data.metal_mass_fraction_total =
  824 :   155 :   197 :       sp->chemistry_data.metal_mass_fraction[elem] =
  825 :   156 :   203 :     sp->chemistry_data.smoothed_metal_mass_fraction_total =
  826 :   157 :   207 :       sp->chemistry_data.smoothed_metal_mass_fraction[elem] =
  827 :   158 :   517 :   return sp->chemistry_data.smoothed_metal_mass_fraction_total;
  828 :   159 :   532 :   return sp->chemistry_data.smoothed_metal_mass_fraction;
  829 :   160 :   615 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  830 :   161 :   640 :   return sp->chemistry_data.metal_mass_fraction_total;
  831 :   163 :    55 :     sp->chemistry_data.metal_mass_fraction[i] =
  832 :   164 :    59 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  833 :   165 :   429 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  834 :   166 :   549 :   return sp->chemistry_data
  835 :   167 :   564 :   return sp->chemistry_data.metal_mass_fraction[0];
  836 :   168 :   577 :   return sp->chemistry_data.metal_mass_fraction;
  837 :   169 :   654 :   return sp->chemistry_data
  838 :   170 :   656 :          sp->mass;
  839 :   172 :    56 :     sp->chemistry_data.metal_mass_fraction[i] =
  840 :   173 :    60 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  841 :   174 :   416 :     sp->chemistry_data.metal_mass_fraction[i] =
  842 :   175 :   417 :         data->initial_metallicities[i] * sp->mass;
  843 :   176 :   487 :   return sp->chemistry_data
  844 :   177 :   501 :   return sp->chemistry_data.metal_mass_fraction;
  845 :   178 :   590 :   return sp->chemistry_data
  846 :   179 :   592 :          sp->mass;
  847 :   181 :   254 :     sp->chemistry_data.metal_mass_fraction_total =
  848 :   182 :   258 :       sp->chemistry_data.metal_mass_fraction[elem] =
  849 :   183 :   601 :   return sp->chemistry_data.metal_mass_fraction_total;
  850 :   184 :   616 :   return sp->chemistry_data.metal_mass_fraction;
  851 :   185 :   699 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  852 :   186 :   724 :   return sp->chemistry_data.metal_mass_fraction_total;
  853 :   188 :   158 :     sp->chemistry_data.metal_mass_fraction_total =
  854 :   189 :   162 :       sp->chemistry_data.metal_mass_fraction[elem] =
  855 :   190 :   467 :   return sp->chemistry_data.metal_mass_fraction_total;
  856 :   191 :   482 :   return sp->chemistry_data.metal_mass_fraction;
  857 :   192 :   565 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  858 :   193 :   590 :   return sp->chemistry_data.metal_mass_fraction_total;
  859 :   195 :   100 :     if (!spart_is_inhibited(sp, e) && sp->time_bin != time_bin_not_created) {
  860 :   197 :   395 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  861 :   198 :   396 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  862 :   199 :   397 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  863 :   200 :   402 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  864 :   201 :   408 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  865 :   202 :   409 :                       sp->x_diff[1] * sp->x_diff[1] +
  866 :   203 :   410 :                       sp->x_diff[2] * sp->x_diff[2];
  867 :   204 :   412 :     stars_h_max = max(stars_h_max, sp->h);
  868 :   205 :   422 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  869 :   206 :   423 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  870 :   207 :   424 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  871 :   208 :   429 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  872 :   209 :   435 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  873 :   210 :   436 :                       sp->x_diff[1] * sp->x_diff[1] +
  874 :   211 :   437 :                       sp->x_diff[2] * sp->x_diff[2];
  875 :   212 :   439 :     sinks_h_max = max(sinks_h_max, sp->r_cut);
  876 :   214 :   248 :   if (sp->ti_drift != ti_old)
  877 :   215 :   251 :         "sp->ti_drift=%lld, "
  878 :   216 :   253 :         sp->ti_drift, ti_old, ti_current);
  879 :   217 :   255 :   sp->ti_drift = ti_current;
  880 :   218 :   261 :   const long long id = sp->id;
  881 :   219 :   267 :     sp->v[0] = 0.f;
  882 :   220 :   268 :     sp->v[1] = 0.f;
  883 :   221 :   269 :     sp->v[2] = 0.f;
  884 :   222 :   275 :   const double x[3] = {sp->x[0], sp->x[1], sp->x[2]};
  885 :   223 :   276 :   const float v_full[3] = {sp->v[0], sp->v[1], sp->v[2]};
  886 :   224 :   280 :   sp->x[0] += sp->v[0] * dt_drift;
  887 :   225 :   281 :   sp->x[1] += sp->v[1] * dt_drift;
  888 :   226 :   282 :   sp->x[2] += sp->v[2] * dt_drift;
  889 :   227 :   289 :     const float dx = sp->v[k] * dt_drift;
  890 :   228 :   290 :     sp->x_diff[k] -= dx;
  891 :   229 :   291 :     sp->x_diff_sort[k] -= dx;
  892 :   230 :   296 :   if (sp->gpart)
  893 :   231 :   297 :     lightcone_check_particle_crosses(e, replication_list, x, v_full, sp->gpart,
  894 :   233 :   105 :           get_integer_time_begin(e->ti_current, sp->time_bin);
  895 :   234 :   112 :       if (e->ti_current - ti_begin == get_integer_timestep(sp->time_bin))
  896 :   235 :  1355 :             get_integer_time_begin(e->ti_current, sp->time_bin);
  897 :   237 :   755 :     if (sp->time_bin == time_bin_inhibited)
  898 :   238 :   758 :     if (sp->time_bin == time_bin_not_created)
  899 :   239 :   763 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
  900 :   240 :   764 :                    sp->x[2] * s->iwidth[2]);
  901 :   241 :   773 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
  902 :   242 :   774 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
  903 :   243 :   775 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
  904 :   245 :   519 :           sp->gpart = gp;
  905 :   247 :   109 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  906 :   248 :   110 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  907 :   249 :   118 :     dt_star = get_timestep(sp->time_bin, time_base);
  908 :   250 :   124 :     if (cosmo->a > (double)sp->birth_scale_factor)
  909 :   251 :   126 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  910 :   252 :   130 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  911 :   253 :   163 :   if (sp->feedback_data.idle == 1) {
  912 :   254 :   164 :     sp->feedback_data.will_do_feedback = 0;
  913 :   255 :   176 :   sp->feedback_data.energy_ejected = 0;
  914 :   256 :   177 :   sp->feedback_data.will_do_feedback = 0;
  915 :   257 :   180 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  916 :   258 :   195 :   double NSN = sp->mass / phys_const->const_solar_mass *
  917 :   259 :   199 :   sp->feedback_data.energy_ejected = NSN * feedback_props->energy_per_CCSN;
  918 :   260 :   200 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  919 :   261 :   203 :   sp->feedback_data.mass_ejected = NSN * feedback_props->ejected_mass_per_CCSN;
  920 :   262 :   206 :   sp->feedback_data.metal_mass_ejected[0] =
  921 :   263 :   208 :   sp->feedback_data.metal_mass_ejected[AGORA_CHEMISTRY_ELEMENT_COUNT - 1] =
  922 :   264 :   212 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  923 :   265 :   215 :   sp->feedback_data.idle = 1;
  924 :   266 :   226 :   return sp->feedback_data.will_do_feedback;
  925 :   267 :   236 :   sp->feedback_data.enrichment_weight = 0.f;
  926 :   268 :   250 :   sp->feedback_data.energy_ejected = 0;
  927 :   269 :   253 :   sp->feedback_data.will_do_feedback = 1;
  928 :   270 :   256 :   sp->feedback_data.idle = 0;
  929 :   271 :   274 :   sp->feedback_data.energy_ejected = 0;
  930 :   272 :   277 :   sp->feedback_data.will_do_feedback = 1;
  931 :   273 :   280 :   sp->feedback_data.idle = 0;
  932 :   274 :   323 :   const float hi_inv = 1.f / sp->h;
  933 :   275 :   325 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
  934 :   277 :    39 :   return props->num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  935 :   278 :   139 :   return num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  936 :   280 :   110 :   const double rho_birth = sp->birth_density;
  937 :   281 :   175 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  938 :   282 :   177 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  939 :   283 :   247 :             sp->id, i, ti_begin, random_number_stellar_feedback_2);
  940 :   284 :   277 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  941 :   285 :   281 :     sp->f_E = f_E;
  942 :   286 :   282 :     sp->feedback_data.to_distribute.SNII_E_kinetic = E_kinetic;
  943 :   287 :   283 :     sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj =
  944 :   288 :   312 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  945 :   289 :   322 :   const double M_init = sp->mass_init;
  946 :   290 :   335 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  947 :   291 :   336 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  948 :   292 :   337 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  949 :   293 :   338 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  950 :   294 :   343 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  951 :   295 :   350 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  952 :   296 :   353 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  953 :   297 :   366 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  954 :   298 :   369 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  955 :   299 :   407 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  956 :   300 :   411 :                 abundances, feedback_props, &sp->feedback_data);
  957 :   301 :   415 :                abundances, feedback_props, &sp->feedback_data);
  958 :   302 :   419 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  959 :   303 :   424 :   sp->feedback_data.to_distribute.mass =
  960 :   304 :   425 :       sp->feedback_data.to_distribute.total_metal_mass +
  961 :   305 :   426 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  962 :   306 :   427 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  963 :   307 :   430 :   sp->feedback_data.to_distribute.energy +=
  964 :   308 :   431 :       sp->feedback_data.to_distribute.mass *
  965 :   309 :   435 :   sp->feedback_data.to_distribute.energy +=
  966 :   310 :   436 :       sp->feedback_data.to_distribute.mass * 0.5f *
  967 :   311 :   437 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  968 :   313 :   104 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  969 :   314 :   127 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  970 :   315 :   128 :   sp->feedback_data.to_collect.ngb_N = 0;
  971 :   316 :   129 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  972 :   317 :   130 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  973 :   318 :   131 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  974 :   319 :   134 :   ray_init(sp->feedback_data.SNII_rays_true, eagle_SNII_feedback_num_of_rays);
  975 :   320 :   135 :   ray_init(sp->feedback_data.SNII_rays_mirr, eagle_SNII_feedback_num_of_rays);
  976 :   321 :   136 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_true,
  977 :   322 :   138 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_mirr,
  978 :   323 :   142 :   sp->has_done_feedback = 0;
  979 :   324 :   164 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  980 :   325 :   166 :     return time - (double)sp->last_enrichment_time;
  981 :   326 :   178 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  982 :   327 :   181 :   sp->feedback_data.to_distribute.mass = 0.f;
  983 :   328 :   185 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  984 :   329 :   187 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  985 :   330 :   188 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  986 :   331 :   189 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  987 :   332 :   190 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  988 :   333 :   191 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  989 :   334 :   192 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  990 :   335 :   193 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  991 :   336 :   194 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  992 :   337 :   197 :   sp->feedback_data.to_distribute.energy = 0.f;
  993 :   338 :   200 :   sp->feedback_data.to_distribute.SNII_E_kinetic = 0.f;
  994 :   339 :   203 :   sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj = 0;
  995 :   340 :   258 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  996 :   341 :   262 :   const float h = sp->h;
  997 :   342 :   266 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  998 :   343 :   267 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  999 :   344 :   268 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
 1000 :   345 :   276 :   sp->mass -= sp->feedback_data.to_distribute.mass;
 1001 :   346 :   280 :     sp->last_enrichment_time = cosmo->a;
 1002 :   347 :   282 :     sp->last_enrichment_time = time;
 1003 :   348 :   285 :   sp->has_done_feedback = 1;
 1004 :   349 :   313 :     if (sp->birth_scale_factor == (float)cosmo->a) {
 1005 :   350 :   316 :       sp->count_since_last_enrichment = 0;
 1006 :   351 :   322 :     if (sp->birth_time == (float)time) {
 1007 :   352 :   325 :       sp->count_since_last_enrichment = 0;
 1008 :   353 :   336 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1009 :   354 :   338 :     age_of_star = time - (double)sp->birth_time;
 1010 :   355 :   345 :     sp->count_since_last_enrichment = 0;
 1011 :   356 :   350 :     sp->count_since_last_enrichment++;
 1012 :   357 :   352 :     if ((sp->count_since_last_enrichment %
 1013 :   358 :   356 :       sp->count_since_last_enrichment = 0;
 1014 :   360 :   124 :   const double rho_birth = sp->birth_density;
 1015 :   361 :   207 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
 1016 :   362 :   209 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
 1017 :   363 :   255 :             sp->id, i, ti_begin, random_number_stellar_feedback_3);
 1018 :   364 :   271 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
 1019 :   365 :   287 :     double star_f_E = sp->f_E * sp->number_of_SNII_events;
 1020 :   366 :   290 :     star_f_E = (star_f_E + f_E) / (sp->number_of_SNII_events + 1.);
 1021 :   367 :   293 :     sp->f_E = star_f_E;
 1022 :   368 :   294 :     sp->number_of_SNII_events++;
 1023 :   369 :   295 :     sp->feedback_data.to_distribute.SNII_delta_u = delta_u;
 1024 :   370 :   296 :     sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj =
 1025 :   371 :   325 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 1026 :   372 :   335 :   const double M_init = sp->mass_init;
 1027 :   373 :   348 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
 1028 :   374 :   349 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
 1029 :   375 :   350 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
 1030 :   376 :   351 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
 1031 :   377 :   356 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 1032 :   378 :   363 :       sp->feedback_data.to_collect.enrichment_weight_inv;
 1033 :   379 :   366 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
 1034 :   380 :   379 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
 1035 :   381 :   382 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
 1036 :   382 :   420 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
 1037 :   383 :   424 :                 abundances, feedback_props, &sp->feedback_data);
 1038 :   384 :   428 :                abundances, feedback_props, &sp->feedback_data);
 1039 :   385 :   432 :   if (sp->feedback_data.to_distribute.mass != 0.f)
 1040 :   386 :   437 :   sp->feedback_data.to_distribute.mass =
 1041 :   387 :   438 :       sp->feedback_data.to_distribute.total_metal_mass +
 1042 :   388 :   439 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
 1043 :   389 :   440 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
 1044 :   390 :   443 :   sp->feedback_data.to_distribute.energy +=
 1045 :   391 :   444 :       sp->feedback_data.to_distribute.mass *
 1046 :   392 :   448 :   sp->feedback_data.to_distribute.energy +=
 1047 :   393 :   449 :       sp->feedback_data.to_distribute.mass * 0.5f *
 1048 :   394 :   450 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
 1049 :   396 :   103 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
 1050 :   397 :   126 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
 1051 :   398 :   127 :   sp->feedback_data.to_collect.ngb_N = 0;
 1052 :   399 :   128 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
 1053 :   400 :   129 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
 1054 :   401 :   130 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
 1055 :   402 :   133 :   ray_init(sp->feedback_data.SNII_rays, eagle_SNII_feedback_num_of_rays);
 1056 :   403 :   136 :   sp->has_done_feedback = 0;
 1057 :   404 :   158 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 1058 :   405 :   160 :     return time - sp->last_enrichment_time;
 1059 :   406 :   172 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
 1060 :   407 :   175 :   sp->feedback_data.to_distribute.mass = 0.f;
 1061 :   408 :   179 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
 1062 :   409 :   181 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
 1063 :   410 :   182 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
 1064 :   411 :   183 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
 1065 :   412 :   184 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
 1066 :   413 :   185 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
 1067 :   414 :   186 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
 1068 :   415 :   187 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
 1069 :   416 :   188 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
 1070 :   417 :   191 :   sp->feedback_data.to_distribute.energy = 0.f;
 1071 :   418 :   194 :   sp->feedback_data.to_distribute.SNII_delta_u = 0.f;
 1072 :   419 :   197 :   sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj = 0;
 1073 :   420 :   252 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1074 :   421 :   256 :   const float h = sp->h;
 1075 :   422 :   260 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
 1076 :   423 :   261 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
 1077 :   424 :   262 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
 1078 :   425 :   270 :   sp->mass -= sp->feedback_data.to_distribute.mass;
 1079 :   426 :   274 :     sp->last_enrichment_time = cosmo->a;
 1080 :   427 :   276 :     sp->last_enrichment_time = time;
 1081 :   428 :   279 :   sp->has_done_feedback = 1;
 1082 :   429 :   307 :     if (sp->birth_scale_factor == (float)cosmo->a) {
 1083 :   430 :   310 :       sp->count_since_last_enrichment = 0;
 1084 :   431 :   316 :     if (sp->birth_time == (float)time) {
 1085 :   432 :   319 :       sp->count_since_last_enrichment = 0;
 1086 :   433 :   330 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1087 :   434 :   332 :     age_of_star = time - (double)sp->birth_time;
 1088 :   435 :   339 :     sp->count_since_last_enrichment = 0;
 1089 :   436 :   344 :     sp->count_since_last_enrichment++;
 1090 :   437 :   346 :     if ((sp->count_since_last_enrichment %
 1091 :   438 :   350 :       sp->count_since_last_enrichment = 0;
 1092 :   440 :   169 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 1093 :   441 :   170 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
 1094 :   442 :   178 :     dt_star = get_timestep(sp->time_bin, time_base);
 1095 :   443 :   184 :     if (cosmo->a > (double)sp->birth_scale_factor)
 1096 :   444 :   186 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1097 :   445 :   190 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
 1098 :   446 :   230 :   sp->feedback_data.energy_ejected = 0;
 1099 :   447 :   231 :   sp->feedback_data.will_do_feedback = 0;
 1100 :   448 :   234 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1101 :   449 :   258 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
 1102 :   450 :   261 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
 1103 :   451 :   272 :   return sp->feedback_data.will_do_feedback;
 1104 :   452 :   302 :   sp->feedback_data.enrichment_weight = 0.f;
 1105 :   453 :   316 :   sp->feedback_data.energy_ejected = 0;
 1106 :   454 :   319 :   sp->feedback_data.will_do_feedback = 1;
 1107 :   455 :   346 :   sp->feedback_data.energy_ejected = 0;
 1108 :   456 :   349 :   sp->feedback_data.will_do_feedback = 1;
 1109 :   457 :   392 :   const float hi_inv = 1.f / sp->h;
 1110 :   458 :   394 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
 1111 :   460 :    74 :   const float rand_sn = random_unit_interval(sp->id, ti_begin, random_type);
 1112 :   461 :   121 :   sp->feedback_data.mass_ejected = mass_frac_snii * sp->sf_data.birth_mass +
 1113 :   462 :   125 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
 1114 :   463 :   127 :     message("Negative mass, skipping current star: %lli", sp->id);
 1115 :   464 :   129 :     sp->feedback_data.number_snia = 0;
 1116 :   465 :   130 :     sp->feedback_data.number_snii = 0;
 1117 :   466 :   131 :     sp->feedback_data.mass_ejected = 0;
 1118 :   467 :   136 :   sp->mass -= sp->feedback_data.mass_ejected;
 1119 :   468 :   156 :     sp->feedback_data.metal_mass_ejected[i] =
 1120 :   469 :   164 :     sp->feedback_data.metal_mass_ejected[i] *= sp->sf_data.birth_mass;
 1121 :   470 :   167 :     sp->feedback_data.metal_mass_ejected[i] +=
 1122 :   471 :   212 :   sp->feedback_data.mass_ejected = mass_snia + mass_snii;
 1123 :   472 :   215 :   sp->feedback_data.mass_ejected *= phys_const->const_solar_mass;
 1124 :   473 :   218 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
 1125 :   474 :   220 :     message("Negative mass, skipping current star: %lli", sp->id);
 1126 :   475 :   222 :     sp->feedback_data.number_snia = 0;
 1127 :   476 :   223 :     sp->feedback_data.number_snii = 0;
 1128 :   477 :   224 :     sp->feedback_data.mass_ejected = 0;
 1129 :   478 :   229 :   sp->mass -= sp->feedback_data.mass_ejected;
 1130 :   479 :   247 :     sp->feedback_data.metal_mass_ejected[i] =
 1131 :   480 :   255 :     sp->feedback_data.metal_mass_ejected[i] *= m_avg * number_snii;
 1132 :   481 :   258 :     sp->feedback_data.metal_mass_ejected[i] += snia_yields[i] * number_snia;
 1133 :   482 :   261 :     sp->feedback_data.metal_mass_ejected[i] *= phys_const->const_solar_mass;
 1134 :   483 :   331 :   const float m_init = sp->sf_data.birth_mass / phys_const->const_solar_mass;
 1135 :   484 :   366 :     sp->feedback_data.number_snia = number_snia;
 1136 :   485 :   367 :     sp->feedback_data.number_snii = number_snii;
 1137 :   486 :   376 :     sp->feedback_data.number_snia = number_snia_f;
 1138 :   487 :   377 :     sp->feedback_data.number_snii = number_snii_f;
 1139 :   488 :   393 :   sp->feedback_data.energy_ejected = 0;
 1140 :   489 :   397 :   sp->feedback_data.energy_ejected +=
 1141 :   490 :   398 :       sp->feedback_data.number_snia * snia_energy;
 1142 :   491 :   404 :   sp->feedback_data.energy_ejected +=
 1143 :   492 :   405 :       sp->feedback_data.number_snii * snii_energy;
 1144 :   494 :    96 :   double logmass6 = log10(sp->mass * fb_props->mass_to_solar_mass * 1.e-6); 
 1145 :   495 :    99 :   double z = sp->chemistry_data.metal_mass_fraction_total;
 1146 :   496 :   183 :   for (k=0; k<chemistry_element_count; k++) sp->feedback_data.delta_dust_mass[k]=0.f;
 1147 :   497 :   187 :     sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->delta_AGBCOG1[chemistry_element_C] * 
 1148 :   498 :   190 :     if (sp->feedback_data.delta_dust_mass[chemistry_element_C] > fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C])
 1149 :   499 :   191 :             sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C];
 1150 :   500 :   193 :     delta_metal_mass[chemistry_element_C] -= sp->feedback_data.delta_dust_mass[chemistry_element_C];
 1151 :   501 :   202 :         sp->feedback_data.delta_dust_mass[k] = 16.0 * (delta_table[chemistry_element_Mg] * delta_metal_mass[chemistry_element_Mg] / 24.305 
 1152 :   502 :   209 :         sp->feedback_data.delta_dust_mass[k] = delta_table[k] * delta_metal_mass[k];
 1153 :   503 :   211 :       if (sp->feedback_data.delta_dust_mass[k] > fb_props->max_dust_fraction * delta_metal_mass[k])
 1154 :   504 :   212 :             sp->feedback_data.delta_dust_mass[k] = fb_props->max_dust_fraction * delta_metal_mass[k];
 1155 :   505 :   213 :       delta_metal_mass[k] -= sp->feedback_data.delta_dust_mass[k];
 1156 :   506 :   261 :   if (sp->mass_init == sp->mass) fb_first = 1;
 1157 :   507 :   263 :   z = sp->chemistry_data.metal_mass_fraction_total;
 1158 :   508 :   272 :     feh = sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H];
 1159 :   509 :   777 :   *ejecta_unprocessed = max(0.f, sp->mass_init * SNII_U);
 1160 :   510 :   778 :   *ejecta_mass = max(0.f, sp->mass_init * SNII_E);
 1161 :   511 :   793 :       SWn = sp->mass_init * SW_R;
 1162 :   512 :   804 :       SWn = sp->mass_init * SW_R;
 1163 :   513 :   805 :       SNn = sp->mass_init * SNII_R;
 1164 :   514 :   808 :         *ejecta_energy += sp->mass_init * SNII_ENE;
 1165 :   515 :   815 :       ejecta_metal_mass[k] = sp->mass_init * SNII_Z[k];
 1166 :   516 :   824 :         SNn = sp->mass_init * SNIa_R;
 1167 :   517 :   840 : /*    if (sp->id == 3554000 ) message("Star %lld with m=%g (frac=%g), age=%g Myr, Z=%g is ejecting %g Msun (fIa=%g, Zej=%g) and %g erg in %g Myr.",
 1168 :   518 :   841 :           sp->id,
 1169 :   519 :   842 :           sp->mass * fb_props->mass_to_solar_mass,
 1170 :   520 :   843 :           sp->mass/sp->mass_init,
 1171 :   522 :   215 :   sp->feedback_data.enrichment_weight_inv = 0.f;
 1172 :   523 :   216 :   sp->feedback_data.ngb_N = 0;
 1173 :   524 :   217 :   sp->feedback_data.ngb_mass = 0.f;
 1174 :   525 :   218 :   sp->feedback_data.ngb_rho = 0.f;
 1175 :   526 :   219 :   sp->feedback_data.ngb_Z = 0.f;
 1176 :   527 :   221 :   sp->has_done_feedback = 0;
 1177 :   528 :   264 :   sp->feedback_data.enrichment_weight = 0.f;
 1178 :   529 :   267 :   sp->feedback_data.mass = 0.f;
 1179 :   530 :   271 :     sp->feedback_data.metal_mass[i] = 0.f;
 1180 :   531 :   273 :     sp->feedback_data.delta_dust_mass[i] = 0.f;
 1181 :   532 :   276 :   sp->feedback_data.total_metal_mass = 0.f;
 1182 :   533 :   279 :   sp->feedback_data.energy = 0.f;
 1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
 1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
 1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
 1186 :   537 :   364 :   const double rand_for_scatter = random_unit_interval(sp->id, ti_current,
 1187 :   538 :   405 :   if (sp->feedback_data.ngb_rho <= 0.) {
 1188 :   539 :   406 :     warning("Star %lld has zero neighbor gas density.", sp->id);
 1189 :   540 :   411 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1190 :   541 :   415 :   const float h = sp->h;
 1191 :   542 :   419 :   sp->feedback_data.ngb_rho *= h_inv_dim;
 1192 :   543 :   421 :   const float rho_inv = 1.f / sp->feedback_data.ngb_rho;
 1193 :   544 :   422 :   sp->feedback_data.ngb_Z *= h_inv_dim * rho_inv;
 1194 :   545 :   427 :   if (sp->feedback_data.ngb_rho <= 0) {
 1195 :   546 :   429 :             sp->id, sp->mass);
 1196 :   547 :   436 :   if (sp->feedback_data.ngb_rho <= 0)
 1197 :   548 :   438 :             sp->id, sp->mass);
 1198 :   549 :   439 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 1199 :   550 :   444 :   const float ngb_gas_mass = sp->feedback_data.ngb_mass;
 1200 :   551 :   447 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 1201 :   552 :   454 :       sp->feedback_data.enrichment_weight_inv;
 1202 :   553 :   457 :   if (sp->feedback_data.enrichment_weight_inv < 0.)
 1203 :   554 :   464 :   sp->feedback_data.enrichment_weight = enrichment_weight;
 1204 :   555 :   467 :   if (sp->feedback_data.enrichment_weight < 0.)
 1205 :   556 :   474 :      sp->feedback_data.feedback_mass_to_launch = eta * sp->mass;
 1206 :   557 :   475 :      sp->feedback_data.feedback_wind_velocity = feedback_compute_kick_velocity(sp, cosmo, feedback_props, ti_begin);
 1207 :   558 :   480 :   //sp->feedback_data.lum_habing = feedback_get_lum_from_star_particle(sp, star_age_beg_step, feedback_props);
 1208 :   559 :   481 :   //message("G0: age %g  Lhabing %g\n",star_age_beg_step*feedback_props->time_to_Myr, sp->feedback_data.lum_habing);
 1209 :   560 :   485 :   sp->feedback_data.mass = 0.f;
 1210 :   561 :   489 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 1211 :   562 :   515 :     message("[Fe/H] = %g", sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H]);
 1212 :   563 :   516 :     message("Z = %g", sp->chemistry_data.metal_mass_fraction_total);
 1213 :   564 :   519 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
 1214 :   565 :   524 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
 1215 :   566 :   529 :   if (sp->mass-ejecta_mass < 0.2 * sp->mass_init) {
 1216 :   567 :   531 :           sp->id, sp->mass, ejecta_mass);
 1217 :   568 :   546 :     dum = ejecta_unprocessed * sp->chemistry_data.metal_mass_fraction[elem];
 1218 :   569 :   572 :   sp->feedback_data.total_metal_mass = 0.f;
 1219 :   570 :   574 :     sp->feedback_data.metal_mass[elem] = ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
 1220 :   571 :   578 :       sp->feedback_data.total_metal_mass += ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
 1221 :   572 :   583 :     if (sp->mass/sp->mass_init<0.2) message("Star particle %lld with mass %g (init %g) is giving away %g Msun and %g erg (%g Msun metals).",
 1222 :   573 :   584 :           sp->id, 
 1223 :   574 :   585 :           sp->mass, 
 1224 :   575 :   586 :           sp->mass_init, 
 1225 :   576 :   589 :           sp->feedback_data.total_metal_mass * feedback_props->mass_to_solar_mass);
 1226 :   577 :   594 :   if (sp->feedback_data.total_metal_mass > 0.f) {
 1227 :   578 :   596 :                                          sp->feedback_data.metal_mass);
 1228 :   579 :   601 :   sp->feedback_data.mass = ejecta_mass;
 1229 :   580 :   605 :   //sp->feedback_data.energy = ejecta_energy;
 1230 :   581 :   608 :   sp->feedback_data.feedback_energy_reservoir += ejecta_energy;
 1231 :   582 :   611 :   sp->mass -= ejecta_mass;
 1232 :   583 :   614 :   sp->last_enrichment_time = cosmo->a;
 1233 :   584 :   618 :   sp->feedback_data.SNe_ThisTimeStep = N_SNe;
 1234 :   585 :   622 :   sp->has_done_feedback = 1;
 1235 :   587 :   344 :   if (sp->feedback_data.to_collect.ngb_rho <= 0) {
 1236 :   588 :   346 :             sp->id, sp->mass);
 1237 :   589 :   353 :   if (sp->feedback_data.to_collect.ngb_rho <= 0)
 1238 :   590 :   355 :             sp->id, sp->mass);
 1239 :   591 :   356 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 1240 :   592 :   366 :   const double M_init = sp->mass_init;
 1241 :   593 :   379 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
 1242 :   594 :   382 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 1243 :   595 :   389 :       sp->feedback_data.to_collect.enrichment_weight_inv;
 1244 :   596 :   392 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
 1245 :   597 :   405 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
 1246 :   598 :   408 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
 1247 :   599 :   439 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
 1248 :   600 :   443 :                 abundances, feedback_props, &sp->feedback_data);
 1249 :   601 :   447 :                abundances, feedback_props, &sp->feedback_data);
 1250 :   602 :   451 :   if (sp->feedback_data.to_distribute.mass != 0.f)
 1251 :   603 :   456 :   sp->feedback_data.to_distribute.mass =
 1252 :   604 :   457 :       sp->feedback_data.to_distribute.total_metal_mass +
 1253 :   605 :   458 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
 1254 :   606 :   459 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
 1255 :   607 :   462 :   sp->feedback_data.to_distribute.energy +=
 1256 :   608 :   463 :       sp->feedback_data.to_distribute.mass *
 1257 :   609 :   467 :   sp->feedback_data.to_distribute.energy +=
 1258 :   610 :   468 :       sp->feedback_data.to_distribute.mass * 0.5f *
 1259 :   611 :   469 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
 1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
 1263 :   168 :   const float hi = sp->h;
 1265 :   303 :   if (sp->ti_kick != ti_start)
 1266 :   305 :         "s-particle has not been kicked to the current time sp->ti_kick=%lld, "
 1267 :   307 :         sp->ti_kick, ti_start, ti_end, sp->id);
 1268 :   309 :   sp->ti_kick = ti_end;
 1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
 1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
 1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
 1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
 1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
 1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
 1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
 1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
 1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
 1279 :   104 :       return sp->mass;
 1280 :   267 :       return sp->mass;
 1282 :   499 :   data->id = sp->id;
 1283 :   504 :       sp->v[0] / a_cross;  // TODO: extrapolate velocities to a_cross?
 1284 :   505 :   data->vel[1] = sp->v[1] / a_cross;
 1285 :   506 :   data->vel[2] = sp->v[2] / a_cross;
 1286 :   507 :   data->mass = sp->mass;
 1287 :   515 :   data->mass_init = sp->mass_init;
 1288 :   516 :   data->birth_scale_factor = sp->birth_scale_factor;
 1289 :   517 :   data->birth_density = sp->birth_density;
 1290 :   526 :         sp->chemistry_data.smoothed_metal_mass_fraction[i];
 1291 :   528 :       sp->chemistry_data.metal_mass_fraction_total;
 1292 :   530 :       sp->chemistry_data.smoothed_metal_mass_fraction_total;
 1293 :   535 :       sp->tracers_data.last_AGN_injection_scale_factor;
 1295 :   340 :             "gp->x=[%e %e %e] sp->x=[%e %e %e] diff=[%e %e %e]",
 1296 :   349 :             "gp->m=%e sp->m=%e",
 1297 :   383 :             "gp->m=%e sp->m=%e",
 1299 :    60 :   sp->rt_data.debug_emission_rate_set += 1;
 1300 :    89 :         emission_this_step, sp->mass, dt, rt_props->photon_number_integral,
 1301 :    97 :     sp->rt_data.emission_this_step[g] = emission_this_step[g];
 1302 :   187 :     sp->rt_data.octant_weights[i] = 0.f;
 1303 :   193 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
 1304 :   194 :   sp->rt_data.debug_iact_hydro_inject = 0;
 1305 :   195 :   sp->rt_data.debug_emission_rate_set = 0;
 1306 :   198 :     sp->rt_data.debug_injected_energy[g] = 0.f;
 1307 :   201 :     sp->rt_data.emission_this_step[g] = 0.f;
 1308 :   203 :   sp->rt_data.debug_psi_sum = 0.f;
 1309 :   218 :     sp->rt_data.emission_this_step[g] = 0.f;
 1310 :   233 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
 1311 :   235 :     sp->rt_data.debug_injected_energy_tot[g] = 0.f;
 1312 :   272 :     sp->rt_data.emission_this_step[g] = 0.f;
 1314 :   134 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
 1315 :   135 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
 1316 :   137 :     sp->rt_data.debug_iact_hydro_inject = 0;
 1317 :   138 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
 1318 :   146 :        * sp->rt_data.emission_this_step: energy we should distribute
 1319 :   148 :        * sp->rt_data.debug_injected_energy: energy we actually did
 1320 :   150 :       if (sp->rt_data.debug_injected_energy[g] != 0.f) {
 1321 :   151 :         float diff = 1.f - sp->rt_data.emission_this_step[g] /
 1322 :   152 :                                sp->rt_data.debug_injected_energy[g];
 1323 :   162 :             psi_sum_now += sp->rt_data.octant_weights[i];
 1324 :   163 :           float diff_weights = 1.f - sp->rt_data.debug_psi_sum / psi_sum_now;
 1325 :   168 :                 sp->id, g, sp->rt_data.emission_this_step[g],
 1326 :   169 :                 sp->rt_data.debug_injected_energy[g], diff, diff_weights);
 1327 :   176 :       sp->rt_data.debug_injected_energy[g] = 0.f;
 1328 :   179 :       sp->rt_data.emission_this_step[g] = 0.f;
 1330 :   149 :   sp->rt_data.injection_weight = 0.f;
 1331 :   151 :     sp->rt_data.emission_reinject[g] = 0.f;
 1332 :   165 :     sp->rt_data.emission_this_step[g] = 0.f;
 1334 :    50 :       sp->rt_data.emission_this_step[g] +=
 1336 :    51 :   sp->rt_data.debug_emission_rate_set += 1;
 1337 :   128 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
 1338 :   129 :   sp->rt_data.debug_iact_hydro_inject = 0;
 1339 :   130 :   sp->rt_data.debug_emission_rate_set = 0;
 1340 :   153 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
 1342 :   164 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
 1343 :   165 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
 1344 :   167 :     sp->rt_data.debug_iact_hydro_inject = 0;
 1345 :   168 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
 1347 :   878 :       for (int k = 0; k < csp->count; k++) {
 1348 :   879 :         const int pid = csp->pairs[k].pid;
 1349 :   880 :         const int pjd = csp->pairs[k].pjd;
 1350 :  1027 :     for (int k = 0; k < csp->count; k++) {
 1351 :  1028 :       const int pid = csp->pairs[k].pid;
 1352 :  1029 :       const int pjd = csp->pairs[k].pjd;
 1354 :  2670 :     for (int k = 0; k < csp->count; k++) {
 1355 :  2671 :       const int pid = csp->pairs[k].pid;
 1356 :  2672 :       const int pjd = csp->pairs[k].pjd;
 1357 :  2776 :     for (int k = 0; k < csp->count; k++) {
 1358 :  2777 :       const int pid = csp->pairs[k].pid;
 1359 :  2778 :       const int pjd = csp->pairs[k].pjd;
 1360 :  2907 :       for (int k = 0; k < csp->count; k++) {
 1361 :  2908 :         const int pid = csp->pairs[k].pid;
 1362 :  2909 :         const int pjd = csp->pairs[k].pjd;
 1364 :   749 :     for (int k = 0; k < csp->count; k++) {
 1365 :   750 :       const int pid = csp->pairs[k].pid;
 1366 :   751 :       const int pjd = csp->pairs[k].pjd;
 1368 :  1486 :       for (int k = 0; k < csp->count; k++) {
 1369 :  1487 :         const int pid = csp->pairs[k].pid;
 1370 :  1488 :         const int pjd = csp->pairs[k].pjd;
 1371 :  1687 :     for (int k = 0; k < csp->count; k++) {
 1372 :  1688 :       const int pid = csp->pairs[k].pid;
 1373 :  1689 :       const int pjd = csp->pairs[k].pjd;
 1375 :   168 :         const float h_old = sp->h;
 1376 :   175 :         if (sp->density.wcount < 1.e-5 * kernel_root) { /* No neighbours case */
 1377 :   191 :           const float n_sum = sp->density.wcount * h_old_dim;
 1378 :   195 :               sp->density.wcount_dh * h_old_dim +
 1379 :   196 :               hydro_dimension * sp->density.wcount * h_old_dim_minus_one;
 1380 :   213 :           if (((sp->h >= stars_h_max) && (f < 0.f)) ||
 1381 :   214 :               ((sp->h <= stars_h_min) && (f > 0.f))) {
 1382 :   221 :               const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 1383 :   223 :                   get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 1384 :   231 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
 1385 :   272 :                     get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 1386 :   274 :                     get_integer_timestep(sp->time_bin);
 1387 :   279 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
 1388 :   307 :                 num_reruns, sp->id, h_init, h_old, h_new, f, f_prime, n_sum,
 1389 :   331 :             sp->h = pow_inv_dimension(
 1390 :   337 :             sp->h = h_new;
 1391 :   341 :           if (sp->h < stars_h_max && sp->h > stars_h_min) {
 1392 :   358 :           } else if (sp->h <= stars_h_min) {
 1393 :   361 :             sp->h = stars_h_min;
 1394 :   363 :           } else if (sp->h >= stars_h_max) {
 1395 :   366 :             sp->h = stars_h_max;
 1396 :   385 :         h_max = max(h_max, sp->h);
 1397 :   386 :         h_max_active = max(h_max_active, sp->h);
 1398 :   395 :           const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 1399 :   397 :               get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 1400 :   405 :             dt_star = get_timestep(sp->time_bin, e->time_base);
 1401 :   446 :                 get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 1402 :   447 :             const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 1403 :   452 :             dt_star = get_timestep(sp->time_bin, e->time_base);
 1404 :   526 :         warning("ID: %lld, h: %g, wcount: %g", sp->id, sp->h,
 1405 :   527 :                 sp->density.wcount);
 1406 :   551 :       error("Particle has h larger than h_max (id=%lld)", sp->id);
 1407 :   553 :       error("Active particle has h larger than h_max_active (id=%lld)", sp->id);
 1409 :   269 :           c->stars.h_max = max(c->stars.h_max, sp->h);
 1410 :   270 :           c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
 1411 :   481 :               /* message("We formed a star id=%lld cellID=%lld", sp->id,
 1412 :   498 :               c->stars.h_max = max(c->stars.h_max, sp->h);
 1413 :   499 :               c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
 1414 :   522 :                 csds_part_data_init(&sp->csds_data);
 1415 :   525 :                 sp->csds_data = xp->csds_data;
 1416 :  1035 :         if (csds_should_write(&sp->csds_data, e->csds)) {
 1417 :  1042 :           sp->csds_data.steps_since_last_output += 1;
 1419 :   406 :     for (int k = 0; k < csp->count; k++) {
 1420 :   407 :       const int pid = csp->pairs[k].pid;
 1421 :   408 :       const int pjd = csp->pairs[k].pjd;
 1422 :   588 :           if (sp->id == sink_id) {
 1423 :   604 :               message("sink %lld removing gas particle %lld", sp->id, p->id);
 1424 :   752 :           sink_get_sink_swallow_id(&cell_sp->merger_data);
 1425 :   758 :         if (cell_sp->ti_drift != e->ti_current)
 1426 :   774 :           if (sp->id == sink_id) {
 1427 :   778 :             if (sink_get_sink_swallow_id(&sp->merger_data) != -1) {
 1428 :   781 :               sink_mark_sink_as_not_swallowed(&cell_sp->merger_data);
 1429 :   798 :             // message("sink %lld swallowing sink particle %lld", sp->id,
 1430 :   799 :             // cell_sp->id);
 1431 :   804 :               message("sink %lld removing sink particle %lld", sp->id,
 1432 :   805 :                       cell_sp->id);
 1433 :   814 :             sink_mark_sink_as_merged(&cell_sp->merger_data);
 1434 :   830 :                 cell_sp->id, swallow_id);
 1436 :   250 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 1437 :   252 :             get_integer_time_begin(ti_current + 1, sp->time_bin);
 1438 :   257 :             get_integer_time_end(ti_current + 1, sp->time_bin);
 1439 :   263 :               ti_end_check, ti_begin, ti_step, sp->time_bin, ti_current);
 1440 :   524 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 1441 :   526 :             get_integer_time_begin(ti_current, sp->time_bin) + ti_step / 2;
 1442 :   543 :         if (sp->ti_drift != sp->ti_kick)
 1443 :   914 :             get_integer_time_end(ti_current, sp->time_bin);
 1444 :   920 :         const integertime_t ti_old_step = get_integer_timestep(sp->time_bin);
 1445 :   926 :           old_time_step_length = get_timestep(sp->time_bin, e->time_base);
 1446 :   933 :         sp->time_bin = get_time_bin(ti_new_step);
 1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
 1448 :   969 :               get_integer_time_end(ti_current, sp->time_bin);
 1449 :   972 :               get_integer_time_begin(ti_current + 1, sp->time_bin);
 1451 :  1340 :           t->ci = ci->progeny[csp->pairs[0].pid];
 1452 :  1341 :           t->cj = cj->progeny[csp->pairs[0].pjd];
 1453 :  1345 :           t->flags = csp->pairs[0].sid;
 1454 :  1346 :           for (int k = 1; k < csp->count; k++) {
 1455 :  1349 :                                   csp->pairs[k].sid, 0,
 1456 :  1350 :                                   ci->progeny[csp->pairs[k].pid],
 1457 :  1351 :                                   cj->progeny[csp->pairs[k].pjd]),
 1458 :  1388 :   struct engine *e = sp->e;
 1460 :    54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 1461 :    55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 1462 :    56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 1463 :    58 :     ret[0] = sp->x[0];
 1464 :    59 :     ret[1] = sp->x[1];
 1465 :    60 :     ret[2] = sp->x[2];
 1466 :    72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 1467 :    73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1468 :    86 :   const struct gpart* gp = sp->gpart;
 1470 :    46 :   sp->cut_off_radius =
 1472 :    54 :   sp->r_cut = sink_props->cut_off_radius;
 1473 :    55 :   sp->time_bin = 0;
 1474 :    57 :   sp->number_of_gas_swallows = 0;
 1475 :    58 :   sp->number_of_direct_gas_swallows = 0;
 1476 :    59 :   sp->number_of_sink_swallows = 0;
 1477 :    60 :   sp->number_of_direct_sink_swallows = 0;
 1478 :    61 :   sp->swallowed_angular_momentum[0] = 0.f;
 1479 :    62 :   sp->swallowed_angular_momentum[1] = 0.f;
 1480 :    63 :   sp->swallowed_angular_momentum[2] = 0.f;
 1481 :    65 :   sink_mark_sink_as_not_swallowed(&sp->merger_data);
 1482 :    92 :     sp->ids_ngbs_accretion[i] = -1;
 1483 :    93 :   sp->num_ngb_accretion = 0;
 1484 :    96 :     sp->ids_ngbs_merger[i] = -1;
 1485 :    97 :   sp->num_ngb_merger = 0;
 1486 :   100 :     sp->ids_ngbs_formation[i] = -1;
 1487 :   101 :   sp->num_ngb_formation = 0;
 1488 :   247 :   const float sink_mass = sp->mass;
 1489 :   250 :   sp->mass += gas_mass;
 1490 :   251 :   sp->gpart->mass += gas_mass;
 1491 :   254 :   const float dv[3] = {(sp->v[0] - p->v[0]) * cosmo->a_inv,
 1492 :   255 :                        (sp->v[1] - p->v[1]) * cosmo->a_inv,
 1493 :   256 :                        (sp->v[2] - p->v[2]) * cosmo->a_inv};
 1494 :   259 :   const float dx[3] = {(sp->x[0] - p->x[0]) * cosmo->a,
 1495 :   260 :                        (sp->x[1] - p->x[1]) * cosmo->a,
 1496 :   261 :                        (sp->x[2] - p->x[2]) * cosmo->a};
 1497 :   264 :   sp->swallowed_angular_momentum[0] +=
 1498 :   266 :   sp->swallowed_angular_momentum[1] +=
 1499 :   268 :   sp->swallowed_angular_momentum[2] +=
 1500 :   272 :   const float sink_mom[3] = {sink_mass * sp->v[0] + gas_mass * p->v[0],
 1501 :   273 :                              sink_mass * sp->v[1] + gas_mass * p->v[1],
 1502 :   274 :                              sink_mass * sp->v[2] + gas_mass * p->v[2]};
 1503 :   276 :   sp->v[0] = sink_mom[0] / sp->mass;
 1504 :   277 :   sp->v[1] = sink_mom[1] / sp->mass;
 1505 :   278 :   sp->v[2] = sink_mom[2] / sp->mass;
 1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
 1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
 1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 1509 :   290 :       sp->id, p->id, -dv[0], -dv[1], -dv[2], -dx[0], -dx[1], -dx[2],
 1510 :   295 :   struct chemistry_sink_data* sp_chem = &sp->chemistry_data;
 1511 :   300 :   sp->number_of_gas_swallows++;
 1512 :   301 :   sp->number_of_direct_gas_swallows++;
 1513 :   407 :   sp->h = sink->r_cut;
 1515 :    54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 1516 :    55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 1517 :    56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 1518 :    58 :     ret[0] = sp->x[0];
 1519 :    59 :     ret[1] = sp->x[1];
 1520 :    60 :     ret[2] = sp->x[2];
 1521 :    72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 1522 :    73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1523 :    86 :   const struct gpart* gp = sp->gpart;
 1525 :    52 :   sp->cut_off_radius =
 1526 :    55 :   sp->maximal_temperature =
 1527 :    58 :   sp->density_threshold =
 1528 :    62 :   sp->maximal_temperature /=
 1529 :    65 :   sp->density_threshold /= units_cgs_conversion_factor(us, UNIT_CONV_DENSITY);
 1530 :    67 :   message("maximal_temperature = %g", sp->maximal_temperature);
 1531 :    68 :   message("density_threshold  = %g", sp->density_threshold);
 1533 :   628 :     if (sp->time_bin == time_bin_not_created ||
 1534 :   629 :         sp->time_bin == time_bin_inhibited)
 1535 :   633 :     struct gpart *gp = sp->gpart;
 1536 :   640 :     gp->x[0] = sp->x[0];
 1537 :   641 :     gp->x[1] = sp->x[1];
 1538 :   642 :     gp->x[2] = sp->x[2];
 1539 :   644 :     gp->v_full[0] = sp->v[0];
 1540 :   645 :     gp->v_full[1] = sp->v[1];
 1541 :   646 :     gp->v_full[2] = sp->v[2];
 1542 :   648 :     gp->mass = sp->mass;
 1544 :   357 :     double old_pos_x = sp->x[0];
 1545 :   358 :     double old_pos_y = sp->x[1];
 1546 :   359 :     double old_pos_z = sp->x[2];
 1547 :   362 :     if (!s->periodic && sp->time_bin != time_bin_inhibited) {
 1548 :   400 :     if (sp->time_bin == time_bin_inhibited) {
 1549 :   403 :     } else if (sp->time_bin == time_bin_not_created) {
 1550 :   415 :       min_mass = min(min_mass, sp->mass);
 1551 :   419 :           sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2];
 1552 :   422 :       sp->x[0] = pos_x;
 1553 :   423 :       sp->x[1] = pos_y;
 1554 :   424 :       sp->x[2] = pos_z;
 1556 :   581 :         cell_getid(cdim, sp->x[0] * ih[0], sp->x[1] * ih[1], sp->x[2] * ih[2]);
 1557 :   655 :     if (sp->time_bin == time_bin_inhibited)
 1558 :   660 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
 1559 :   661 :                    sp->x[2] * s->iwidth[2]);
 1560 :   669 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
 1561 :   670 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
 1562 :   671 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
 1564 :   591 :   sp->mass = hydro_get_mass(p);
 1565 :   594 :   sp->mass_init = hydro_get_mass(p);
 1566 :   598 :     sp->birth_scale_factor = cosmo->a;
 1567 :   600 :     sp->birth_time = e->time;
 1568 :   604 :   sp->split_data = xp->split_data;
 1569 :   607 :   sp->chemistry_data = p->chemistry_data;
 1570 :   610 :   sp->tracers_data = xp->tracers_data;
 1571 :   613 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
 1572 :   616 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
 1573 :   620 :   sp->f_E = -1.f;
 1574 :   621 :   sp->number_of_SNII_events = 0;
 1575 :   622 :   sp->last_enrichment_time = sp->birth_time;
 1576 :   623 :   sp->count_since_last_enrichment = -1;
 1577 :   624 :   sp->number_of_heating_events = 0.;
 1579 :    43 :   sf->new_stellar_mass += sp->mass;
 1581 :   244 :   if (p->x[0] != sp->x[0] || p->x[1] != sp->x[1] || p->x[2] != sp->x[2]) {
 1582 :   248 :         p->x[0], p->x[1], p->x[2], sp->x[0], sp->x[1], sp->x[2]);
 1583 :   269 :   sp->x[0] += delta_x * max_displacement * p->h;
 1584 :   270 :   sp->x[1] += delta_y * max_displacement * p->h;
 1585 :   271 :   sp->x[2] += delta_z * max_displacement * p->h;
 1586 :   274 :   sp->gpart->x[0] = sp->x[0];
 1587 :   275 :   sp->gpart->x[1] = sp->x[1];
 1588 :   276 :   sp->gpart->x[2] = sp->x[2];
 1589 :   279 :   const double mass_ratio = sp->mass / hydro_get_mass(p);
 1590 :   338 :     sp->mass = mass_star;
 1591 :   339 :     sp->gpart->mass = mass_star;
 1592 :   347 :     sp->mass = mass_gas;
 1593 :   349 :   sp->sf_data.birth_mass = sp->mass;
 1594 :   353 :     sp->birth_scale_factor = cosmo->a;
 1595 :   355 :     sp->birth_time = e->time;
 1596 :   359 :   // sp->tracers_data = xp->tracers_data;
 1597 :   362 :   sp->split_data = xp->split_data;
 1598 :   365 :   sp->sf_data.birth_density = hydro_get_physical_density(p, cosmo);
 1599 :   368 :   sp->sf_data.birth_temperature = cooling_get_temperature(
 1600 :   375 :   sp->sf_data.progenitor_id = p->id;
 1602 :    41 :   out[0] = sp->sf_data.birth_density;
 1603 :    42 :   out[1] = sp->sf_data.birth_mass;
 1604 :    44 :   *id = sp->sf_data.progenitor_id;
 1606 :    44 :   sf->new_stellar_mass += sp->mass;
 1608 :   425 :   sp->mass = hydro_get_mass(p);
 1609 :   428 :   sp->mass_init = hydro_get_mass(p);
 1610 :   432 :     sp->birth_scale_factor = cosmo->a;
 1611 :   434 :     sp->birth_time = e->time;
 1612 :   438 :   sp->split_data = xp->split_data;
 1613 :   441 :   sp->chemistry_data = p->chemistry_data;
 1614 :   444 :   sp->tracers_data = xp->tracers_data;
 1615 :   447 :   sp->birth_density = cooling_get_subgrid_density(p, xp);
 1616 :   450 :   sp->birth_temperature = cooling_get_subgrid_temperature(p, xp);
 1617 :   453 :   sp->feedback_data.feedback_mass_to_launch = 0.f;
 1618 :   454 :   sp->feedback_data.feedback_energy_reservoir = 0.f;
 1619 :   455 :   sp->last_enrichment_time = sp->birth_time;
 1620 :   456 :   sp->count_since_last_enrichment = -1;
 1622 :    43 :   sf->new_stellar_mass += sp->mass;
 1624 :   173 :   sp->mass = hydro_get_mass(p);
 1625 :   176 :   sp->mass_init = hydro_get_mass(p);
 1626 :   179 :   sp->split_data = xp->split_data;
 1627 :   183 :     sp->birth_scale_factor = cosmo->a;
 1628 :   185 :     sp->birth_time = e->time;
 1630 :   663 :   sp->mass = hydro_get_mass(p);
 1631 :   666 :   sp->mass_init = hydro_get_mass(p);
 1632 :   670 :     sp->birth_scale_factor = cosmo->a;
 1633 :   672 :     sp->birth_time = e->time;
 1634 :   676 :   sp->split_data = xp->split_data;
 1635 :   679 :   sp->chemistry_data = p->chemistry_data;
 1636 :   682 :   sp->tracers_data = xp->tracers_data;
 1637 :   685 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
 1638 :   688 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
 1639 :   692 :   sp->f_E = -1.f;
 1640 :   693 :   sp->number_of_SNII_events = 0;
 1641 :   694 :   sp->last_enrichment_time = sp->birth_time;
 1642 :   695 :   sp->count_since_last_enrichment = -1;
 1643 :   696 :   sp->number_of_heating_events = 0.;
 1645 :    43 :   sf->new_stellar_mass += sp->mass;
 1647 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1648 :    61 :     return time - (double)sp->birth_time;
 1649 :    81 :   sp->time_bin = 0;
 1650 :    84 :   sp->group_data.mass = 0.f;
 1651 :    85 :   sp->group_data.stellar_mass = 0.f;
 1652 :    99 :     sp->ids_ngbs_density[i] = -1;
 1653 :   100 :   sp->num_ngb_density = 0;
 1654 :   103 :   sp->density.wcount = 0.f;
 1655 :   104 :   sp->density.wcount_dh = 0.f;
 1656 :   152 :   const float h = sp->h;
 1657 :   158 :   sp->density.wcount *= h_inv_dim;
 1658 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 1659 :   175 :       sp->id, sp->h, sp->density.wcount);
 1660 :   178 :   const float h = sp->h;
 1661 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 1662 :   184 :   sp->density.wcount_dh = 0.f;
 1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1668 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 1669 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 1670 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 1671 :    62 :     ret[0] = sp->x[0];
 1672 :    63 :     ret[1] = sp->x[1];
 1673 :    64 :     ret[2] = sp->x[2];
 1674 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 1675 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1676 :    92 :   const struct gpart *gp = sp->gpart;
 1677 :   111 :   if (sp->gpart != NULL)
 1678 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 1679 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 1680 :   199 :   sp->h_tolerance =
 1681 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 1682 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 1683 :   205 :   sp->delta_neighbours =
 1684 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 1685 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 1686 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 1687 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 1688 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 1689 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 1690 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 1691 :   242 :           sp->max_smoothing_iterations);
 1692 :   252 :                        sp->target_neighbours);
 1693 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 1694 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 1695 :   256 :                        sp->h_tolerance);
 1696 :   258 :                        sp->log_max_h_change);
 1697 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 1698 :   262 :                        sp->max_smoothing_iterations);
 1700 :    43 :   if (sp->birth_time == -1.) {
 1701 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 1702 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 1703 :    59 :     star_age = time - sp->birth_time;
 1704 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1705 :    88 :     return time - (double)sp->birth_time;
 1706 :   102 :     sp->ids_ngbs_density[i] = -1;
 1707 :   103 :   sp->num_ngb_density = 0;
 1708 :   106 :   sp->density.wcount = 0.f;
 1709 :   107 :   sp->density.wcount_dh = 0.f;
 1710 :   110 :   sp->N_density = 0;
 1711 :   111 :   sp->N_density_exact = 0;
 1712 :   112 :   sp->rho = 0.f;
 1713 :   113 :   sp->rho_exact = 0.f;
 1714 :   114 :   sp->n = 0.f;
 1715 :   115 :   sp->n_exact = 0.f;
 1716 :   116 :   sp->inhibited_exact = 0;
 1717 :   137 :   sp->time_bin = 0;
 1718 :   138 :   sp->f_E = -1.f;
 1719 :   139 :   sp->count_since_last_enrichment = -1;
 1720 :   140 :   sp->number_of_heating_events = 0.;
 1721 :   141 :   sp->number_of_SNII_events = 0;
 1722 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 1723 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 1724 :   148 :     sp->birth_temperature =
 1725 :   152 :     sp->last_enrichment_time = scale_factor;
 1726 :   154 :     sp->last_enrichment_time = time;
 1727 :   159 :   sp->group_data.mass = 0.f;
 1728 :   160 :   sp->group_data.stellar_mass = 0.f;
 1729 :   211 :   const float h = sp->h;
 1730 :   217 :   sp->density.wcount *= h_inv_dim;
 1731 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 1732 :   221 :   sp->rho *= h_inv_dim;
 1733 :   222 :   sp->n *= h_inv_dim;
 1734 :   239 :       sp->id, sp->h, sp->density.wcount);
 1735 :   242 :   sp->density.wcount = 0.f;
 1736 :   243 :   sp->density.wcount_dh = 0.f;
 1737 :   303 :   const float mass = sp->mass_init;
 1738 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 1739 :   309 :     age = time - sp->birth_time;
 1741 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 1742 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 1743 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 1744 :    71 :     ret[0] = sp->x[0];
 1745 :    72 :     ret[1] = sp->x[1];
 1746 :    73 :     ret[2] = sp->x[2];
 1747 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 1748 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1749 :   101 :   const struct gpart *gp = sp->gpart;
 1750 :   128 :   if (sp->gpart != NULL)
 1751 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 1752 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 1753 :   253 :   sp->h_tolerance =
 1754 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 1755 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 1756 :   259 :   sp->delta_neighbours =
 1757 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 1758 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 1759 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 1760 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 1761 :   276 :   sp->overwrite_birth_time =
 1762 :   278 :   sp->overwrite_birth_density =
 1763 :   280 :   sp->overwrite_birth_temperature =
 1764 :   284 :   if (sp->overwrite_birth_time) {
 1765 :   285 :     sp->spart_first_init_birth_time =
 1766 :   290 :   if (sp->overwrite_birth_density) {
 1767 :   291 :     sp->spart_first_init_birth_density =
 1768 :   296 :   if (sp->overwrite_birth_temperature) {
 1769 :   297 :     sp->spart_first_init_birth_temperature =
 1770 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 1771 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 1772 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 1773 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 1774 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 1775 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 1776 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 1777 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 1778 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 1779 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 1780 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 1781 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 1782 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 1783 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 1784 :   404 :           sp->max_smoothing_iterations);
 1785 :   406 :   if (sp->overwrite_birth_time)
 1786 :   408 :             sp->spart_first_init_birth_time);
 1787 :   411 :           sp->age_threshold_unlimited);
 1788 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 1789 :   414 :           sp->max_time_step_young);
 1790 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 1791 :   424 :                        sp->target_neighbours);
 1792 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 1793 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 1794 :   428 :                        sp->h_tolerance);
 1795 :   430 :                        sp->log_max_h_change);
 1796 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 1797 :   434 :                        sp->max_smoothing_iterations);
 1798 :   462 :     free(sp->lum_tables_Z[i]);
 1799 :   463 :     free(sp->lum_tables_ages[i]);
 1800 :   464 :     free(sp->lum_tables_luminosities[i]);
 1802 :    58 :     const double birth = sp->birth_scale_factor;
 1803 :    62 :     return time - (double)sp->birth_time;
 1804 :    76 :     sp->ids_ngbs_density[i] = -1;
 1805 :    77 :   sp->num_ngb_density = 0;
 1806 :    80 :   sp->density.wcount = 0.f;
 1807 :    81 :   sp->density.wcount_dh = 0.f;
 1808 :   100 :   sp->time_bin = 0;
 1809 :   105 :   sp->group_data.mass = 0.f;
 1810 :   106 :   sp->group_data.stellar_mass = 0.f;
 1811 :   157 :   const float h = sp->h;
 1812 :   163 :   sp->density.wcount *= h_inv_dim;
 1813 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 1814 :   180 :       sp->id, sp->h, sp->density.wcount);
 1815 :   183 :   sp->density.wcount = 0.f;
 1816 :   184 :   sp->density.wcount_dh = 0.f;
 1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1822 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 1823 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 1824 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 1825 :    64 :     ret[0] = sp->x[0];
 1826 :    65 :     ret[1] = sp->x[1];
 1827 :    66 :     ret[2] = sp->x[2];
 1828 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 1829 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1830 :    94 :   const struct gpart *gp = sp->gpart;
 1831 :   113 :   if (sp->gpart != NULL)
 1832 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 1833 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 1834 :   211 :   sp->h_tolerance =
 1835 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 1836 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 1837 :   217 :   sp->delta_neighbours =
 1838 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 1839 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 1840 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 1841 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 1842 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 1843 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 1844 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 1845 :   254 :           sp->max_smoothing_iterations);
 1846 :   264 :                        sp->target_neighbours);
 1847 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 1848 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 1849 :   268 :                        sp->h_tolerance);
 1850 :   270 :                        sp->log_max_h_change);
 1851 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 1852 :   274 :                        sp->max_smoothing_iterations);
 1854 :    72 :   sp->group_data.mass = 0.f;
 1855 :    73 :   sp->group_data.stellar_mass = 0.f;
 1857 :    43 :   if (sp->birth_time == -1.) {
 1858 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 1859 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 1860 :    59 :     star_age = time - sp->birth_time;
 1861 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1862 :    88 :     return time - (double)sp->birth_time;
 1863 :   102 :     sp->ids_ngbs_density[i] = -1;
 1864 :   103 :   sp->num_ngb_density = 0;
 1865 :   106 :   sp->density.wcount = 0.f;
 1866 :   107 :   sp->density.wcount_dh = 0.f;
 1867 :   110 :   sp->N_density = 0;
 1868 :   111 :   sp->N_density_exact = 0;
 1869 :   112 :   sp->rho = 0.f;
 1870 :   113 :   sp->rho_exact = 0.f;
 1871 :   114 :   sp->n = 0.f;
 1872 :   115 :   sp->n_exact = 0.f;
 1873 :   116 :   sp->inhibited_exact = 0;
 1874 :   137 :   sp->time_bin = 0;
 1875 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 1876 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 1877 :   144 :     sp->birth_temperature =
 1878 :   148 :     sp->last_enrichment_time = scale_factor;
 1879 :   150 :     sp->last_enrichment_time = time;
 1880 :   155 :   sp->group_data.mass = 0.f;
 1881 :   156 :   sp->group_data.stellar_mass = 0.f;
 1882 :   157 :   sp->group_data.ssfr = 0.f;
 1883 :   208 :   const float h = sp->h;
 1884 :   214 :   sp->density.wcount *= h_inv_dim;
 1885 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 1886 :   218 :   sp->rho *= h_inv_dim;
 1887 :   219 :   sp->n *= h_inv_dim;
 1888 :   236 :       sp->id, sp->h, sp->density.wcount);
 1889 :   239 :   sp->density.wcount = 0.f;
 1890 :   240 :   sp->density.wcount_dh = 0.f;
 1891 :   300 :   const float mass = sp->mass_init;
 1892 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 1893 :   306 :     age = time - sp->birth_time;
 1895 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 1896 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 1897 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 1898 :    71 :     ret[0] = sp->x[0];
 1899 :    72 :     ret[1] = sp->x[1];
 1900 :    73 :     ret[2] = sp->x[2];
 1901 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 1902 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1903 :   101 :   const struct gpart *gp = sp->gpart;
 1904 :   128 :   if (sp->gpart != NULL)
 1905 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 1906 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 1907 :   252 :   sp->h_tolerance =
 1908 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 1909 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 1910 :   258 :   sp->delta_neighbours =
 1911 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 1912 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 1913 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 1914 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 1915 :   275 :   sp->overwrite_birth_time =
 1916 :   277 :   sp->overwrite_birth_density =
 1917 :   279 :   sp->overwrite_birth_temperature =
 1918 :   283 :   if (sp->overwrite_birth_time) {
 1919 :   284 :     sp->spart_first_init_birth_time =
 1920 :   289 :   if (sp->overwrite_birth_density) {
 1921 :   290 :     sp->spart_first_init_birth_density =
 1922 :   295 :   if (sp->overwrite_birth_temperature) {
 1923 :   296 :     sp->spart_first_init_birth_temperature =
 1924 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 1925 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 1926 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 1927 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 1928 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 1929 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 1930 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 1931 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 1932 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 1933 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 1934 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 1935 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 1936 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 1937 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 1938 :   403 :           sp->max_smoothing_iterations);
 1939 :   405 :   if (sp->overwrite_birth_time)
 1940 :   407 :             sp->spart_first_init_birth_time);
 1941 :   410 :           sp->age_threshold_unlimited);
 1942 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 1943 :   413 :           sp->max_time_step_young);
 1944 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 1945 :   423 :                        sp->target_neighbours);
 1946 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 1947 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 1948 :   427 :                        sp->h_tolerance);
 1949 :   429 :                        sp->log_max_h_change);
 1950 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 1951 :   433 :                        sp->max_smoothing_iterations);
 1952 :   461 :     free(sp->lum_tables_Z[i]);
 1953 :   462 :     free(sp->lum_tables_ages[i]);
 1954 :   463 :     free(sp->lum_tables_luminosities[i]);
 1956 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1957 :     3 :    61 :     return time - (double)sp->birth_time;
 1958 :     4 :    81 :   sp->time_bin = 0;
 1959 :     5 :    84 :   sp->group_data.mass = 0.f;
 1960 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 1961 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 1962 :     8 :   100 :   sp->num_ngb_density = 0;
 1963 :     9 :   103 :   sp->density.wcount = 0.f;
 1964 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 1965 :    11 :   152 :   const float h = sp->h;
 1966 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 1967 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 1968 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 1969 :    15 :   178 :   const float h = sp->h;
 1970 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 1971 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1975 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 1976 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 1977 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 1978 :    26 :    62 :     ret[0] = sp->x[0];
 1979 :    27 :    63 :     ret[1] = sp->x[1];
 1980 :    28 :    64 :     ret[2] = sp->x[2];
 1981 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 1982 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1983 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 1984 :    32 :   111 :   if (sp->gpart != NULL)
 1985 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 1986 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 1987 :    35 :   199 :   sp->h_tolerance =
 1988 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 1989 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 1990 :    38 :   205 :   sp->delta_neighbours =
 1991 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 1992 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 1993 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 1994 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 1995 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 1996 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 1997 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 1998 :    46 :   242 :           sp->max_smoothing_iterations);
 1999 :    47 :   252 :                        sp->target_neighbours);
 2000 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2001 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2002 :    50 :   256 :                        sp->h_tolerance);
 2003 :    51 :   258 :                        sp->log_max_h_change);
 2004 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 2005 :    53 :   262 :                        sp->max_smoothing_iterations);
 2006 :    55 :    43 :   if (sp->birth_time == -1.) {
 2007 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2008 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2009 :    58 :    59 :     star_age = time - sp->birth_time;
 2010 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2011 :    60 :    88 :     return time - (double)sp->birth_time;
 2012 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 2013 :    62 :   103 :   sp->num_ngb_density = 0;
 2014 :    63 :   106 :   sp->density.wcount = 0.f;
 2015 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 2016 :    65 :   110 :   sp->N_density = 0;
 2017 :    66 :   111 :   sp->N_density_exact = 0;
 2018 :    67 :   112 :   sp->rho = 0.f;
 2019 :    68 :   113 :   sp->rho_exact = 0.f;
 2020 :    69 :   114 :   sp->n = 0.f;
 2021 :    70 :   115 :   sp->n_exact = 0.f;
 2022 :    71 :   116 :   sp->inhibited_exact = 0;
 2023 :    72 :   137 :   sp->time_bin = 0;
 2024 :    73 :   138 :   sp->f_E = -1.f;
 2025 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 2026 :    75 :   140 :   sp->number_of_heating_events = 0.;
 2027 :    76 :   141 :   sp->number_of_SNII_events = 0;
 2028 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2029 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2030 :    79 :   148 :     sp->birth_temperature =
 2031 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 2032 :    81 :   154 :     sp->last_enrichment_time = time;
 2033 :    82 :   159 :   sp->group_data.mass = 0.f;
 2034 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 2035 :    84 :   211 :   const float h = sp->h;
 2036 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 2037 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2038 :    87 :   221 :   sp->rho *= h_inv_dim;
 2039 :    88 :   222 :   sp->n *= h_inv_dim;
 2040 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 2041 :    90 :   242 :   sp->density.wcount = 0.f;
 2042 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 2043 :    92 :   303 :   const float mass = sp->mass_init;
 2044 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2045 :    94 :   309 :     age = time - sp->birth_time;
 2046 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2047 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2048 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2049 :    99 :    71 :     ret[0] = sp->x[0];
 2050 :   100 :    72 :     ret[1] = sp->x[1];
 2051 :   101 :    73 :     ret[2] = sp->x[2];
 2052 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2053 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2054 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 2055 :   105 :   128 :   if (sp->gpart != NULL)
 2056 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2057 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 2058 :   108 :   253 :   sp->h_tolerance =
 2059 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2060 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2061 :   111 :   259 :   sp->delta_neighbours =
 2062 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2063 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2064 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 2065 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2066 :   116 :   276 :   sp->overwrite_birth_time =
 2067 :   117 :   278 :   sp->overwrite_birth_density =
 2068 :   118 :   280 :   sp->overwrite_birth_temperature =
 2069 :   119 :   284 :   if (sp->overwrite_birth_time) {
 2070 :   120 :   285 :     sp->spart_first_init_birth_time =
 2071 :   121 :   290 :   if (sp->overwrite_birth_density) {
 2072 :   122 :   291 :     sp->spart_first_init_birth_density =
 2073 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 2074 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 2075 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 2076 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 2077 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 2078 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 2079 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 2080 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 2081 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 2082 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 2083 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 2084 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 2085 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 2086 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 2087 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 2088 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2089 :   139 :   404 :           sp->max_smoothing_iterations);
 2090 :   140 :   406 :   if (sp->overwrite_birth_time)
 2091 :   141 :   408 :             sp->spart_first_init_birth_time);
 2092 :   142 :   411 :           sp->age_threshold_unlimited);
 2093 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 2094 :   144 :   414 :           sp->max_time_step_young);
 2095 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 2096 :   146 :   424 :                        sp->target_neighbours);
 2097 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2098 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2099 :   149 :   428 :                        sp->h_tolerance);
 2100 :   150 :   430 :                        sp->log_max_h_change);
 2101 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 2102 :   152 :   434 :                        sp->max_smoothing_iterations);
 2103 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 2104 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 2105 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 2106 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 2107 :   158 :    62 :     return time - (double)sp->birth_time;
 2108 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 2109 :   160 :    77 :   sp->num_ngb_density = 0;
 2110 :   161 :    80 :   sp->density.wcount = 0.f;
 2111 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 2112 :   163 :   100 :   sp->time_bin = 0;
 2113 :   164 :   105 :   sp->group_data.mass = 0.f;
 2114 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 2115 :   166 :   157 :   const float h = sp->h;
 2116 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 2117 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2118 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 2119 :   170 :   183 :   sp->density.wcount = 0.f;
 2120 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 2124 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2125 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2126 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2127 :   180 :    64 :     ret[0] = sp->x[0];
 2128 :   181 :    65 :     ret[1] = sp->x[1];
 2129 :   182 :    66 :     ret[2] = sp->x[2];
 2130 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2131 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2132 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 2133 :   186 :   113 :   if (sp->gpart != NULL)
 2134 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2135 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 2136 :   189 :   211 :   sp->h_tolerance =
 2137 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2138 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2139 :   192 :   217 :   sp->delta_neighbours =
 2140 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2141 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2142 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 2143 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2144 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 2145 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 2146 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2147 :   200 :   254 :           sp->max_smoothing_iterations);
 2148 :   201 :   264 :                        sp->target_neighbours);
 2149 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2150 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2151 :   204 :   268 :                        sp->h_tolerance);
 2152 :   205 :   270 :                        sp->log_max_h_change);
 2153 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 2154 :   207 :   274 :                        sp->max_smoothing_iterations);
 2155 :   209 :    72 :   sp->group_data.mass = 0.f;
 2156 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 2157 :   212 :    43 :   if (sp->birth_time == -1.) {
 2158 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2159 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2160 :   215 :    59 :     star_age = time - sp->birth_time;
 2161 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2162 :   217 :    88 :     return time - (double)sp->birth_time;
 2163 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 2164 :   219 :   103 :   sp->num_ngb_density = 0;
 2165 :   220 :   106 :   sp->density.wcount = 0.f;
 2166 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 2167 :   222 :   110 :   sp->N_density = 0;
 2168 :   223 :   111 :   sp->N_density_exact = 0;
 2169 :   224 :   112 :   sp->rho = 0.f;
 2170 :   225 :   113 :   sp->rho_exact = 0.f;
 2171 :   226 :   114 :   sp->n = 0.f;
 2172 :   227 :   115 :   sp->n_exact = 0.f;
 2173 :   228 :   116 :   sp->inhibited_exact = 0;
 2174 :   229 :   137 :   sp->time_bin = 0;
 2175 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2176 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2177 :   232 :   144 :     sp->birth_temperature =
 2178 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 2179 :   234 :   150 :     sp->last_enrichment_time = time;
 2180 :   235 :   155 :   sp->group_data.mass = 0.f;
 2181 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 2182 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 2183 :   238 :   208 :   const float h = sp->h;
 2184 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 2185 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2186 :   241 :   218 :   sp->rho *= h_inv_dim;
 2187 :   242 :   219 :   sp->n *= h_inv_dim;
 2188 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 2189 :   244 :   239 :   sp->density.wcount = 0.f;
 2190 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 2191 :   246 :   300 :   const float mass = sp->mass_init;
 2192 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2193 :   248 :   306 :     age = time - sp->birth_time;
 2194 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2195 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2196 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2197 :   253 :    71 :     ret[0] = sp->x[0];
 2198 :   254 :    72 :     ret[1] = sp->x[1];
 2199 :   255 :    73 :     ret[2] = sp->x[2];
 2200 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2201 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2202 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 2203 :   259 :   128 :   if (sp->gpart != NULL)
 2204 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2205 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 2206 :   262 :   252 :   sp->h_tolerance =
 2207 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2208 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2209 :   265 :   258 :   sp->delta_neighbours =
 2210 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2211 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2212 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 2213 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2214 :   270 :   275 :   sp->overwrite_birth_time =
 2215 :   271 :   277 :   sp->overwrite_birth_density =
 2216 :   272 :   279 :   sp->overwrite_birth_temperature =
 2217 :   273 :   283 :   if (sp->overwrite_birth_time) {
 2218 :   274 :   284 :     sp->spart_first_init_birth_time =
 2219 :   275 :   289 :   if (sp->overwrite_birth_density) {
 2220 :   276 :   290 :     sp->spart_first_init_birth_density =
 2221 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 2222 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 2223 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 2224 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 2225 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 2226 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 2227 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 2228 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 2229 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 2230 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 2231 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 2232 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 2233 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 2234 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 2235 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 2236 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2237 :   293 :   403 :           sp->max_smoothing_iterations);
 2238 :   294 :   405 :   if (sp->overwrite_birth_time)
 2239 :   295 :   407 :             sp->spart_first_init_birth_time);
 2240 :   296 :   410 :           sp->age_threshold_unlimited);
 2241 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 2242 :   298 :   413 :           sp->max_time_step_young);
 2243 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 2244 :   300 :   423 :                        sp->target_neighbours);
 2245 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2246 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2247 :   303 :   427 :                        sp->h_tolerance);
 2248 :   304 :   429 :                        sp->log_max_h_change);
 2249 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 2250 :   306 :   433 :                        sp->max_smoothing_iterations);
 2251 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 2252 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 2253 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 2254 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2255 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 2256 :   313 :     4 :    81 :   sp->time_bin = 0;
 2257 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 2258 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 2259 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 2260 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 2261 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 2262 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 2263 :   320 :    11 :   152 :   const float h = sp->h;
 2264 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 2265 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2266 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 2267 :   324 :    15 :   178 :   const float h = sp->h;
 2268 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 2269 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 2273 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2274 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2275 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2276 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 2277 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 2278 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 2279 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2280 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2281 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 2282 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 2283 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2284 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 2285 :   342 :    35 :   199 :   sp->h_tolerance =
 2286 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2287 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2288 :   345 :    38 :   205 :   sp->delta_neighbours =
 2289 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2290 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2291 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 2292 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2293 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 2294 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 2295 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2296 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 2297 :   354 :    47 :   252 :                        sp->target_neighbours);
 2298 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2299 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2300 :   357 :    50 :   256 :                        sp->h_tolerance);
 2301 :   358 :    51 :   258 :                        sp->log_max_h_change);
 2302 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 2303 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 2304 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 2305 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2306 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2307 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 2308 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2309 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 2310 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 2311 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 2312 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 2313 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 2314 :   371 :    65 :   110 :   sp->N_density = 0;
 2315 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 2316 :   373 :    67 :   112 :   sp->rho = 0.f;
 2317 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 2318 :   375 :    69 :   114 :   sp->n = 0.f;
 2319 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 2320 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 2321 :   378 :    72 :   137 :   sp->time_bin = 0;
 2322 :   379 :    73 :   138 :   sp->f_E = -1.f;
 2323 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 2324 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 2325 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 2326 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2327 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2328 :   385 :    79 :   148 :     sp->birth_temperature =
 2329 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 2330 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 2331 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 2332 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 2333 :   390 :    84 :   211 :   const float h = sp->h;
 2334 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 2335 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2336 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 2337 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 2338 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 2339 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 2340 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 2341 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 2342 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2343 :   400 :    94 :   309 :     age = time - sp->birth_time;
 2344 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2345 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2346 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2347 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 2348 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 2349 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 2350 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2351 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2352 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 2353 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 2354 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2355 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 2356 :   413 :   108 :   253 :   sp->h_tolerance =
 2357 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2358 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2359 :   416 :   111 :   259 :   sp->delta_neighbours =
 2360 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2361 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2362 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 2363 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2364 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 2365 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 2366 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 2367 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 2368 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 2369 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 2370 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 2371 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 2372 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 2373 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 2374 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 2375 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 2376 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 2377 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 2378 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 2379 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 2380 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 2381 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 2382 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 2383 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 2384 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 2385 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 2386 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2387 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 2388 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 2389 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 2390 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 2391 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 2392 :   449 :   144 :   414 :           sp->max_time_step_young);
 2393 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 2394 :   451 :   146 :   424 :                        sp->target_neighbours);
 2395 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2396 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2397 :   454 :   149 :   428 :                        sp->h_tolerance);
 2398 :   455 :   150 :   430 :                        sp->log_max_h_change);
 2399 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 2400 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 2401 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 2402 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 2403 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 2404 :   462 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2405 :   463 :     3 :    61 :     return time - (double)sp->birth_time;
 2406 :   464 :     4 :    81 :   sp->time_bin = 0;
 2407 :   465 :     5 :    84 :   sp->group_data.mass = 0.f;
 2408 :   466 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 2409 :   467 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 2410 :   468 :     8 :   100 :   sp->num_ngb_density = 0;
 2411 :   469 :     9 :   103 :   sp->density.wcount = 0.f;
 2412 :   470 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 2413 :   471 :    11 :   152 :   const float h = sp->h;
 2414 :   472 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 2415 :   473 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2416 :   474 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 2417 :   475 :    15 :   178 :   const float h = sp->h;
 2418 :   476 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 2419 :   477 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 2423 :   481 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2424 :   482 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2425 :   483 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2426 :   484 :    26 :    62 :     ret[0] = sp->x[0];
 2427 :   485 :    27 :    63 :     ret[1] = sp->x[1];
 2428 :   486 :    28 :    64 :     ret[2] = sp->x[2];
 2429 :   487 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2430 :   488 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2431 :   489 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 2432 :   490 :    32 :   111 :   if (sp->gpart != NULL)
 2433 :   491 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2434 :   492 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 2435 :   493 :    35 :   199 :   sp->h_tolerance =
 2436 :   494 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2437 :   495 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2438 :   496 :    38 :   205 :   sp->delta_neighbours =
 2439 :   497 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2440 :   498 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2441 :   499 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 2442 :   500 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2443 :   501 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 2444 :   502 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 2445 :   503 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2446 :   504 :    46 :   242 :           sp->max_smoothing_iterations);
 2447 :   505 :    47 :   252 :                        sp->target_neighbours);
 2448 :   506 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2449 :   507 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2450 :   508 :    50 :   256 :                        sp->h_tolerance);
 2451 :   509 :    51 :   258 :                        sp->log_max_h_change);
 2452 :   510 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 2453 :   511 :    53 :   262 :                        sp->max_smoothing_iterations);
 2454 :   512 :    55 :    43 :   if (sp->birth_time == -1.) {
 2455 :   513 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2456 :   514 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2457 :   515 :    58 :    59 :     star_age = time - sp->birth_time;
 2458 :   516 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2459 :   517 :    60 :    88 :     return time - (double)sp->birth_time;
 2460 :   518 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 2461 :   519 :    62 :   103 :   sp->num_ngb_density = 0;
 2462 :   520 :    63 :   106 :   sp->density.wcount = 0.f;
 2463 :   521 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 2464 :   522 :    65 :   110 :   sp->N_density = 0;
 2465 :   523 :    66 :   111 :   sp->N_density_exact = 0;
 2466 :   524 :    67 :   112 :   sp->rho = 0.f;
 2467 :   525 :    68 :   113 :   sp->rho_exact = 0.f;
 2468 :   526 :    69 :   114 :   sp->n = 0.f;
 2469 :   527 :    70 :   115 :   sp->n_exact = 0.f;
 2470 :   528 :    71 :   116 :   sp->inhibited_exact = 0;
 2471 :   529 :    72 :   137 :   sp->time_bin = 0;
 2472 :   530 :    73 :   138 :   sp->f_E = -1.f;
 2473 :   531 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 2474 :   532 :    75 :   140 :   sp->number_of_heating_events = 0.;
 2475 :   533 :    76 :   141 :   sp->number_of_SNII_events = 0;
 2476 :   534 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2477 :   535 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2478 :   536 :    79 :   148 :     sp->birth_temperature =
 2479 :   537 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 2480 :   538 :    81 :   154 :     sp->last_enrichment_time = time;
 2481 :   539 :    82 :   159 :   sp->group_data.mass = 0.f;
 2482 :   540 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 2483 :   541 :    84 :   211 :   const float h = sp->h;
 2484 :   542 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 2485 :   543 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2486 :   544 :    87 :   221 :   sp->rho *= h_inv_dim;
 2487 :   545 :    88 :   222 :   sp->n *= h_inv_dim;
 2488 :   546 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 2489 :   547 :    90 :   242 :   sp->density.wcount = 0.f;
 2490 :   548 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 2491 :   549 :    92 :   303 :   const float mass = sp->mass_init;
 2492 :   550 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2493 :   551 :    94 :   309 :     age = time - sp->birth_time;
 2494 :   552 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2495 :   553 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2496 :   554 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2497 :   555 :    99 :    71 :     ret[0] = sp->x[0];
 2498 :   556 :   100 :    72 :     ret[1] = sp->x[1];
 2499 :   557 :   101 :    73 :     ret[2] = sp->x[2];
 2500 :   558 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2501 :   559 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2502 :   560 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 2503 :   561 :   105 :   128 :   if (sp->gpart != NULL)
 2504 :   562 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2505 :   563 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 2506 :   564 :   108 :   253 :   sp->h_tolerance =
 2507 :   565 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2508 :   566 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2509 :   567 :   111 :   259 :   sp->delta_neighbours =
 2510 :   568 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2511 :   569 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2512 :   570 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 2513 :   571 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2514 :   572 :   116 :   276 :   sp->overwrite_birth_time =
 2515 :   573 :   117 :   278 :   sp->overwrite_birth_density =
 2516 :   574 :   118 :   280 :   sp->overwrite_birth_temperature =
 2517 :   575 :   119 :   284 :   if (sp->overwrite_birth_time) {
 2518 :   576 :   120 :   285 :     sp->spart_first_init_birth_time =
 2519 :   577 :   121 :   290 :   if (sp->overwrite_birth_density) {
 2520 :   578 :   122 :   291 :     sp->spart_first_init_birth_density =
 2521 :   579 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 2522 :   580 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 2523 :   581 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 2524 :   582 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 2525 :   583 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 2526 :   584 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 2527 :   585 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 2528 :   586 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 2529 :   587 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 2530 :   588 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 2531 :   589 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 2532 :   590 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 2533 :   591 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 2534 :   592 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 2535 :   593 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 2536 :   594 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2537 :   595 :   139 :   404 :           sp->max_smoothing_iterations);
 2538 :   596 :   140 :   406 :   if (sp->overwrite_birth_time)
 2539 :   597 :   141 :   408 :             sp->spart_first_init_birth_time);
 2540 :   598 :   142 :   411 :           sp->age_threshold_unlimited);
 2541 :   599 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 2542 :   600 :   144 :   414 :           sp->max_time_step_young);
 2543 :   601 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 2544 :   602 :   146 :   424 :                        sp->target_neighbours);
 2545 :   603 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2546 :   604 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2547 :   605 :   149 :   428 :                        sp->h_tolerance);
 2548 :   606 :   150 :   430 :                        sp->log_max_h_change);
 2549 :   607 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 2550 :   608 :   152 :   434 :                        sp->max_smoothing_iterations);
 2551 :   609 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 2552 :   610 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 2553 :   611 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 2554 :   612 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 2555 :   613 :   158 :    62 :     return time - (double)sp->birth_time;
 2556 :   614 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 2557 :   615 :   160 :    77 :   sp->num_ngb_density = 0;
 2558 :   616 :   161 :    80 :   sp->density.wcount = 0.f;
 2559 :   617 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 2560 :   618 :   163 :   100 :   sp->time_bin = 0;
 2561 :   619 :   164 :   105 :   sp->group_data.mass = 0.f;
 2562 :   620 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 2563 :   621 :   166 :   157 :   const float h = sp->h;
 2564 :   622 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 2565 :   623 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2566 :   624 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 2567 :   625 :   170 :   183 :   sp->density.wcount = 0.f;
 2568 :   626 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 2572 :   630 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2573 :   631 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2574 :   632 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2575 :   633 :   180 :    64 :     ret[0] = sp->x[0];
 2576 :   634 :   181 :    65 :     ret[1] = sp->x[1];
 2577 :   635 :   182 :    66 :     ret[2] = sp->x[2];
 2578 :   636 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2579 :   637 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2580 :   638 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 2581 :   639 :   186 :   113 :   if (sp->gpart != NULL)
 2582 :   640 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2583 :   641 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 2584 :   642 :   189 :   211 :   sp->h_tolerance =
 2585 :   643 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2586 :   644 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2587 :   645 :   192 :   217 :   sp->delta_neighbours =
 2588 :   646 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2589 :   647 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2590 :   648 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 2591 :   649 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2592 :   650 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 2593 :   651 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 2594 :   652 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2595 :   653 :   200 :   254 :           sp->max_smoothing_iterations);
 2596 :   654 :   201 :   264 :                        sp->target_neighbours);
 2597 :   655 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2598 :   656 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2599 :   657 :   204 :   268 :                        sp->h_tolerance);
 2600 :   658 :   205 :   270 :                        sp->log_max_h_change);
 2601 :   659 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 2602 :   660 :   207 :   274 :                        sp->max_smoothing_iterations);
 2603 :   661 :   209 :    72 :   sp->group_data.mass = 0.f;
 2604 :   662 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 2605 :   663 :   212 :    43 :   if (sp->birth_time == -1.) {
 2606 :   664 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2607 :   665 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2608 :   666 :   215 :    59 :     star_age = time - sp->birth_time;
 2609 :   667 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2610 :   668 :   217 :    88 :     return time - (double)sp->birth_time;
 2611 :   669 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 2612 :   670 :   219 :   103 :   sp->num_ngb_density = 0;
 2613 :   671 :   220 :   106 :   sp->density.wcount = 0.f;
 2614 :   672 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 2615 :   673 :   222 :   110 :   sp->N_density = 0;
 2616 :   674 :   223 :   111 :   sp->N_density_exact = 0;
 2617 :   675 :   224 :   112 :   sp->rho = 0.f;
 2618 :   676 :   225 :   113 :   sp->rho_exact = 0.f;
 2619 :   677 :   226 :   114 :   sp->n = 0.f;
 2620 :   678 :   227 :   115 :   sp->n_exact = 0.f;
 2621 :   679 :   228 :   116 :   sp->inhibited_exact = 0;
 2622 :   680 :   229 :   137 :   sp->time_bin = 0;
 2623 :   681 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2624 :   682 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2625 :   683 :   232 :   144 :     sp->birth_temperature =
 2626 :   684 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 2627 :   685 :   234 :   150 :     sp->last_enrichment_time = time;
 2628 :   686 :   235 :   155 :   sp->group_data.mass = 0.f;
 2629 :   687 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 2630 :   688 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 2631 :   689 :   238 :   208 :   const float h = sp->h;
 2632 :   690 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 2633 :   691 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2634 :   692 :   241 :   218 :   sp->rho *= h_inv_dim;
 2635 :   693 :   242 :   219 :   sp->n *= h_inv_dim;
 2636 :   694 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 2637 :   695 :   244 :   239 :   sp->density.wcount = 0.f;
 2638 :   696 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 2639 :   697 :   246 :   300 :   const float mass = sp->mass_init;
 2640 :   698 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2641 :   699 :   248 :   306 :     age = time - sp->birth_time;
 2642 :   700 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2643 :   701 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2644 :   702 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2645 :   703 :   253 :    71 :     ret[0] = sp->x[0];
 2646 :   704 :   254 :    72 :     ret[1] = sp->x[1];
 2647 :   705 :   255 :    73 :     ret[2] = sp->x[2];
 2648 :   706 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2649 :   707 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2650 :   708 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 2651 :   709 :   259 :   128 :   if (sp->gpart != NULL)
 2652 :   710 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2653 :   711 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 2654 :   712 :   262 :   252 :   sp->h_tolerance =
 2655 :   713 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2656 :   714 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2657 :   715 :   265 :   258 :   sp->delta_neighbours =
 2658 :   716 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2659 :   717 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2660 :   718 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 2661 :   719 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2662 :   720 :   270 :   275 :   sp->overwrite_birth_time =
 2663 :   721 :   271 :   277 :   sp->overwrite_birth_density =
 2664 :   722 :   272 :   279 :   sp->overwrite_birth_temperature =
 2665 :   723 :   273 :   283 :   if (sp->overwrite_birth_time) {
 2666 :   724 :   274 :   284 :     sp->spart_first_init_birth_time =
 2667 :   725 :   275 :   289 :   if (sp->overwrite_birth_density) {
 2668 :   726 :   276 :   290 :     sp->spart_first_init_birth_density =
 2669 :   727 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 2670 :   728 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 2671 :   729 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 2672 :   730 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 2673 :   731 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 2674 :   732 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 2675 :   733 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 2676 :   734 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 2677 :   735 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 2678 :   736 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 2679 :   737 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 2680 :   738 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 2681 :   739 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 2682 :   740 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 2683 :   741 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 2684 :   742 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2685 :   743 :   293 :   403 :           sp->max_smoothing_iterations);
 2686 :   744 :   294 :   405 :   if (sp->overwrite_birth_time)
 2687 :   745 :   295 :   407 :             sp->spart_first_init_birth_time);
 2688 :   746 :   296 :   410 :           sp->age_threshold_unlimited);
 2689 :   747 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 2690 :   748 :   298 :   413 :           sp->max_time_step_young);
 2691 :   749 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 2692 :   750 :   300 :   423 :                        sp->target_neighbours);
 2693 :   751 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2694 :   752 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2695 :   753 :   303 :   427 :                        sp->h_tolerance);
 2696 :   754 :   304 :   429 :                        sp->log_max_h_change);
 2697 :   755 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 2698 :   756 :   306 :   433 :                        sp->max_smoothing_iterations);
 2699 :   757 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 2700 :   758 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 2701 :   759 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 2702 :   760 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2703 :   761 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 2704 :   762 :   313 :     4 :    81 :   sp->time_bin = 0;
 2705 :   763 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 2706 :   764 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 2707 :   765 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 2708 :   766 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 2709 :   767 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 2710 :   768 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 2711 :   769 :   320 :    11 :   152 :   const float h = sp->h;
 2712 :   770 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 2713 :   771 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2714 :   772 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 2715 :   773 :   324 :    15 :   178 :   const float h = sp->h;
 2716 :   774 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 2717 :   775 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 2721 :   779 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2722 :   780 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2723 :   781 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2724 :   782 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 2725 :   783 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 2726 :   784 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 2727 :   785 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2728 :   786 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2729 :   787 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 2730 :   788 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 2731 :   789 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2732 :   790 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 2733 :   791 :   342 :    35 :   199 :   sp->h_tolerance =
 2734 :   792 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2735 :   793 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2736 :   794 :   345 :    38 :   205 :   sp->delta_neighbours =
 2737 :   795 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2738 :   796 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2739 :   797 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 2740 :   798 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2741 :   799 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 2742 :   800 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 2743 :   801 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2744 :   802 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 2745 :   803 :   354 :    47 :   252 :                        sp->target_neighbours);
 2746 :   804 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2747 :   805 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2748 :   806 :   357 :    50 :   256 :                        sp->h_tolerance);
 2749 :   807 :   358 :    51 :   258 :                        sp->log_max_h_change);
 2750 :   808 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 2751 :   809 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 2752 :   810 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 2753 :   811 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2754 :   812 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2755 :   813 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 2756 :   814 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2757 :   815 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 2758 :   816 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 2759 :   817 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 2760 :   818 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 2761 :   819 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 2762 :   820 :   371 :    65 :   110 :   sp->N_density = 0;
 2763 :   821 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 2764 :   822 :   373 :    67 :   112 :   sp->rho = 0.f;
 2765 :   823 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 2766 :   824 :   375 :    69 :   114 :   sp->n = 0.f;
 2767 :   825 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 2768 :   826 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 2769 :   827 :   378 :    72 :   137 :   sp->time_bin = 0;
 2770 :   828 :   379 :    73 :   138 :   sp->f_E = -1.f;
 2771 :   829 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 2772 :   830 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 2773 :   831 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 2774 :   832 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2775 :   833 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2776 :   834 :   385 :    79 :   148 :     sp->birth_temperature =
 2777 :   835 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 2778 :   836 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 2779 :   837 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 2780 :   838 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 2781 :   839 :   390 :    84 :   211 :   const float h = sp->h;
 2782 :   840 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 2783 :   841 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2784 :   842 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 2785 :   843 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 2786 :   844 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 2787 :   845 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 2788 :   846 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 2789 :   847 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 2790 :   848 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2791 :   849 :   400 :    94 :   309 :     age = time - sp->birth_time;
 2792 :   850 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2793 :   851 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2794 :   852 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2795 :   853 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 2796 :   854 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 2797 :   855 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 2798 :   856 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2799 :   857 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2800 :   858 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 2801 :   859 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 2802 :   860 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2803 :   861 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 2804 :   862 :   413 :   108 :   253 :   sp->h_tolerance =
 2805 :   863 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2806 :   864 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2807 :   865 :   416 :   111 :   259 :   sp->delta_neighbours =
 2808 :   866 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2809 :   867 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2810 :   868 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 2811 :   869 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2812 :   870 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 2813 :   871 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 2814 :   872 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 2815 :   873 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 2816 :   874 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 2817 :   875 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 2818 :   876 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 2819 :   877 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 2820 :   878 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 2821 :   879 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 2822 :   880 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 2823 :   881 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 2824 :   882 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 2825 :   883 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 2826 :   884 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 2827 :   885 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 2828 :   886 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 2829 :   887 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 2830 :   888 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 2831 :   889 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 2832 :   890 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 2833 :   891 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 2834 :   892 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2835 :   893 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 2836 :   894 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 2837 :   895 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 2838 :   896 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 2839 :   897 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 2840 :   898 :   449 :   144 :   414 :           sp->max_time_step_young);
 2841 :   899 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 2842 :   900 :   451 :   146 :   424 :                        sp->target_neighbours);
 2843 :   901 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2844 :   902 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2845 :   903 :   454 :   149 :   428 :                        sp->h_tolerance);
 2846 :   904 :   455 :   150 :   430 :                        sp->log_max_h_change);
 2847 :   905 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 2848 :   906 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 2849 :   907 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 2850 :   908 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 2851 :   909 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 2853 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2854 :     3 :    61 :     return time - (double)sp->birth_time;
 2855 :     4 :    81 :   sp->time_bin = 0;
 2856 :     5 :    84 :   sp->group_data.mass = 0.f;
 2857 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 2858 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 2859 :     8 :   100 :   sp->num_ngb_density = 0;
 2860 :     9 :   103 :   sp->density.wcount = 0.f;
 2861 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 2862 :    11 :   152 :   const float h = sp->h;
 2863 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 2864 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2865 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 2866 :    15 :   178 :   const float h = sp->h;
 2867 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 2868 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 2872 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2873 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2874 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2875 :    26 :    62 :     ret[0] = sp->x[0];
 2876 :    27 :    63 :     ret[1] = sp->x[1];
 2877 :    28 :    64 :     ret[2] = sp->x[2];
 2878 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2879 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2880 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 2881 :    32 :   111 :   if (sp->gpart != NULL)
 2882 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2883 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 2884 :    35 :   199 :   sp->h_tolerance =
 2885 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2886 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2887 :    38 :   205 :   sp->delta_neighbours =
 2888 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2889 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2890 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 2891 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2892 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 2893 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 2894 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2895 :    46 :   242 :           sp->max_smoothing_iterations);
 2896 :    47 :   252 :                        sp->target_neighbours);
 2897 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2898 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2899 :    50 :   256 :                        sp->h_tolerance);
 2900 :    51 :   258 :                        sp->log_max_h_change);
 2901 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 2902 :    53 :   262 :                        sp->max_smoothing_iterations);
 2903 :    55 :    43 :   if (sp->birth_time == -1.) {
 2904 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2905 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2906 :    58 :    59 :     star_age = time - sp->birth_time;
 2907 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2908 :    60 :    88 :     return time - (double)sp->birth_time;
 2909 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 2910 :    62 :   103 :   sp->num_ngb_density = 0;
 2911 :    63 :   106 :   sp->density.wcount = 0.f;
 2912 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 2913 :    65 :   110 :   sp->N_density = 0;
 2914 :    66 :   111 :   sp->N_density_exact = 0;
 2915 :    67 :   112 :   sp->rho = 0.f;
 2916 :    68 :   113 :   sp->rho_exact = 0.f;
 2917 :    69 :   114 :   sp->n = 0.f;
 2918 :    70 :   115 :   sp->n_exact = 0.f;
 2919 :    71 :   116 :   sp->inhibited_exact = 0;
 2920 :    72 :   137 :   sp->time_bin = 0;
 2921 :    73 :   138 :   sp->f_E = -1.f;
 2922 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 2923 :    75 :   140 :   sp->number_of_heating_events = 0.;
 2924 :    76 :   141 :   sp->number_of_SNII_events = 0;
 2925 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2926 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2927 :    79 :   148 :     sp->birth_temperature =
 2928 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 2929 :    81 :   154 :     sp->last_enrichment_time = time;
 2930 :    82 :   159 :   sp->group_data.mass = 0.f;
 2931 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 2932 :    84 :   211 :   const float h = sp->h;
 2933 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 2934 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2935 :    87 :   221 :   sp->rho *= h_inv_dim;
 2936 :    88 :   222 :   sp->n *= h_inv_dim;
 2937 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 2938 :    90 :   242 :   sp->density.wcount = 0.f;
 2939 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 2940 :    92 :   303 :   const float mass = sp->mass_init;
 2941 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2942 :    94 :   309 :     age = time - sp->birth_time;
 2943 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2944 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2945 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2946 :    99 :    71 :     ret[0] = sp->x[0];
 2947 :   100 :    72 :     ret[1] = sp->x[1];
 2948 :   101 :    73 :     ret[2] = sp->x[2];
 2949 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2950 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2951 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 2952 :   105 :   128 :   if (sp->gpart != NULL)
 2953 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2954 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 2955 :   108 :   253 :   sp->h_tolerance =
 2956 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2957 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2958 :   111 :   259 :   sp->delta_neighbours =
 2959 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2960 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2961 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 2962 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2963 :   116 :   276 :   sp->overwrite_birth_time =
 2964 :   117 :   278 :   sp->overwrite_birth_density =
 2965 :   118 :   280 :   sp->overwrite_birth_temperature =
 2966 :   119 :   284 :   if (sp->overwrite_birth_time) {
 2967 :   120 :   285 :     sp->spart_first_init_birth_time =
 2968 :   121 :   290 :   if (sp->overwrite_birth_density) {
 2969 :   122 :   291 :     sp->spart_first_init_birth_density =
 2970 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 2971 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 2972 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 2973 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 2974 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 2975 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 2976 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 2977 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 2978 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 2979 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 2980 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 2981 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 2982 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 2983 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 2984 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 2985 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2986 :   139 :   404 :           sp->max_smoothing_iterations);
 2987 :   140 :   406 :   if (sp->overwrite_birth_time)
 2988 :   141 :   408 :             sp->spart_first_init_birth_time);
 2989 :   142 :   411 :           sp->age_threshold_unlimited);
 2990 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 2991 :   144 :   414 :           sp->max_time_step_young);
 2992 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 2993 :   146 :   424 :                        sp->target_neighbours);
 2994 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2995 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2996 :   149 :   428 :                        sp->h_tolerance);
 2997 :   150 :   430 :                        sp->log_max_h_change);
 2998 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 2999 :   152 :   434 :                        sp->max_smoothing_iterations);
 3000 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 3001 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 3002 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 3003 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 3004 :   158 :    62 :     return time - (double)sp->birth_time;
 3005 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 3006 :   160 :    77 :   sp->num_ngb_density = 0;
 3007 :   161 :    80 :   sp->density.wcount = 0.f;
 3008 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 3009 :   163 :   100 :   sp->time_bin = 0;
 3010 :   164 :   105 :   sp->group_data.mass = 0.f;
 3011 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 3012 :   166 :   157 :   const float h = sp->h;
 3013 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 3014 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3015 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 3016 :   170 :   183 :   sp->density.wcount = 0.f;
 3017 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3021 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3022 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3023 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3024 :   180 :    64 :     ret[0] = sp->x[0];
 3025 :   181 :    65 :     ret[1] = sp->x[1];
 3026 :   182 :    66 :     ret[2] = sp->x[2];
 3027 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3028 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3029 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 3030 :   186 :   113 :   if (sp->gpart != NULL)
 3031 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3032 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 3033 :   189 :   211 :   sp->h_tolerance =
 3034 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3035 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3036 :   192 :   217 :   sp->delta_neighbours =
 3037 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3038 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3039 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 3040 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3041 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 3042 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 3043 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3044 :   200 :   254 :           sp->max_smoothing_iterations);
 3045 :   201 :   264 :                        sp->target_neighbours);
 3046 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3047 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3048 :   204 :   268 :                        sp->h_tolerance);
 3049 :   205 :   270 :                        sp->log_max_h_change);
 3050 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 3051 :   207 :   274 :                        sp->max_smoothing_iterations);
 3052 :   209 :    72 :   sp->group_data.mass = 0.f;
 3053 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 3054 :   212 :    43 :   if (sp->birth_time == -1.) {
 3055 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 3056 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 3057 :   215 :    59 :     star_age = time - sp->birth_time;
 3058 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3059 :   217 :    88 :     return time - (double)sp->birth_time;
 3060 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 3061 :   219 :   103 :   sp->num_ngb_density = 0;
 3062 :   220 :   106 :   sp->density.wcount = 0.f;
 3063 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 3064 :   222 :   110 :   sp->N_density = 0;
 3065 :   223 :   111 :   sp->N_density_exact = 0;
 3066 :   224 :   112 :   sp->rho = 0.f;
 3067 :   225 :   113 :   sp->rho_exact = 0.f;
 3068 :   226 :   114 :   sp->n = 0.f;
 3069 :   227 :   115 :   sp->n_exact = 0.f;
 3070 :   228 :   116 :   sp->inhibited_exact = 0;
 3071 :   229 :   137 :   sp->time_bin = 0;
 3072 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 3073 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 3074 :   232 :   144 :     sp->birth_temperature =
 3075 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 3076 :   234 :   150 :     sp->last_enrichment_time = time;
 3077 :   235 :   155 :   sp->group_data.mass = 0.f;
 3078 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 3079 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 3080 :   238 :   208 :   const float h = sp->h;
 3081 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 3082 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3083 :   241 :   218 :   sp->rho *= h_inv_dim;
 3084 :   242 :   219 :   sp->n *= h_inv_dim;
 3085 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 3086 :   244 :   239 :   sp->density.wcount = 0.f;
 3087 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 3088 :   246 :   300 :   const float mass = sp->mass_init;
 3089 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 3090 :   248 :   306 :     age = time - sp->birth_time;
 3091 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3092 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3093 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3094 :   253 :    71 :     ret[0] = sp->x[0];
 3095 :   254 :    72 :     ret[1] = sp->x[1];
 3096 :   255 :    73 :     ret[2] = sp->x[2];
 3097 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3098 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3099 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 3100 :   259 :   128 :   if (sp->gpart != NULL)
 3101 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3102 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 3103 :   262 :   252 :   sp->h_tolerance =
 3104 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3105 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3106 :   265 :   258 :   sp->delta_neighbours =
 3107 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3108 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3109 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 3110 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3111 :   270 :   275 :   sp->overwrite_birth_time =
 3112 :   271 :   277 :   sp->overwrite_birth_density =
 3113 :   272 :   279 :   sp->overwrite_birth_temperature =
 3114 :   273 :   283 :   if (sp->overwrite_birth_time) {
 3115 :   274 :   284 :     sp->spart_first_init_birth_time =
 3116 :   275 :   289 :   if (sp->overwrite_birth_density) {
 3117 :   276 :   290 :     sp->spart_first_init_birth_density =
 3118 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 3119 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 3120 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3121 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3122 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3123 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3124 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3125 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3126 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3127 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 3128 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3129 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3130 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3131 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 3132 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 3133 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3134 :   293 :   403 :           sp->max_smoothing_iterations);
 3135 :   294 :   405 :   if (sp->overwrite_birth_time)
 3136 :   295 :   407 :             sp->spart_first_init_birth_time);
 3137 :   296 :   410 :           sp->age_threshold_unlimited);
 3138 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3139 :   298 :   413 :           sp->max_time_step_young);
 3140 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3141 :   300 :   423 :                        sp->target_neighbours);
 3142 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3143 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3144 :   303 :   427 :                        sp->h_tolerance);
 3145 :   304 :   429 :                        sp->log_max_h_change);
 3146 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 3147 :   306 :   433 :                        sp->max_smoothing_iterations);
 3148 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 3149 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 3150 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 3151 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3152 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 3153 :   313 :     4 :    81 :   sp->time_bin = 0;
 3154 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 3155 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 3156 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 3157 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 3158 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 3159 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 3160 :   320 :    11 :   152 :   const float h = sp->h;
 3161 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 3162 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3163 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 3164 :   324 :    15 :   178 :   const float h = sp->h;
 3165 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 3166 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3170 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3171 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3172 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3173 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 3174 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 3175 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 3176 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3177 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3178 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 3179 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 3180 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3181 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 3182 :   342 :    35 :   199 :   sp->h_tolerance =
 3183 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3184 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3185 :   345 :    38 :   205 :   sp->delta_neighbours =
 3186 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3187 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3188 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 3189 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3190 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 3191 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 3192 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3193 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 3194 :   354 :    47 :   252 :                        sp->target_neighbours);
 3195 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3196 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3197 :   357 :    50 :   256 :                        sp->h_tolerance);
 3198 :   358 :    51 :   258 :                        sp->log_max_h_change);
 3199 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 3200 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 3201 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 3202 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 3203 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 3204 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 3205 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3206 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 3207 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 3208 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 3209 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 3210 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 3211 :   371 :    65 :   110 :   sp->N_density = 0;
 3212 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 3213 :   373 :    67 :   112 :   sp->rho = 0.f;
 3214 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 3215 :   375 :    69 :   114 :   sp->n = 0.f;
 3216 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 3217 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 3218 :   378 :    72 :   137 :   sp->time_bin = 0;
 3219 :   379 :    73 :   138 :   sp->f_E = -1.f;
 3220 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 3221 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 3222 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 3223 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 3224 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 3225 :   385 :    79 :   148 :     sp->birth_temperature =
 3226 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 3227 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 3228 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 3229 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 3230 :   390 :    84 :   211 :   const float h = sp->h;
 3231 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 3232 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3233 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 3234 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 3235 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 3236 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 3237 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 3238 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 3239 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 3240 :   400 :    94 :   309 :     age = time - sp->birth_time;
 3241 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3242 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3243 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3244 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 3245 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 3246 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 3247 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3248 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3249 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 3250 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 3251 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3252 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 3253 :   413 :   108 :   253 :   sp->h_tolerance =
 3254 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3255 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3256 :   416 :   111 :   259 :   sp->delta_neighbours =
 3257 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3258 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3259 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 3260 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3261 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 3262 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 3263 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 3264 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 3265 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 3266 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 3267 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 3268 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 3269 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 3270 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3271 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3272 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3273 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3274 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3275 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3276 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3277 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 3278 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3279 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3280 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3281 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 3282 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 3283 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3284 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 3285 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 3286 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 3287 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 3288 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3289 :   449 :   144 :   414 :           sp->max_time_step_young);
 3290 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3291 :   451 :   146 :   424 :                        sp->target_neighbours);
 3292 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3293 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3294 :   454 :   149 :   428 :                        sp->h_tolerance);
 3295 :   455 :   150 :   430 :                        sp->log_max_h_change);
 3296 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 3297 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 3298 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 3299 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 3300 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 3302 :   300 :     const struct gpart *gp = sp->gpart;
 3303 :   303 :     if (sp->time_bin == time_bin_inhibited ||
 3304 :   304 :         sp->time_bin == time_bin_not_created)
 3305 :   313 :     const float m = sp->mass;
 3306 :   388 :     const struct gpart *gp = sp->gpart;
 3307 :   391 :     if (sp->time_bin == time_bin_inhibited ||
 3308 :   392 :         sp->time_bin == time_bin_not_created)
 3309 :   401 :     const float m = sp->mass;
 3311 :   298 :                                            e->physical_constants, sp->gpart);
 3312 :   303 :         sp->gpart, a_hydro, e->gravity_properties, e->cosmology);
 3313 :   321 :     error("spart (id=%lld) wants a time-step (%e) below dt_min (%e)", sp->id,
 3314 :   327 :       new_dt, sp->time_bin, num_time_bins, e->ti_current, e->time_base_inv);
 3316 :   359 :     sp->tracers_data.averaged_SFR[i] = 0.f;
 3318 :    67 :       ret[i] = sp->tracers_data.averaged_SFR[i] /
 3320 :    40 :   if (sp->gpart == NULL)
 3321 :    43 :     const ptrdiff_t offset = sp->gpart - e->s->gparts;
./fof_io.h:
   37 :   ret[0] = sp->gpart->fof_data.group_id;
./ghost_stats.h:
  168 :   const float hi = sp->h;
./kick.h:
  308 :   if (sp->ti_kick != ti_start)
  310 :         "s-particle has not been kicked to the current time sp->ti_kick=%lld, "
  312 :         sp->ti_kick, ti_start, ti_end, sp->id);
  314 :   sp->ti_kick = ti_end;
  326 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  327 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  328 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  331 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  332 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  333 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  336 :   sp->gpart->v_full[0] = sp->v[0];
  337 :   sp->gpart->v_full[1] = sp->v[1];
  338 :   sp->gpart->v_full[2] = sp->v[2];
./lightcone/lightcone_map_types.c:
  104 :       return sp->mass;
  267 :       return sp->mass;
./lightcone/lightcone_particle_io.c:
  499 :   data->id = sp->id;
  504 :       sp->v[0] / a_cross;  // TODO: extrapolate velocities to a_cross?
  505 :   data->vel[1] = sp->v[1] / a_cross;
  506 :   data->vel[2] = sp->v[2] / a_cross;
  507 :   data->mass = sp->mass;
  515 :   data->mass_init = sp->mass_init;
  516 :   data->birth_scale_factor = sp->birth_scale_factor;
  517 :   data->birth_density = sp->birth_density;
  526 :         sp->chemistry_data.smoothed_metal_mass_fraction[i];
  528 :       sp->chemistry_data.metal_mass_fraction_total;
  530 :       sp->chemistry_data.smoothed_metal_mass_fraction_total;
  535 :       sp->tracers_data.last_AGN_injection_scale_factor;
./part.c:
  340 :             "gp->x=[%e %e %e] sp->x=[%e %e %e] diff=[%e %e %e]",
  349 :             "gp->m=%e sp->m=%e",
  383 :             "gp->m=%e sp->m=%e",
./rt/GEAR/rt.h:
   60 :   sp->rt_data.debug_emission_rate_set += 1;
   89 :         emission_this_step, sp->mass, dt, rt_props->photon_number_integral,
   97 :     sp->rt_data.emission_this_step[g] = emission_this_step[g];
  187 :     sp->rt_data.octant_weights[i] = 0.f;
  193 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
  194 :   sp->rt_data.debug_iact_hydro_inject = 0;
  195 :   sp->rt_data.debug_emission_rate_set = 0;
  198 :     sp->rt_data.debug_injected_energy[g] = 0.f;
  201 :     sp->rt_data.emission_this_step[g] = 0.f;
  203 :   sp->rt_data.debug_psi_sum = 0.f;
  218 :     sp->rt_data.emission_this_step[g] = 0.f;
  233 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
  235 :     sp->rt_data.debug_injected_energy_tot[g] = 0.f;
  272 :     sp->rt_data.emission_this_step[g] = 0.f;
./rt/GEAR/rt_debugging.h:
  134 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
  135 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
  137 :     sp->rt_data.debug_iact_hydro_inject = 0;
  138 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
  146 :        * sp->rt_data.emission_this_step: energy we should distribute
  148 :        * sp->rt_data.debug_injected_energy: energy we actually did
  150 :       if (sp->rt_data.debug_injected_energy[g] != 0.f) {
  151 :         float diff = 1.f - sp->rt_data.emission_this_step[g] /
  152 :                                sp->rt_data.debug_injected_energy[g];
  162 :             psi_sum_now += sp->rt_data.octant_weights[i];
  163 :           float diff_weights = 1.f - sp->rt_data.debug_psi_sum / psi_sum_now;
  168 :                 sp->id, g, sp->rt_data.emission_this_step[g],
  169 :                 sp->rt_data.debug_injected_energy[g], diff, diff_weights);
  176 :       sp->rt_data.debug_injected_energy[g] = 0.f;
  179 :       sp->rt_data.emission_this_step[g] = 0.f;
./rt/SPHM1RT/rt.h:
  149 :   sp->rt_data.injection_weight = 0.f;
  151 :     sp->rt_data.emission_reinject[g] = 0.f;
  165 :     sp->rt_data.emission_this_step[g] = 0.f;
./rt/SPHM1RT/rt_stellar_emission_rate.h:
   50 :       sp->rt_data.emission_this_step[g] +=
./rt/debug/rt.h:
   51 :   sp->rt_data.debug_emission_rate_set += 1;
  128 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
  129 :   sp->rt_data.debug_iact_hydro_inject = 0;
  130 :   sp->rt_data.debug_emission_rate_set = 0;
  153 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
./rt/debug/rt_debugging.h:
  164 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
  165 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
  167 :     sp->rt_data.debug_iact_hydro_inject = 0;
  168 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
./runner_doiact_functions_black_holes.h:
  878 :       for (int k = 0; k < csp->count; k++) {
  879 :         const int pid = csp->pairs[k].pid;
  880 :         const int pjd = csp->pairs[k].pjd;
 1027 :     for (int k = 0; k < csp->count; k++) {
 1028 :       const int pid = csp->pairs[k].pid;
 1029 :       const int pjd = csp->pairs[k].pjd;
./runner_doiact_functions_hydro.h:
 2698 :     for (int k = 0; k < csp->count; k++) {
 2699 :       const int pid = csp->pairs[k].pid;
 2700 :       const int pjd = csp->pairs[k].pjd;
 2804 :     for (int k = 0; k < csp->count; k++) {
 2805 :       const int pid = csp->pairs[k].pid;
 2806 :       const int pjd = csp->pairs[k].pjd;
 2935 :       for (int k = 0; k < csp->count; k++) {
 2936 :         const int pid = csp->pairs[k].pid;
 2937 :         const int pjd = csp->pairs[k].pjd;
./runner_doiact_functions_limiter.h:
  749 :     for (int k = 0; k < csp->count; k++) {
  750 :       const int pid = csp->pairs[k].pid;
  751 :       const int pjd = csp->pairs[k].pjd;
./runner_doiact_functions_stars.h:
 1486 :       for (int k = 0; k < csp->count; k++) {
 1487 :         const int pid = csp->pairs[k].pid;
 1488 :         const int pjd = csp->pairs[k].pjd;
 1687 :     for (int k = 0; k < csp->count; k++) {
 1688 :       const int pid = csp->pairs[k].pid;
 1689 :       const int pjd = csp->pairs[k].pjd;
./runner_ghost.c:
  168 :         const float h_old = sp->h;
  175 :         if (sp->density.wcount < 1.e-5 * kernel_root) { /* No neighbours case */
  191 :           const float n_sum = sp->density.wcount * h_old_dim;
  195 :               sp->density.wcount_dh * h_old_dim +
  196 :               hydro_dimension * sp->density.wcount * h_old_dim_minus_one;
  213 :           if (((sp->h >= stars_h_max) && (f < 0.f)) ||
  214 :               ((sp->h <= stars_h_min) && (f > 0.f))) {
  221 :               const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  223 :                   get_integer_time_begin(e->ti_current - 1, sp->time_bin);
  231 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
  272 :                     get_integer_time_begin(e->ti_current - 1, sp->time_bin);
  274 :                     get_integer_timestep(sp->time_bin);
  279 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
  307 :                 num_reruns, sp->id, h_init, h_old, h_new, f, f_prime, n_sum,
  331 :             sp->h = pow_inv_dimension(
  337 :             sp->h = h_new;
  341 :           if (sp->h < stars_h_max && sp->h > stars_h_min) {
  358 :           } else if (sp->h <= stars_h_min) {
  361 :             sp->h = stars_h_min;
  363 :           } else if (sp->h >= stars_h_max) {
  366 :             sp->h = stars_h_max;
  385 :         h_max = max(h_max, sp->h);
  386 :         h_max_active = max(h_max_active, sp->h);
  395 :           const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  397 :               get_integer_time_begin(e->ti_current - 1, sp->time_bin);
  405 :             dt_star = get_timestep(sp->time_bin, e->time_base);
  446 :                 get_integer_time_begin(e->ti_current - 1, sp->time_bin);
  447 :             const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  452 :             dt_star = get_timestep(sp->time_bin, e->time_base);
  526 :         warning("ID: %lld, h: %g, wcount: %g", sp->id, sp->h,
  527 :                 sp->density.wcount);
  551 :       error("Particle has h larger than h_max (id=%lld)", sp->id);
  553 :       error("Active particle has h larger than h_max_active (id=%lld)", sp->id);
./runner_others.c:
  275 :           c->stars.h_max = max(c->stars.h_max, sp->h);
  276 :           c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
  487 :               /* message("We formed a star id=%lld cellID=%lld", sp->id,
  504 :               c->stars.h_max = max(c->stars.h_max, sp->h);
  505 :               c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
  528 :                 csds_part_data_init(&sp->csds_data);
  531 :                 sp->csds_data = xp->csds_data;
 1042 :         if (csds_should_write(&sp->csds_data, e->csds)) {
 1049 :           sp->csds_data.steps_since_last_output += 1;
./runner_sinks.c:
  406 :     for (int k = 0; k < csp->count; k++) {
  407 :       const int pid = csp->pairs[k].pid;
  408 :       const int pjd = csp->pairs[k].pjd;
  588 :           if (sp->id == sink_id) {
  604 :               message("sink %lld removing gas particle %lld", sp->id, p->id);
  752 :           sink_get_sink_swallow_id(&cell_sp->merger_data);
  758 :         if (cell_sp->ti_drift != e->ti_current)
  774 :           if (sp->id == sink_id) {
  778 :             if (sink_get_sink_swallow_id(&sp->merger_data) != -1) {
  781 :               sink_mark_sink_as_not_swallowed(&cell_sp->merger_data);
  798 :             // message("sink %lld swallowing sink particle %lld", sp->id,
  799 :             // cell_sp->id);
  804 :               message("sink %lld removing sink particle %lld", sp->id,
  805 :                       cell_sp->id);
  814 :             sink_mark_sink_as_merged(&cell_sp->merger_data);
  830 :                 cell_sp->id, swallow_id);
./runner_time_integration.c:
  250 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  252 :             get_integer_time_begin(ti_current + 1, sp->time_bin);
  257 :             get_integer_time_end(ti_current + 1, sp->time_bin);
  263 :               ti_end_check, ti_begin, ti_step, sp->time_bin, ti_current);
  524 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  526 :             get_integer_time_begin(ti_current, sp->time_bin) + ti_step / 2;
  543 :         if (sp->ti_drift != sp->ti_kick)
  918 :             get_integer_time_end(ti_current, sp->time_bin);
  924 :         const integertime_t ti_old_step = get_integer_timestep(sp->time_bin);
  930 :           old_time_step_length = get_timestep(sp->time_bin, e->time_base);
  937 :         sp->time_bin = get_time_bin(ti_new_step);
  938 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  973 :               get_integer_time_end(ti_current, sp->time_bin);
  976 :               get_integer_time_begin(ti_current + 1, sp->time_bin);
./scheduler.c:
 1340 :           t->ci = ci->progeny[csp->pairs[0].pid];
 1341 :           t->cj = cj->progeny[csp->pairs[0].pjd];
 1345 :           t->flags = csp->pairs[0].sid;
 1346 :           for (int k = 1; k < csp->count; k++) {
 1349 :                                   csp->pairs[k].sid, 0,
 1350 :                                   ci->progeny[csp->pairs[k].pid],
 1351 :                                   cj->progeny[csp->pairs[k].pjd]),
 1388 :   struct engine *e = sp->e;
./sink/Default/sink_io.h:
   54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   58 :     ret[0] = sp->x[0];
   59 :     ret[1] = sp->x[1];
   60 :     ret[2] = sp->x[2];
   72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   86 :   const struct gpart* gp = sp->gpart;
./sink/Default/sink_properties.h:
   46 :   sp->cut_off_radius =
./sink/GEAR/sink.h:
   54 :   sp->r_cut = sink_props->cut_off_radius;
   55 :   sp->time_bin = 0;
   57 :   sp->number_of_gas_swallows = 0;
   58 :   sp->number_of_direct_gas_swallows = 0;
   59 :   sp->number_of_sink_swallows = 0;
   60 :   sp->number_of_direct_sink_swallows = 0;
   61 :   sp->swallowed_angular_momentum[0] = 0.f;
   62 :   sp->swallowed_angular_momentum[1] = 0.f;
   63 :   sp->swallowed_angular_momentum[2] = 0.f;
   65 :   sink_mark_sink_as_not_swallowed(&sp->merger_data);
   92 :     sp->ids_ngbs_accretion[i] = -1;
   93 :   sp->num_ngb_accretion = 0;
   96 :     sp->ids_ngbs_merger[i] = -1;
   97 :   sp->num_ngb_merger = 0;
  100 :     sp->ids_ngbs_formation[i] = -1;
  101 :   sp->num_ngb_formation = 0;
  247 :   const float sink_mass = sp->mass;
  250 :   sp->mass += gas_mass;
  251 :   sp->gpart->mass += gas_mass;
  254 :   const float dv[3] = {(sp->v[0] - p->v[0]) * cosmo->a_inv,
  255 :                        (sp->v[1] - p->v[1]) * cosmo->a_inv,
  256 :                        (sp->v[2] - p->v[2]) * cosmo->a_inv};
  259 :   const float dx[3] = {(sp->x[0] - p->x[0]) * cosmo->a,
  260 :                        (sp->x[1] - p->x[1]) * cosmo->a,
  261 :                        (sp->x[2] - p->x[2]) * cosmo->a};
  264 :   sp->swallowed_angular_momentum[0] +=
  266 :   sp->swallowed_angular_momentum[1] +=
  268 :   sp->swallowed_angular_momentum[2] +=
  272 :   const float sink_mom[3] = {sink_mass * sp->v[0] + gas_mass * p->v[0],
  273 :                              sink_mass * sp->v[1] + gas_mass * p->v[1],
  274 :                              sink_mass * sp->v[2] + gas_mass * p->v[2]};
  276 :   sp->v[0] = sink_mom[0] / sp->mass;
  277 :   sp->v[1] = sink_mom[1] / sp->mass;
  278 :   sp->v[2] = sink_mom[2] / sp->mass;
  279 :   sp->gpart->v_full[0] = sp->v[0];
  280 :   sp->gpart->v_full[1] = sp->v[1];
  281 :   sp->gpart->v_full[2] = sp->v[2];
  290 :       sp->id, p->id, -dv[0], -dv[1], -dv[2], -dx[0], -dx[1], -dx[2],
  295 :   struct chemistry_sink_data* sp_chem = &sp->chemistry_data;
  300 :   sp->number_of_gas_swallows++;
  301 :   sp->number_of_direct_gas_swallows++;
  407 :   sp->h = sink->r_cut;
./sink/GEAR/sink_io.h:
   54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   58 :     ret[0] = sp->x[0];
   59 :     ret[1] = sp->x[1];
   60 :     ret[2] = sp->x[2];
   72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   86 :   const struct gpart* gp = sp->gpart;
./sink/GEAR/sink_properties.h:
   52 :   sp->cut_off_radius =
   55 :   sp->maximal_temperature =
   58 :   sp->density_threshold =
   62 :   sp->maximal_temperature /=
   65 :   sp->density_threshold /= units_cgs_conversion_factor(us, UNIT_CONV_DENSITY);
   67 :   message("maximal_temperature = %g", sp->maximal_temperature);
   68 :   message("density_threshold  = %g", sp->density_threshold);
./space.c:
  628 :     if (sp->time_bin == time_bin_not_created ||
  629 :         sp->time_bin == time_bin_inhibited)
  633 :     struct gpart *gp = sp->gpart;
  640 :     gp->x[0] = sp->x[0];
  641 :     gp->x[1] = sp->x[1];
  642 :     gp->x[2] = sp->x[2];
  644 :     gp->v_full[0] = sp->v[0];
  645 :     gp->v_full[1] = sp->v[1];
  646 :     gp->v_full[2] = sp->v[2];
  648 :     gp->mass = sp->mass;
./space_cell_index.c:
  357 :     double old_pos_x = sp->x[0];
  358 :     double old_pos_y = sp->x[1];
  359 :     double old_pos_z = sp->x[2];
  362 :     if (!s->periodic && sp->time_bin != time_bin_inhibited) {
  400 :     if (sp->time_bin == time_bin_inhibited) {
  403 :     } else if (sp->time_bin == time_bin_not_created) {
  415 :       min_mass = min(min_mass, sp->mass);
  419 :           sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2];
  422 :       sp->x[0] = pos_x;
  423 :       sp->x[1] = pos_y;
  424 :       sp->x[2] = pos_z;
./space_rebuild.c:
  581 :         cell_getid(cdim, sp->x[0] * ih[0], sp->x[1] * ih[1], sp->x[2] * ih[2]);
  655 :     if (sp->time_bin == time_bin_inhibited)
  660 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
  661 :                    sp->x[2] * s->iwidth[2]);
  669 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
  670 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
  671 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
./star_formation/EAGLE/star_formation.h:
  591 :   sp->mass = hydro_get_mass(p);
  594 :   sp->mass_init = hydro_get_mass(p);
  598 :     sp->birth_scale_factor = cosmo->a;
  600 :     sp->birth_time = e->time;
  604 :   sp->split_data = xp->split_data;
  607 :   sp->chemistry_data = p->chemistry_data;
  610 :   sp->tracers_data = xp->tracers_data;
  613 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
  616 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
  620 :   sp->f_E = -1.f;
  621 :   sp->number_of_SNII_events = 0;
  622 :   sp->last_enrichment_time = sp->birth_time;
  623 :   sp->count_since_last_enrichment = -1;
  624 :   sp->number_of_heating_events = 0.;
./star_formation/EAGLE/star_formation_logger.h:
   43 :   sf->new_stellar_mass += sp->mass;
./star_formation/GEAR/star_formation.h:
  244 :   if (p->x[0] != sp->x[0] || p->x[1] != sp->x[1] || p->x[2] != sp->x[2]) {
  248 :         p->x[0], p->x[1], p->x[2], sp->x[0], sp->x[1], sp->x[2]);
  269 :   sp->x[0] += delta_x * max_displacement * p->h;
  270 :   sp->x[1] += delta_y * max_displacement * p->h;
  271 :   sp->x[2] += delta_z * max_displacement * p->h;
  274 :   sp->gpart->x[0] = sp->x[0];
  275 :   sp->gpart->x[1] = sp->x[1];
  276 :   sp->gpart->x[2] = sp->x[2];
  279 :   const double mass_ratio = sp->mass / hydro_get_mass(p);
  338 :     sp->mass = mass_star;
  339 :     sp->gpart->mass = mass_star;
  347 :     sp->mass = mass_gas;
  349 :   sp->sf_data.birth_mass = sp->mass;
  353 :     sp->birth_scale_factor = cosmo->a;
  355 :     sp->birth_time = e->time;
  359 :   // sp->tracers_data = xp->tracers_data;
  362 :   sp->split_data = xp->split_data;
  365 :   sp->sf_data.birth_density = hydro_get_physical_density(p, cosmo);
  368 :   sp->sf_data.birth_temperature = cooling_get_temperature(
  375 :   sp->sf_data.progenitor_id = p->id;
./star_formation/GEAR/star_formation_csds.h:
   41 :   out[0] = sp->sf_data.birth_density;
   42 :   out[1] = sp->sf_data.birth_mass;
   44 :   *id = sp->sf_data.progenitor_id;
./star_formation/GEAR/star_formation_logger.h:
   44 :   sf->new_stellar_mass += sp->mass;
./star_formation/KIARA/star_formation.h:
  554 :   sp->mass = hydro_get_mass(p);
  557 :   sp->mass_init = hydro_get_mass(p);
  561 :     sp->birth_scale_factor = cosmo->a;
  563 :     sp->birth_time = e->time;
  567 :   sp->split_data = xp->split_data;
  570 :   sp->chemistry_data = p->chemistry_data;
  573 :   sp->tracers_data = xp->tracers_data;
  576 :   sp->birth_density = cooling_get_subgrid_density(p, xp);
  579 :   sp->birth_temperature = cooling_get_subgrid_temperature(p, xp);
  582 :   sp->feedback_data.feedback_mass_to_launch = 0.f;
  583 :   sp->feedback_data.feedback_energy_reservoir = 0.f;
  584 :   sp->last_enrichment_time = sp->birth_time;
  585 :   sp->count_since_last_enrichment = -1;
./star_formation/KIARA/star_formation_logger.h:
   43 :   sf->new_stellar_mass += sp->mass;
./star_formation/QLA/star_formation.h:
  173 :   sp->mass = hydro_get_mass(p);
  176 :   sp->mass_init = hydro_get_mass(p);
  179 :   sp->split_data = xp->split_data;
  183 :     sp->birth_scale_factor = cosmo->a;
  185 :     sp->birth_time = e->time;
./star_formation/SIMBA/star_formation.h:
  663 :   sp->mass = hydro_get_mass(p);
  666 :   sp->mass_init = hydro_get_mass(p);
  670 :     sp->birth_scale_factor = cosmo->a;
  672 :     sp->birth_time = e->time;
  676 :   sp->split_data = xp->split_data;
  679 :   sp->chemistry_data = p->chemistry_data;
  682 :   sp->tracers_data = xp->tracers_data;
  685 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
  688 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
  692 :   sp->f_E = -1.f;
  693 :   sp->number_of_SNII_events = 0;
  694 :   sp->last_enrichment_time = sp->birth_time;
  695 :   sp->count_since_last_enrichment = -1;
./star_formation/SIMBA/star_formation_logger.h:
   43 :   sf->new_stellar_mass += sp->mass;
./stars/Basic/stars.h:
   59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   61 :     return time - (double)sp->birth_time;
   81 :   sp->time_bin = 0;
   84 :   sp->group_data.mass = 0.f;
   85 :   sp->group_data.stellar_mass = 0.f;
   99 :     sp->ids_ngbs_density[i] = -1;
  100 :   sp->num_ngb_density = 0;
  103 :   sp->density.wcount = 0.f;
  104 :   sp->density.wcount_dh = 0.f;
  152 :   const float h = sp->h;
  158 :   sp->density.wcount *= h_inv_dim;
  159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  175 :       sp->id, sp->h, sp->density.wcount);
  178 :   const float h = sp->h;
  183 :   sp->density.wcount = kernel_root * h_inv_dim;
  184 :   sp->density.wcount_dh = 0.f;
./stars/Basic/stars_csds.h:
   40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
   41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
   42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
./stars/Basic/stars_io.h:
   58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   62 :     ret[0] = sp->x[0];
   63 :     ret[1] = sp->x[1];
   64 :     ret[2] = sp->x[2];
   81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   92 :   const struct gpart *gp = sp->gpart;
  111 :   if (sp->gpart != NULL)
  112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  195 :   sp->eta_neighbours = parser_get_opt_param_float(
  199 :   sp->h_tolerance =
  203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  205 :   sp->delta_neighbours =
  206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  217 :     sp->log_max_h_change = p->log_max_h_change;
  219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  231 :           sp->eta_neighbours, sp->target_neighbours);
  234 :           sp->h_tolerance, sp->delta_neighbours);
  239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  242 :           sp->max_smoothing_iterations);
  252 :                        sp->target_neighbours);
  253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  256 :                        sp->h_tolerance);
  258 :                        sp->log_max_h_change);
  260 :                        pow_dimension(expf(sp->log_max_h_change)));
  262 :                        sp->max_smoothing_iterations);
./stars/EAGLE/stars.h:
   43 :   if (sp->birth_time == -1.) {
   52 :     if (sp->birth_scale_factor >= cosmo->a) {
   56 :           cosmo, sp->birth_scale_factor, cosmo->a);
   59 :     star_age = time - sp->birth_time;
   86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   88 :     return time - (double)sp->birth_time;
  102 :     sp->ids_ngbs_density[i] = -1;
  103 :   sp->num_ngb_density = 0;
  106 :   sp->density.wcount = 0.f;
  107 :   sp->density.wcount_dh = 0.f;
  110 :   sp->N_density = 0;
  111 :   sp->N_density_exact = 0;
  112 :   sp->rho = 0.f;
  113 :   sp->rho_exact = 0.f;
  114 :   sp->n = 0.f;
  115 :   sp->n_exact = 0.f;
  116 :   sp->inhibited_exact = 0;
  137 :   sp->time_bin = 0;
  138 :   sp->f_E = -1.f;
  139 :   sp->count_since_last_enrichment = -1;
  140 :   sp->number_of_heating_events = 0.;
  141 :   sp->number_of_SNII_events = 0;
  144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  148 :     sp->birth_temperature =
  152 :     sp->last_enrichment_time = scale_factor;
  154 :     sp->last_enrichment_time = time;
  159 :   sp->group_data.mass = 0.f;
  160 :   sp->group_data.stellar_mass = 0.f;
  211 :   const float h = sp->h;
  217 :   sp->density.wcount *= h_inv_dim;
  218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  221 :   sp->rho *= h_inv_dim;
  222 :   sp->n *= h_inv_dim;
  239 :       sp->id, sp->h, sp->density.wcount);
  242 :   sp->density.wcount = 0.f;
  243 :   sp->density.wcount_dh = 0.f;
  303 :   const float mass = sp->mass_init;
  307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  309 :     age = time - sp->birth_time;
./stars/EAGLE/stars_io.h:
   67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   71 :     ret[0] = sp->x[0];
   72 :     ret[1] = sp->x[1];
   73 :     ret[2] = sp->x[2];
   90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  101 :   const struct gpart *gp = sp->gpart;
  128 :   if (sp->gpart != NULL)
  129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  249 :   sp->eta_neighbours = parser_get_opt_param_float(
  253 :   sp->h_tolerance =
  257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  259 :   sp->delta_neighbours =
  260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  271 :     sp->log_max_h_change = p->log_max_h_change;
  273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  276 :   sp->overwrite_birth_time =
  278 :   sp->overwrite_birth_density =
  280 :   sp->overwrite_birth_temperature =
  284 :   if (sp->overwrite_birth_time) {
  285 :     sp->spart_first_init_birth_time =
  290 :   if (sp->overwrite_birth_density) {
  291 :     sp->spart_first_init_birth_density =
  296 :   if (sp->overwrite_birth_temperature) {
  297 :     sp->spart_first_init_birth_temperature =
  325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  359 :           sp->lum_tables_Z[i][k++] = log10(z);
  363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  393 :           sp->eta_neighbours, sp->target_neighbours);
  396 :           sp->h_tolerance, sp->delta_neighbours);
  401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  404 :           sp->max_smoothing_iterations);
  406 :   if (sp->overwrite_birth_time)
  408 :             sp->spart_first_init_birth_time);
  411 :           sp->age_threshold_unlimited);
  412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  414 :           sp->max_time_step_young);
  415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  424 :                        sp->target_neighbours);
  425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  428 :                        sp->h_tolerance);
  430 :                        sp->log_max_h_change);
  432 :                        pow_dimension(expf(sp->log_max_h_change)));
  434 :                        sp->max_smoothing_iterations);
  462 :     free(sp->lum_tables_Z[i]);
  463 :     free(sp->lum_tables_ages[i]);
  464 :     free(sp->lum_tables_luminosities[i]);
./stars/GEAR/stars.h:
   58 :     const double birth = sp->birth_scale_factor;
   62 :     return time - (double)sp->birth_time;
   76 :     sp->ids_ngbs_density[i] = -1;
   77 :   sp->num_ngb_density = 0;
   80 :   sp->density.wcount = 0.f;
   81 :   sp->density.wcount_dh = 0.f;
  100 :   sp->time_bin = 0;
  105 :   sp->group_data.mass = 0.f;
  106 :   sp->group_data.stellar_mass = 0.f;
  157 :   const float h = sp->h;
  163 :   sp->density.wcount *= h_inv_dim;
  164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  180 :       sp->id, sp->h, sp->density.wcount);
  183 :   sp->density.wcount = 0.f;
  184 :   sp->density.wcount_dh = 0.f;
./stars/GEAR/stars_csds.h:
   42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
   43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
   44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
./stars/GEAR/stars_io.h:
   60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   64 :     ret[0] = sp->x[0];
   65 :     ret[1] = sp->x[1];
   66 :     ret[2] = sp->x[2];
   83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   94 :   const struct gpart *gp = sp->gpart;
  113 :   if (sp->gpart != NULL)
  114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  207 :   sp->eta_neighbours = parser_get_opt_param_float(
  211 :   sp->h_tolerance =
  215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  217 :   sp->delta_neighbours =
  218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  229 :     sp->log_max_h_change = p->log_max_h_change;
  231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  243 :           sp->eta_neighbours, sp->target_neighbours);
  246 :           sp->h_tolerance, sp->delta_neighbours);
  251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  254 :           sp->max_smoothing_iterations);
  264 :                        sp->target_neighbours);
  265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  268 :                        sp->h_tolerance);
  270 :                        sp->log_max_h_change);
  272 :                        pow_dimension(expf(sp->log_max_h_change)));
  274 :                        sp->max_smoothing_iterations);
./stars/None/stars.h:
   72 :   sp->group_data.mass = 0.f;
   73 :   sp->group_data.stellar_mass = 0.f;
./stars/SIMBA/stars.h:
   43 :   if (sp->birth_time == -1.) {
   52 :     if (sp->birth_scale_factor >= cosmo->a) {
   56 :           cosmo, sp->birth_scale_factor, cosmo->a);
   59 :     star_age = time - sp->birth_time;
   86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   88 :     return time - (double)sp->birth_time;
  102 :     sp->ids_ngbs_density[i] = -1;
  103 :   sp->num_ngb_density = 0;
  106 :   sp->density.wcount = 0.f;
  107 :   sp->density.wcount_dh = 0.f;
  110 :   sp->N_density = 0;
  111 :   sp->N_density_exact = 0;
  112 :   sp->rho = 0.f;
  113 :   sp->rho_exact = 0.f;
  114 :   sp->n = 0.f;
  115 :   sp->n_exact = 0.f;
  116 :   sp->inhibited_exact = 0;
  137 :   sp->time_bin = 0;
  140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  144 :     sp->birth_temperature =
  148 :     sp->last_enrichment_time = scale_factor;
  150 :     sp->last_enrichment_time = time;
  155 :   sp->group_data.mass = 0.f;
  156 :   sp->group_data.stellar_mass = 0.f;
  157 :   sp->group_data.ssfr = 0.f;
  208 :   const float h = sp->h;
  214 :   sp->density.wcount *= h_inv_dim;
  215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  218 :   sp->rho *= h_inv_dim;
  219 :   sp->n *= h_inv_dim;
  236 :       sp->id, sp->h, sp->density.wcount);
  239 :   sp->density.wcount = 0.f;
  240 :   sp->density.wcount_dh = 0.f;
  300 :   const float mass = sp->mass_init;
  304 :         cosmo, sp->birth_scale_factor, cosmo->a);
  306 :     age = time - sp->birth_time;
./stars/SIMBA/stars_io.h:
   67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   71 :     ret[0] = sp->x[0];
   72 :     ret[1] = sp->x[1];
   73 :     ret[2] = sp->x[2];
   90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  101 :   const struct gpart *gp = sp->gpart;
  128 :   if (sp->gpart != NULL)
  129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  243 :   sp->eta_neighbours = parser_get_opt_param_float(
  247 :   sp->h_tolerance =
  251 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  252 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  253 :   sp->delta_neighbours =
  254 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  258 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  265 :     sp->log_max_h_change = p->log_max_h_change;
  267 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  270 :   sp->overwrite_birth_time =
  272 :   sp->overwrite_birth_density =
  274 :   sp->overwrite_birth_temperature =
  278 :   if (sp->overwrite_birth_time) {
  279 :     sp->spart_first_init_birth_time =
  284 :   if (sp->overwrite_birth_density) {
  285 :     sp->spart_first_init_birth_density =
  290 :   if (sp->overwrite_birth_temperature) {
  291 :     sp->spart_first_init_birth_temperature =
  319 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  320 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  321 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  322 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  337 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  338 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  339 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  353 :           sp->lum_tables_Z[i][k++] = log10(z);
  357 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  360 :         sp->lum_tables_luminosities[i][j] = log10(L);
  377 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  387 :           sp->eta_neighbours, sp->target_neighbours);
  390 :           sp->h_tolerance, sp->delta_neighbours);
  395 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  398 :           sp->max_smoothing_iterations);
  400 :   if (sp->overwrite_birth_time)
  402 :             sp->spart_first_init_birth_time);
  405 :           sp->age_threshold_unlimited);
  406 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  408 :           sp->max_time_step_young);
  409 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  418 :                        sp->target_neighbours);
  419 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  420 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  422 :                        sp->h_tolerance);
  424 :                        sp->log_max_h_change);
  426 :                        pow_dimension(expf(sp->log_max_h_change)));
  428 :                        sp->max_smoothing_iterations);
  456 :     free(sp->lum_tables_Z[i]);
  457 :     free(sp->lum_tables_ages[i]);
  458 :     free(sp->lum_tables_luminosities[i]);
./stars/fof_data:
    2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
    3 :    61 :     return time - (double)sp->birth_time;
    4 :    81 :   sp->time_bin = 0;
    5 :    84 :   sp->group_data.mass = 0.f;
    6 :    85 :   sp->group_data.stellar_mass = 0.f;
    7 :    99 :     sp->ids_ngbs_density[i] = -1;
    8 :   100 :   sp->num_ngb_density = 0;
    9 :   103 :   sp->density.wcount = 0.f;
   10 :   104 :   sp->density.wcount_dh = 0.f;
   11 :   152 :   const float h = sp->h;
   12 :   158 :   sp->density.wcount *= h_inv_dim;
   13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
   14 :   175 :       sp->id, sp->h, sp->density.wcount);
   15 :   178 :   const float h = sp->h;
   16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
   17 :   184 :   sp->density.wcount_dh = 0.f;
   19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
   20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
   21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
   23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   26 :    62 :     ret[0] = sp->x[0];
   27 :    63 :     ret[1] = sp->x[1];
   28 :    64 :     ret[2] = sp->x[2];
   29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   31 :    92 :   const struct gpart *gp = sp->gpart;
   32 :   111 :   if (sp->gpart != NULL)
   33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
   34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
   35 :   199 :   sp->h_tolerance =
   36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
   37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
   38 :   205 :   sp->delta_neighbours =
   39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
   40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
   41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
   42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
   43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
   44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
   45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
   46 :   242 :           sp->max_smoothing_iterations);
   47 :   252 :                        sp->target_neighbours);
   48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
   49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
   50 :   256 :                        sp->h_tolerance);
   51 :   258 :                        sp->log_max_h_change);
   52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
   53 :   262 :                        sp->max_smoothing_iterations);
   55 :    43 :   if (sp->birth_time == -1.) {
   56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
   57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
   58 :    59 :     star_age = time - sp->birth_time;
   59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   60 :    88 :     return time - (double)sp->birth_time;
   61 :   102 :     sp->ids_ngbs_density[i] = -1;
   62 :   103 :   sp->num_ngb_density = 0;
   63 :   106 :   sp->density.wcount = 0.f;
   64 :   107 :   sp->density.wcount_dh = 0.f;
   65 :   110 :   sp->N_density = 0;
   66 :   111 :   sp->N_density_exact = 0;
   67 :   112 :   sp->rho = 0.f;
   68 :   113 :   sp->rho_exact = 0.f;
   69 :   114 :   sp->n = 0.f;
   70 :   115 :   sp->n_exact = 0.f;
   71 :   116 :   sp->inhibited_exact = 0;
   72 :   137 :   sp->time_bin = 0;
   73 :   138 :   sp->f_E = -1.f;
   74 :   139 :   sp->count_since_last_enrichment = -1;
   75 :   140 :   sp->number_of_heating_events = 0.;
   76 :   141 :   sp->number_of_SNII_events = 0;
   77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
   78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
   79 :   148 :     sp->birth_temperature =
   80 :   152 :     sp->last_enrichment_time = scale_factor;
   81 :   154 :     sp->last_enrichment_time = time;
   82 :   159 :   sp->group_data.mass = 0.f;
   83 :   160 :   sp->group_data.stellar_mass = 0.f;
   84 :   211 :   const float h = sp->h;
   85 :   217 :   sp->density.wcount *= h_inv_dim;
   86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
   87 :   221 :   sp->rho *= h_inv_dim;
   88 :   222 :   sp->n *= h_inv_dim;
   89 :   239 :       sp->id, sp->h, sp->density.wcount);
   90 :   242 :   sp->density.wcount = 0.f;
   91 :   243 :   sp->density.wcount_dh = 0.f;
   92 :   303 :   const float mass = sp->mass_init;
   93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
   94 :   309 :     age = time - sp->birth_time;
   96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   99 :    71 :     ret[0] = sp->x[0];
  100 :    72 :     ret[1] = sp->x[1];
  101 :    73 :     ret[2] = sp->x[2];
  102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  104 :   101 :   const struct gpart *gp = sp->gpart;
  105 :   128 :   if (sp->gpart != NULL)
  106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  108 :   253 :   sp->h_tolerance =
  109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  111 :   259 :   sp->delta_neighbours =
  112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  116 :   276 :   sp->overwrite_birth_time =
  117 :   278 :   sp->overwrite_birth_density =
  118 :   280 :   sp->overwrite_birth_temperature =
  119 :   284 :   if (sp->overwrite_birth_time) {
  120 :   285 :     sp->spart_first_init_birth_time =
  121 :   290 :   if (sp->overwrite_birth_density) {
  122 :   291 :     sp->spart_first_init_birth_density =
  123 :   296 :   if (sp->overwrite_birth_temperature) {
  124 :   297 :     sp->spart_first_init_birth_temperature =
  125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  139 :   404 :           sp->max_smoothing_iterations);
  140 :   406 :   if (sp->overwrite_birth_time)
  141 :   408 :             sp->spart_first_init_birth_time);
  142 :   411 :           sp->age_threshold_unlimited);
  143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  144 :   414 :           sp->max_time_step_young);
  145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  146 :   424 :                        sp->target_neighbours);
  147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  149 :   428 :                        sp->h_tolerance);
  150 :   430 :                        sp->log_max_h_change);
  151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  152 :   434 :                        sp->max_smoothing_iterations);
  153 :   462 :     free(sp->lum_tables_Z[i]);
  154 :   463 :     free(sp->lum_tables_ages[i]);
  155 :   464 :     free(sp->lum_tables_luminosities[i]);
  157 :    58 :     const double birth = sp->birth_scale_factor;
  158 :    62 :     return time - (double)sp->birth_time;
  159 :    76 :     sp->ids_ngbs_density[i] = -1;
  160 :    77 :   sp->num_ngb_density = 0;
  161 :    80 :   sp->density.wcount = 0.f;
  162 :    81 :   sp->density.wcount_dh = 0.f;
  163 :   100 :   sp->time_bin = 0;
  164 :   105 :   sp->group_data.mass = 0.f;
  165 :   106 :   sp->group_data.stellar_mass = 0.f;
  166 :   157 :   const float h = sp->h;
  167 :   163 :   sp->density.wcount *= h_inv_dim;
  168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  169 :   180 :       sp->id, sp->h, sp->density.wcount);
  170 :   183 :   sp->density.wcount = 0.f;
  171 :   184 :   sp->density.wcount_dh = 0.f;
  173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  180 :    64 :     ret[0] = sp->x[0];
  181 :    65 :     ret[1] = sp->x[1];
  182 :    66 :     ret[2] = sp->x[2];
  183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  185 :    94 :   const struct gpart *gp = sp->gpart;
  186 :   113 :   if (sp->gpart != NULL)
  187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
  189 :   211 :   sp->h_tolerance =
  190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  192 :   217 :   sp->delta_neighbours =
  193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
  196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
  198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
  199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  200 :   254 :           sp->max_smoothing_iterations);
  201 :   264 :                        sp->target_neighbours);
  202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  204 :   268 :                        sp->h_tolerance);
  205 :   270 :                        sp->log_max_h_change);
  206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
  207 :   274 :                        sp->max_smoothing_iterations);
  209 :    72 :   sp->group_data.mass = 0.f;
  210 :    73 :   sp->group_data.stellar_mass = 0.f;
  212 :    43 :   if (sp->birth_time == -1.) {
  213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  215 :    59 :     star_age = time - sp->birth_time;
  216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  217 :    88 :     return time - (double)sp->birth_time;
  218 :   102 :     sp->ids_ngbs_density[i] = -1;
  219 :   103 :   sp->num_ngb_density = 0;
  220 :   106 :   sp->density.wcount = 0.f;
  221 :   107 :   sp->density.wcount_dh = 0.f;
  222 :   110 :   sp->N_density = 0;
  223 :   111 :   sp->N_density_exact = 0;
  224 :   112 :   sp->rho = 0.f;
  225 :   113 :   sp->rho_exact = 0.f;
  226 :   114 :   sp->n = 0.f;
  227 :   115 :   sp->n_exact = 0.f;
  228 :   116 :   sp->inhibited_exact = 0;
  229 :   137 :   sp->time_bin = 0;
  230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  232 :   144 :     sp->birth_temperature =
  233 :   148 :     sp->last_enrichment_time = scale_factor;
  234 :   150 :     sp->last_enrichment_time = time;
  235 :   155 :   sp->group_data.mass = 0.f;
  236 :   156 :   sp->group_data.stellar_mass = 0.f;
  237 :   157 :   sp->group_data.ssfr = 0.f;
  238 :   208 :   const float h = sp->h;
  239 :   214 :   sp->density.wcount *= h_inv_dim;
  240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  241 :   218 :   sp->rho *= h_inv_dim;
  242 :   219 :   sp->n *= h_inv_dim;
  243 :   236 :       sp->id, sp->h, sp->density.wcount);
  244 :   239 :   sp->density.wcount = 0.f;
  245 :   240 :   sp->density.wcount_dh = 0.f;
  246 :   300 :   const float mass = sp->mass_init;
  247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
  248 :   306 :     age = time - sp->birth_time;
  250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  253 :    71 :     ret[0] = sp->x[0];
  254 :    72 :     ret[1] = sp->x[1];
  255 :    73 :     ret[2] = sp->x[2];
  256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  258 :   101 :   const struct gpart *gp = sp->gpart;
  259 :   128 :   if (sp->gpart != NULL)
  260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
  262 :   252 :   sp->h_tolerance =
  263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  265 :   258 :   sp->delta_neighbours =
  266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
  269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  270 :   275 :   sp->overwrite_birth_time =
  271 :   277 :   sp->overwrite_birth_density =
  272 :   279 :   sp->overwrite_birth_temperature =
  273 :   283 :   if (sp->overwrite_birth_time) {
  274 :   284 :     sp->spart_first_init_birth_time =
  275 :   289 :   if (sp->overwrite_birth_density) {
  276 :   290 :     sp->spart_first_init_birth_density =
  277 :   295 :   if (sp->overwrite_birth_temperature) {
  278 :   296 :     sp->spart_first_init_birth_temperature =
  279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
  287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
  289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
  291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
  292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  293 :   403 :           sp->max_smoothing_iterations);
  294 :   405 :   if (sp->overwrite_birth_time)
  295 :   407 :             sp->spart_first_init_birth_time);
  296 :   410 :           sp->age_threshold_unlimited);
  297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  298 :   413 :           sp->max_time_step_young);
  299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  300 :   423 :                        sp->target_neighbours);
  301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  303 :   427 :                        sp->h_tolerance);
  304 :   429 :                        sp->log_max_h_change);
  305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
  306 :   433 :                        sp->max_smoothing_iterations);
  307 :   461 :     free(sp->lum_tables_Z[i]);
  308 :   462 :     free(sp->lum_tables_ages[i]);
  309 :   463 :     free(sp->lum_tables_luminosities[i]);
  311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  312 :     3 :    61 :     return time - (double)sp->birth_time;
  313 :     4 :    81 :   sp->time_bin = 0;
  314 :     5 :    84 :   sp->group_data.mass = 0.f;
  315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
  316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
  317 :     8 :   100 :   sp->num_ngb_density = 0;
  318 :     9 :   103 :   sp->density.wcount = 0.f;
  319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
  320 :    11 :   152 :   const float h = sp->h;
  321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
  322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
  324 :    15 :   178 :   const float h = sp->h;
  325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
  326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
  327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  333 :    26 :    62 :     ret[0] = sp->x[0];
  334 :    27 :    63 :     ret[1] = sp->x[1];
  335 :    28 :    64 :     ret[2] = sp->x[2];
  336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
  339 :    32 :   111 :   if (sp->gpart != NULL)
  340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
  342 :    35 :   199 :   sp->h_tolerance =
  343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  345 :    38 :   205 :   sp->delta_neighbours =
  346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
  349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
  351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
  352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  353 :    46 :   242 :           sp->max_smoothing_iterations);
  354 :    47 :   252 :                        sp->target_neighbours);
  355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  357 :    50 :   256 :                        sp->h_tolerance);
  358 :    51 :   258 :                        sp->log_max_h_change);
  359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
  360 :    53 :   262 :                        sp->max_smoothing_iterations);
  361 :    55 :    43 :   if (sp->birth_time == -1.) {
  362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  364 :    58 :    59 :     star_age = time - sp->birth_time;
  365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  366 :    60 :    88 :     return time - (double)sp->birth_time;
  367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
  368 :    62 :   103 :   sp->num_ngb_density = 0;
  369 :    63 :   106 :   sp->density.wcount = 0.f;
  370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
  371 :    65 :   110 :   sp->N_density = 0;
  372 :    66 :   111 :   sp->N_density_exact = 0;
  373 :    67 :   112 :   sp->rho = 0.f;
  374 :    68 :   113 :   sp->rho_exact = 0.f;
  375 :    69 :   114 :   sp->n = 0.f;
  376 :    70 :   115 :   sp->n_exact = 0.f;
  377 :    71 :   116 :   sp->inhibited_exact = 0;
  378 :    72 :   137 :   sp->time_bin = 0;
  379 :    73 :   138 :   sp->f_E = -1.f;
  380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
  381 :    75 :   140 :   sp->number_of_heating_events = 0.;
  382 :    76 :   141 :   sp->number_of_SNII_events = 0;
  383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  385 :    79 :   148 :     sp->birth_temperature =
  386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
  387 :    81 :   154 :     sp->last_enrichment_time = time;
  388 :    82 :   159 :   sp->group_data.mass = 0.f;
  389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
  390 :    84 :   211 :   const float h = sp->h;
  391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
  392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  393 :    87 :   221 :   sp->rho *= h_inv_dim;
  394 :    88 :   222 :   sp->n *= h_inv_dim;
  395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
  396 :    90 :   242 :   sp->density.wcount = 0.f;
  397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
  398 :    92 :   303 :   const float mass = sp->mass_init;
  399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  400 :    94 :   309 :     age = time - sp->birth_time;
  401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  404 :    99 :    71 :     ret[0] = sp->x[0];
  405 :   100 :    72 :     ret[1] = sp->x[1];
  406 :   101 :    73 :     ret[2] = sp->x[2];
  407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
  410 :   105 :   128 :   if (sp->gpart != NULL)
  411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  413 :   108 :   253 :   sp->h_tolerance =
  414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  416 :   111 :   259 :   sp->delta_neighbours =
  417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  421 :   116 :   276 :   sp->overwrite_birth_time =
  422 :   117 :   278 :   sp->overwrite_birth_density =
  423 :   118 :   280 :   sp->overwrite_birth_temperature =
  424 :   119 :   284 :   if (sp->overwrite_birth_time) {
  425 :   120 :   285 :     sp->spart_first_init_birth_time =
  426 :   121 :   290 :   if (sp->overwrite_birth_density) {
  427 :   122 :   291 :     sp->spart_first_init_birth_density =
  428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
  429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
  430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  444 :   139 :   404 :           sp->max_smoothing_iterations);
  445 :   140 :   406 :   if (sp->overwrite_birth_time)
  446 :   141 :   408 :             sp->spart_first_init_birth_time);
  447 :   142 :   411 :           sp->age_threshold_unlimited);
  448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  449 :   144 :   414 :           sp->max_time_step_young);
  450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  451 :   146 :   424 :                        sp->target_neighbours);
  452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  454 :   149 :   428 :                        sp->h_tolerance);
  455 :   150 :   430 :                        sp->log_max_h_change);
  456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  457 :   152 :   434 :                        sp->max_smoothing_iterations);
  458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
  459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
  460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
  462 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  463 :     3 :    61 :     return time - (double)sp->birth_time;
  464 :     4 :    81 :   sp->time_bin = 0;
  465 :     5 :    84 :   sp->group_data.mass = 0.f;
  466 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
  467 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
  468 :     8 :   100 :   sp->num_ngb_density = 0;
  469 :     9 :   103 :   sp->density.wcount = 0.f;
  470 :    10 :   104 :   sp->density.wcount_dh = 0.f;
  471 :    11 :   152 :   const float h = sp->h;
  472 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
  473 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  474 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
  475 :    15 :   178 :   const float h = sp->h;
  476 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
  477 :    17 :   184 :   sp->density.wcount_dh = 0.f;
  478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  481 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  482 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  483 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  484 :    26 :    62 :     ret[0] = sp->x[0];
  485 :    27 :    63 :     ret[1] = sp->x[1];
  486 :    28 :    64 :     ret[2] = sp->x[2];
  487 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  488 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  489 :    31 :    92 :   const struct gpart *gp = sp->gpart;
  490 :    32 :   111 :   if (sp->gpart != NULL)
  491 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  492 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
  493 :    35 :   199 :   sp->h_tolerance =
  494 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  495 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  496 :    38 :   205 :   sp->delta_neighbours =
  497 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  498 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  499 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
  500 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  501 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
  502 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
  503 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  504 :    46 :   242 :           sp->max_smoothing_iterations);
  505 :    47 :   252 :                        sp->target_neighbours);
  506 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  507 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  508 :    50 :   256 :                        sp->h_tolerance);
  509 :    51 :   258 :                        sp->log_max_h_change);
  510 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
  511 :    53 :   262 :                        sp->max_smoothing_iterations);
  512 :    55 :    43 :   if (sp->birth_time == -1.) {
  513 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  514 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  515 :    58 :    59 :     star_age = time - sp->birth_time;
  516 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  517 :    60 :    88 :     return time - (double)sp->birth_time;
  518 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
  519 :    62 :   103 :   sp->num_ngb_density = 0;
  520 :    63 :   106 :   sp->density.wcount = 0.f;
  521 :    64 :   107 :   sp->density.wcount_dh = 0.f;
  522 :    65 :   110 :   sp->N_density = 0;
  523 :    66 :   111 :   sp->N_density_exact = 0;
  524 :    67 :   112 :   sp->rho = 0.f;
  525 :    68 :   113 :   sp->rho_exact = 0.f;
  526 :    69 :   114 :   sp->n = 0.f;
  527 :    70 :   115 :   sp->n_exact = 0.f;
  528 :    71 :   116 :   sp->inhibited_exact = 0;
  529 :    72 :   137 :   sp->time_bin = 0;
  530 :    73 :   138 :   sp->f_E = -1.f;
  531 :    74 :   139 :   sp->count_since_last_enrichment = -1;
  532 :    75 :   140 :   sp->number_of_heating_events = 0.;
  533 :    76 :   141 :   sp->number_of_SNII_events = 0;
  534 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  535 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  536 :    79 :   148 :     sp->birth_temperature =
  537 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
  538 :    81 :   154 :     sp->last_enrichment_time = time;
  539 :    82 :   159 :   sp->group_data.mass = 0.f;
  540 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
  541 :    84 :   211 :   const float h = sp->h;
  542 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
  543 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  544 :    87 :   221 :   sp->rho *= h_inv_dim;
  545 :    88 :   222 :   sp->n *= h_inv_dim;
  546 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
  547 :    90 :   242 :   sp->density.wcount = 0.f;
  548 :    91 :   243 :   sp->density.wcount_dh = 0.f;
  549 :    92 :   303 :   const float mass = sp->mass_init;
  550 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  551 :    94 :   309 :     age = time - sp->birth_time;
  552 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  553 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  554 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  555 :    99 :    71 :     ret[0] = sp->x[0];
  556 :   100 :    72 :     ret[1] = sp->x[1];
  557 :   101 :    73 :     ret[2] = sp->x[2];
  558 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  559 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  560 :   104 :   101 :   const struct gpart *gp = sp->gpart;
  561 :   105 :   128 :   if (sp->gpart != NULL)
  562 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  563 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  564 :   108 :   253 :   sp->h_tolerance =
  565 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  566 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  567 :   111 :   259 :   sp->delta_neighbours =
  568 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  569 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  570 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  571 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  572 :   116 :   276 :   sp->overwrite_birth_time =
  573 :   117 :   278 :   sp->overwrite_birth_density =
  574 :   118 :   280 :   sp->overwrite_birth_temperature =
  575 :   119 :   284 :   if (sp->overwrite_birth_time) {
  576 :   120 :   285 :     sp->spart_first_init_birth_time =
  577 :   121 :   290 :   if (sp->overwrite_birth_density) {
  578 :   122 :   291 :     sp->spart_first_init_birth_density =
  579 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
  580 :   124 :   297 :     sp->spart_first_init_birth_temperature =
  581 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  582 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  583 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  584 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  585 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  586 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  587 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  588 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  589 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  590 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  591 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  592 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  593 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  594 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  595 :   139 :   404 :           sp->max_smoothing_iterations);
  596 :   140 :   406 :   if (sp->overwrite_birth_time)
  597 :   141 :   408 :             sp->spart_first_init_birth_time);
  598 :   142 :   411 :           sp->age_threshold_unlimited);
  599 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  600 :   144 :   414 :           sp->max_time_step_young);
  601 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  602 :   146 :   424 :                        sp->target_neighbours);
  603 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  604 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  605 :   149 :   428 :                        sp->h_tolerance);
  606 :   150 :   430 :                        sp->log_max_h_change);
  607 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  608 :   152 :   434 :                        sp->max_smoothing_iterations);
  609 :   153 :   462 :     free(sp->lum_tables_Z[i]);
  610 :   154 :   463 :     free(sp->lum_tables_ages[i]);
  611 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
  612 :   157 :    58 :     const double birth = sp->birth_scale_factor;
  613 :   158 :    62 :     return time - (double)sp->birth_time;
  614 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
  615 :   160 :    77 :   sp->num_ngb_density = 0;
  616 :   161 :    80 :   sp->density.wcount = 0.f;
  617 :   162 :    81 :   sp->density.wcount_dh = 0.f;
  618 :   163 :   100 :   sp->time_bin = 0;
  619 :   164 :   105 :   sp->group_data.mass = 0.f;
  620 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
  621 :   166 :   157 :   const float h = sp->h;
  622 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
  623 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  624 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
  625 :   170 :   183 :   sp->density.wcount = 0.f;
  626 :   171 :   184 :   sp->density.wcount_dh = 0.f;
  627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  630 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  631 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  632 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  633 :   180 :    64 :     ret[0] = sp->x[0];
  634 :   181 :    65 :     ret[1] = sp->x[1];
  635 :   182 :    66 :     ret[2] = sp->x[2];
  636 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  637 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  638 :   185 :    94 :   const struct gpart *gp = sp->gpart;
  639 :   186 :   113 :   if (sp->gpart != NULL)
  640 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  641 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
  642 :   189 :   211 :   sp->h_tolerance =
  643 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  644 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  645 :   192 :   217 :   sp->delta_neighbours =
  646 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  647 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  648 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
  649 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  650 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
  651 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
  652 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  653 :   200 :   254 :           sp->max_smoothing_iterations);
  654 :   201 :   264 :                        sp->target_neighbours);
  655 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  656 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  657 :   204 :   268 :                        sp->h_tolerance);
  658 :   205 :   270 :                        sp->log_max_h_change);
  659 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
  660 :   207 :   274 :                        sp->max_smoothing_iterations);
  661 :   209 :    72 :   sp->group_data.mass = 0.f;
  662 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
  663 :   212 :    43 :   if (sp->birth_time == -1.) {
  664 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  665 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  666 :   215 :    59 :     star_age = time - sp->birth_time;
  667 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  668 :   217 :    88 :     return time - (double)sp->birth_time;
  669 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
  670 :   219 :   103 :   sp->num_ngb_density = 0;
  671 :   220 :   106 :   sp->density.wcount = 0.f;
  672 :   221 :   107 :   sp->density.wcount_dh = 0.f;
  673 :   222 :   110 :   sp->N_density = 0;
  674 :   223 :   111 :   sp->N_density_exact = 0;
  675 :   224 :   112 :   sp->rho = 0.f;
  676 :   225 :   113 :   sp->rho_exact = 0.f;
  677 :   226 :   114 :   sp->n = 0.f;
  678 :   227 :   115 :   sp->n_exact = 0.f;
  679 :   228 :   116 :   sp->inhibited_exact = 0;
  680 :   229 :   137 :   sp->time_bin = 0;
  681 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  682 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  683 :   232 :   144 :     sp->birth_temperature =
  684 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
  685 :   234 :   150 :     sp->last_enrichment_time = time;
  686 :   235 :   155 :   sp->group_data.mass = 0.f;
  687 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
  688 :   237 :   157 :   sp->group_data.ssfr = 0.f;
  689 :   238 :   208 :   const float h = sp->h;
  690 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
  691 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  692 :   241 :   218 :   sp->rho *= h_inv_dim;
  693 :   242 :   219 :   sp->n *= h_inv_dim;
  694 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
  695 :   244 :   239 :   sp->density.wcount = 0.f;
  696 :   245 :   240 :   sp->density.wcount_dh = 0.f;
  697 :   246 :   300 :   const float mass = sp->mass_init;
  698 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
  699 :   248 :   306 :     age = time - sp->birth_time;
  700 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  701 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  702 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  703 :   253 :    71 :     ret[0] = sp->x[0];
  704 :   254 :    72 :     ret[1] = sp->x[1];
  705 :   255 :    73 :     ret[2] = sp->x[2];
  706 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  707 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  708 :   258 :   101 :   const struct gpart *gp = sp->gpart;
  709 :   259 :   128 :   if (sp->gpart != NULL)
  710 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  711 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
  712 :   262 :   252 :   sp->h_tolerance =
  713 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  714 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  715 :   265 :   258 :   sp->delta_neighbours =
  716 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  717 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  718 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
  719 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  720 :   270 :   275 :   sp->overwrite_birth_time =
  721 :   271 :   277 :   sp->overwrite_birth_density =
  722 :   272 :   279 :   sp->overwrite_birth_temperature =
  723 :   273 :   283 :   if (sp->overwrite_birth_time) {
  724 :   274 :   284 :     sp->spart_first_init_birth_time =
  725 :   275 :   289 :   if (sp->overwrite_birth_density) {
  726 :   276 :   290 :     sp->spart_first_init_birth_density =
  727 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
  728 :   278 :   296 :     sp->spart_first_init_birth_temperature =
  729 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  730 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  731 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  732 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  733 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  734 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  735 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  736 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
  737 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  738 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
  739 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  740 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
  741 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
  742 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  743 :   293 :   403 :           sp->max_smoothing_iterations);
  744 :   294 :   405 :   if (sp->overwrite_birth_time)
  745 :   295 :   407 :             sp->spart_first_init_birth_time);
  746 :   296 :   410 :           sp->age_threshold_unlimited);
  747 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  748 :   298 :   413 :           sp->max_time_step_young);
  749 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  750 :   300 :   423 :                        sp->target_neighbours);
  751 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  752 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  753 :   303 :   427 :                        sp->h_tolerance);
  754 :   304 :   429 :                        sp->log_max_h_change);
  755 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
  756 :   306 :   433 :                        sp->max_smoothing_iterations);
  757 :   307 :   461 :     free(sp->lum_tables_Z[i]);
  758 :   308 :   462 :     free(sp->lum_tables_ages[i]);
  759 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
  760 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  761 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
  762 :   313 :     4 :    81 :   sp->time_bin = 0;
  763 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
  764 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
  765 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
  766 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
  767 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
  768 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
  769 :   320 :    11 :   152 :   const float h = sp->h;
  770 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
  771 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  772 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
  773 :   324 :    15 :   178 :   const float h = sp->h;
  774 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
  775 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
  776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  779 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  780 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  781 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  782 :   333 :    26 :    62 :     ret[0] = sp->x[0];
  783 :   334 :    27 :    63 :     ret[1] = sp->x[1];
  784 :   335 :    28 :    64 :     ret[2] = sp->x[2];
  785 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  786 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  787 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
  788 :   339 :    32 :   111 :   if (sp->gpart != NULL)
  789 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  790 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
  791 :   342 :    35 :   199 :   sp->h_tolerance =
  792 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  793 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  794 :   345 :    38 :   205 :   sp->delta_neighbours =
  795 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  796 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  797 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
  798 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  799 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
  800 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
  801 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  802 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
  803 :   354 :    47 :   252 :                        sp->target_neighbours);
  804 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  805 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  806 :   357 :    50 :   256 :                        sp->h_tolerance);
  807 :   358 :    51 :   258 :                        sp->log_max_h_change);
  808 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
  809 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
  810 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
  811 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  812 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  813 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
  814 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  815 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
  816 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
  817 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
  818 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
  819 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
  820 :   371 :    65 :   110 :   sp->N_density = 0;
  821 :   372 :    66 :   111 :   sp->N_density_exact = 0;
  822 :   373 :    67 :   112 :   sp->rho = 0.f;
  823 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
  824 :   375 :    69 :   114 :   sp->n = 0.f;
  825 :   376 :    70 :   115 :   sp->n_exact = 0.f;
  826 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
  827 :   378 :    72 :   137 :   sp->time_bin = 0;
  828 :   379 :    73 :   138 :   sp->f_E = -1.f;
  829 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
  830 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
  831 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
  832 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  833 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  834 :   385 :    79 :   148 :     sp->birth_temperature =
  835 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
  836 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
  837 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
  838 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
  839 :   390 :    84 :   211 :   const float h = sp->h;
  840 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
  841 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  842 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
  843 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
  844 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
  845 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
  846 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
  847 :   398 :    92 :   303 :   const float mass = sp->mass_init;
  848 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  849 :   400 :    94 :   309 :     age = time - sp->birth_time;
  850 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  851 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  852 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  853 :   404 :    99 :    71 :     ret[0] = sp->x[0];
  854 :   405 :   100 :    72 :     ret[1] = sp->x[1];
  855 :   406 :   101 :    73 :     ret[2] = sp->x[2];
  856 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  857 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  858 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
  859 :   410 :   105 :   128 :   if (sp->gpart != NULL)
  860 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  861 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  862 :   413 :   108 :   253 :   sp->h_tolerance =
  863 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  864 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  865 :   416 :   111 :   259 :   sp->delta_neighbours =
  866 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  867 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  868 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  869 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  870 :   421 :   116 :   276 :   sp->overwrite_birth_time =
  871 :   422 :   117 :   278 :   sp->overwrite_birth_density =
  872 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
  873 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
  874 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
  875 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
  876 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
  877 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
  878 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
  879 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  880 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  881 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  882 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  883 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  884 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  885 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  886 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  887 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  888 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  889 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  890 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  891 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  892 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  893 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
  894 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
  895 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
  896 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
  897 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  898 :   449 :   144 :   414 :           sp->max_time_step_young);
  899 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  900 :   451 :   146 :   424 :                        sp->target_neighbours);
  901 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  902 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  903 :   454 :   149 :   428 :                        sp->h_tolerance);
  904 :   455 :   150 :   430 :                        sp->log_max_h_change);
  905 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  906 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
  907 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
  908 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
  909 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
./stars/fof_data.:
    2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
    3 :    61 :     return time - (double)sp->birth_time;
    4 :    81 :   sp->time_bin = 0;
    5 :    84 :   sp->group_data.mass = 0.f;
    6 :    85 :   sp->group_data.stellar_mass = 0.f;
    7 :    99 :     sp->ids_ngbs_density[i] = -1;
    8 :   100 :   sp->num_ngb_density = 0;
    9 :   103 :   sp->density.wcount = 0.f;
   10 :   104 :   sp->density.wcount_dh = 0.f;
   11 :   152 :   const float h = sp->h;
   12 :   158 :   sp->density.wcount *= h_inv_dim;
   13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
   14 :   175 :       sp->id, sp->h, sp->density.wcount);
   15 :   178 :   const float h = sp->h;
   16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
   17 :   184 :   sp->density.wcount_dh = 0.f;
   19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
   20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
   21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
   23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   26 :    62 :     ret[0] = sp->x[0];
   27 :    63 :     ret[1] = sp->x[1];
   28 :    64 :     ret[2] = sp->x[2];
   29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   31 :    92 :   const struct gpart *gp = sp->gpart;
   32 :   111 :   if (sp->gpart != NULL)
   33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
   34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
   35 :   199 :   sp->h_tolerance =
   36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
   37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
   38 :   205 :   sp->delta_neighbours =
   39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
   40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
   41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
   42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
   43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
   44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
   45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
   46 :   242 :           sp->max_smoothing_iterations);
   47 :   252 :                        sp->target_neighbours);
   48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
   49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
   50 :   256 :                        sp->h_tolerance);
   51 :   258 :                        sp->log_max_h_change);
   52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
   53 :   262 :                        sp->max_smoothing_iterations);
   55 :    43 :   if (sp->birth_time == -1.) {
   56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
   57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
   58 :    59 :     star_age = time - sp->birth_time;
   59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   60 :    88 :     return time - (double)sp->birth_time;
   61 :   102 :     sp->ids_ngbs_density[i] = -1;
   62 :   103 :   sp->num_ngb_density = 0;
   63 :   106 :   sp->density.wcount = 0.f;
   64 :   107 :   sp->density.wcount_dh = 0.f;
   65 :   110 :   sp->N_density = 0;
   66 :   111 :   sp->N_density_exact = 0;
   67 :   112 :   sp->rho = 0.f;
   68 :   113 :   sp->rho_exact = 0.f;
   69 :   114 :   sp->n = 0.f;
   70 :   115 :   sp->n_exact = 0.f;
   71 :   116 :   sp->inhibited_exact = 0;
   72 :   137 :   sp->time_bin = 0;
   73 :   138 :   sp->f_E = -1.f;
   74 :   139 :   sp->count_since_last_enrichment = -1;
   75 :   140 :   sp->number_of_heating_events = 0.;
   76 :   141 :   sp->number_of_SNII_events = 0;
   77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
   78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
   79 :   148 :     sp->birth_temperature =
   80 :   152 :     sp->last_enrichment_time = scale_factor;
   81 :   154 :     sp->last_enrichment_time = time;
   82 :   159 :   sp->group_data.mass = 0.f;
   83 :   160 :   sp->group_data.stellar_mass = 0.f;
   84 :   211 :   const float h = sp->h;
   85 :   217 :   sp->density.wcount *= h_inv_dim;
   86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
   87 :   221 :   sp->rho *= h_inv_dim;
   88 :   222 :   sp->n *= h_inv_dim;
   89 :   239 :       sp->id, sp->h, sp->density.wcount);
   90 :   242 :   sp->density.wcount = 0.f;
   91 :   243 :   sp->density.wcount_dh = 0.f;
   92 :   303 :   const float mass = sp->mass_init;
   93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
   94 :   309 :     age = time - sp->birth_time;
   96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   99 :    71 :     ret[0] = sp->x[0];
  100 :    72 :     ret[1] = sp->x[1];
  101 :    73 :     ret[2] = sp->x[2];
  102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  104 :   101 :   const struct gpart *gp = sp->gpart;
  105 :   128 :   if (sp->gpart != NULL)
  106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  108 :   253 :   sp->h_tolerance =
  109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  111 :   259 :   sp->delta_neighbours =
  112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  116 :   276 :   sp->overwrite_birth_time =
  117 :   278 :   sp->overwrite_birth_density =
  118 :   280 :   sp->overwrite_birth_temperature =
  119 :   284 :   if (sp->overwrite_birth_time) {
  120 :   285 :     sp->spart_first_init_birth_time =
  121 :   290 :   if (sp->overwrite_birth_density) {
  122 :   291 :     sp->spart_first_init_birth_density =
  123 :   296 :   if (sp->overwrite_birth_temperature) {
  124 :   297 :     sp->spart_first_init_birth_temperature =
  125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  139 :   404 :           sp->max_smoothing_iterations);
  140 :   406 :   if (sp->overwrite_birth_time)
  141 :   408 :             sp->spart_first_init_birth_time);
  142 :   411 :           sp->age_threshold_unlimited);
  143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  144 :   414 :           sp->max_time_step_young);
  145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  146 :   424 :                        sp->target_neighbours);
  147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  149 :   428 :                        sp->h_tolerance);
  150 :   430 :                        sp->log_max_h_change);
  151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  152 :   434 :                        sp->max_smoothing_iterations);
  153 :   462 :     free(sp->lum_tables_Z[i]);
  154 :   463 :     free(sp->lum_tables_ages[i]);
  155 :   464 :     free(sp->lum_tables_luminosities[i]);
  157 :    58 :     const double birth = sp->birth_scale_factor;
  158 :    62 :     return time - (double)sp->birth_time;
  159 :    76 :     sp->ids_ngbs_density[i] = -1;
  160 :    77 :   sp->num_ngb_density = 0;
  161 :    80 :   sp->density.wcount = 0.f;
  162 :    81 :   sp->density.wcount_dh = 0.f;
  163 :   100 :   sp->time_bin = 0;
  164 :   105 :   sp->group_data.mass = 0.f;
  165 :   106 :   sp->group_data.stellar_mass = 0.f;
  166 :   157 :   const float h = sp->h;
  167 :   163 :   sp->density.wcount *= h_inv_dim;
  168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  169 :   180 :       sp->id, sp->h, sp->density.wcount);
  170 :   183 :   sp->density.wcount = 0.f;
  171 :   184 :   sp->density.wcount_dh = 0.f;
  173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  180 :    64 :     ret[0] = sp->x[0];
  181 :    65 :     ret[1] = sp->x[1];
  182 :    66 :     ret[2] = sp->x[2];
  183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  185 :    94 :   const struct gpart *gp = sp->gpart;
  186 :   113 :   if (sp->gpart != NULL)
  187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
  189 :   211 :   sp->h_tolerance =
  190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  192 :   217 :   sp->delta_neighbours =
  193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
  196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
  198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
  199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  200 :   254 :           sp->max_smoothing_iterations);
  201 :   264 :                        sp->target_neighbours);
  202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  204 :   268 :                        sp->h_tolerance);
  205 :   270 :                        sp->log_max_h_change);
  206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
  207 :   274 :                        sp->max_smoothing_iterations);
  209 :    72 :   sp->group_data.mass = 0.f;
  210 :    73 :   sp->group_data.stellar_mass = 0.f;
  212 :    43 :   if (sp->birth_time == -1.) {
  213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  215 :    59 :     star_age = time - sp->birth_time;
  216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  217 :    88 :     return time - (double)sp->birth_time;
  218 :   102 :     sp->ids_ngbs_density[i] = -1;
  219 :   103 :   sp->num_ngb_density = 0;
  220 :   106 :   sp->density.wcount = 0.f;
  221 :   107 :   sp->density.wcount_dh = 0.f;
  222 :   110 :   sp->N_density = 0;
  223 :   111 :   sp->N_density_exact = 0;
  224 :   112 :   sp->rho = 0.f;
  225 :   113 :   sp->rho_exact = 0.f;
  226 :   114 :   sp->n = 0.f;
  227 :   115 :   sp->n_exact = 0.f;
  228 :   116 :   sp->inhibited_exact = 0;
  229 :   137 :   sp->time_bin = 0;
  230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  232 :   144 :     sp->birth_temperature =
  233 :   148 :     sp->last_enrichment_time = scale_factor;
  234 :   150 :     sp->last_enrichment_time = time;
  235 :   155 :   sp->group_data.mass = 0.f;
  236 :   156 :   sp->group_data.stellar_mass = 0.f;
  237 :   157 :   sp->group_data.ssfr = 0.f;
  238 :   208 :   const float h = sp->h;
  239 :   214 :   sp->density.wcount *= h_inv_dim;
  240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  241 :   218 :   sp->rho *= h_inv_dim;
  242 :   219 :   sp->n *= h_inv_dim;
  243 :   236 :       sp->id, sp->h, sp->density.wcount);
  244 :   239 :   sp->density.wcount = 0.f;
  245 :   240 :   sp->density.wcount_dh = 0.f;
  246 :   300 :   const float mass = sp->mass_init;
  247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
  248 :   306 :     age = time - sp->birth_time;
  250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  253 :    71 :     ret[0] = sp->x[0];
  254 :    72 :     ret[1] = sp->x[1];
  255 :    73 :     ret[2] = sp->x[2];
  256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  258 :   101 :   const struct gpart *gp = sp->gpart;
  259 :   128 :   if (sp->gpart != NULL)
  260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
  262 :   252 :   sp->h_tolerance =
  263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  265 :   258 :   sp->delta_neighbours =
  266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
  269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  270 :   275 :   sp->overwrite_birth_time =
  271 :   277 :   sp->overwrite_birth_density =
  272 :   279 :   sp->overwrite_birth_temperature =
  273 :   283 :   if (sp->overwrite_birth_time) {
  274 :   284 :     sp->spart_first_init_birth_time =
  275 :   289 :   if (sp->overwrite_birth_density) {
  276 :   290 :     sp->spart_first_init_birth_density =
  277 :   295 :   if (sp->overwrite_birth_temperature) {
  278 :   296 :     sp->spart_first_init_birth_temperature =
  279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
  287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
  289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
  291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
  292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  293 :   403 :           sp->max_smoothing_iterations);
  294 :   405 :   if (sp->overwrite_birth_time)
  295 :   407 :             sp->spart_first_init_birth_time);
  296 :   410 :           sp->age_threshold_unlimited);
  297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  298 :   413 :           sp->max_time_step_young);
  299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  300 :   423 :                        sp->target_neighbours);
  301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  303 :   427 :                        sp->h_tolerance);
  304 :   429 :                        sp->log_max_h_change);
  305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
  306 :   433 :                        sp->max_smoothing_iterations);
  307 :   461 :     free(sp->lum_tables_Z[i]);
  308 :   462 :     free(sp->lum_tables_ages[i]);
  309 :   463 :     free(sp->lum_tables_luminosities[i]);
  311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  312 :     3 :    61 :     return time - (double)sp->birth_time;
  313 :     4 :    81 :   sp->time_bin = 0;
  314 :     5 :    84 :   sp->group_data.mass = 0.f;
  315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
  316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
  317 :     8 :   100 :   sp->num_ngb_density = 0;
  318 :     9 :   103 :   sp->density.wcount = 0.f;
  319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
  320 :    11 :   152 :   const float h = sp->h;
  321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
  322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
  324 :    15 :   178 :   const float h = sp->h;
  325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
  326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
  327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  333 :    26 :    62 :     ret[0] = sp->x[0];
  334 :    27 :    63 :     ret[1] = sp->x[1];
  335 :    28 :    64 :     ret[2] = sp->x[2];
  336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
  339 :    32 :   111 :   if (sp->gpart != NULL)
  340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
  342 :    35 :   199 :   sp->h_tolerance =
  343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  345 :    38 :   205 :   sp->delta_neighbours =
  346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
  349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
  351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
  352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  353 :    46 :   242 :           sp->max_smoothing_iterations);
  354 :    47 :   252 :                        sp->target_neighbours);
  355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  357 :    50 :   256 :                        sp->h_tolerance);
  358 :    51 :   258 :                        sp->log_max_h_change);
  359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
  360 :    53 :   262 :                        sp->max_smoothing_iterations);
  361 :    55 :    43 :   if (sp->birth_time == -1.) {
  362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  364 :    58 :    59 :     star_age = time - sp->birth_time;
  365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  366 :    60 :    88 :     return time - (double)sp->birth_time;
  367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
  368 :    62 :   103 :   sp->num_ngb_density = 0;
  369 :    63 :   106 :   sp->density.wcount = 0.f;
  370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
  371 :    65 :   110 :   sp->N_density = 0;
  372 :    66 :   111 :   sp->N_density_exact = 0;
  373 :    67 :   112 :   sp->rho = 0.f;
  374 :    68 :   113 :   sp->rho_exact = 0.f;
  375 :    69 :   114 :   sp->n = 0.f;
  376 :    70 :   115 :   sp->n_exact = 0.f;
  377 :    71 :   116 :   sp->inhibited_exact = 0;
  378 :    72 :   137 :   sp->time_bin = 0;
  379 :    73 :   138 :   sp->f_E = -1.f;
  380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
  381 :    75 :   140 :   sp->number_of_heating_events = 0.;
  382 :    76 :   141 :   sp->number_of_SNII_events = 0;
  383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  385 :    79 :   148 :     sp->birth_temperature =
  386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
  387 :    81 :   154 :     sp->last_enrichment_time = time;
  388 :    82 :   159 :   sp->group_data.mass = 0.f;
  389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
  390 :    84 :   211 :   const float h = sp->h;
  391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
  392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  393 :    87 :   221 :   sp->rho *= h_inv_dim;
  394 :    88 :   222 :   sp->n *= h_inv_dim;
  395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
  396 :    90 :   242 :   sp->density.wcount = 0.f;
  397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
  398 :    92 :   303 :   const float mass = sp->mass_init;
  399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  400 :    94 :   309 :     age = time - sp->birth_time;
  401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  404 :    99 :    71 :     ret[0] = sp->x[0];
  405 :   100 :    72 :     ret[1] = sp->x[1];
  406 :   101 :    73 :     ret[2] = sp->x[2];
  407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
  410 :   105 :   128 :   if (sp->gpart != NULL)
  411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  413 :   108 :   253 :   sp->h_tolerance =
  414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  416 :   111 :   259 :   sp->delta_neighbours =
  417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  421 :   116 :   276 :   sp->overwrite_birth_time =
  422 :   117 :   278 :   sp->overwrite_birth_density =
  423 :   118 :   280 :   sp->overwrite_birth_temperature =
  424 :   119 :   284 :   if (sp->overwrite_birth_time) {
  425 :   120 :   285 :     sp->spart_first_init_birth_time =
  426 :   121 :   290 :   if (sp->overwrite_birth_density) {
  427 :   122 :   291 :     sp->spart_first_init_birth_density =
  428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
  429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
  430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  444 :   139 :   404 :           sp->max_smoothing_iterations);
  445 :   140 :   406 :   if (sp->overwrite_birth_time)
  446 :   141 :   408 :             sp->spart_first_init_birth_time);
  447 :   142 :   411 :           sp->age_threshold_unlimited);
  448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  449 :   144 :   414 :           sp->max_time_step_young);
  450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  451 :   146 :   424 :                        sp->target_neighbours);
  452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  454 :   149 :   428 :                        sp->h_tolerance);
  455 :   150 :   430 :                        sp->log_max_h_change);
  456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  457 :   152 :   434 :                        sp->max_smoothing_iterations);
  458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
  459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
  460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
./statistics.c:
  300 :     const struct gpart *gp = sp->gpart;
  303 :     if (sp->time_bin == time_bin_inhibited ||
  304 :         sp->time_bin == time_bin_not_created)
  313 :     const float m = sp->mass;
  388 :     const struct gpart *gp = sp->gpart;
  391 :     if (sp->time_bin == time_bin_inhibited ||
  392 :         sp->time_bin == time_bin_not_created)
  401 :     const float m = sp->mass;
./timestep.h:
  312 :                                            e->physical_constants, sp->gpart);
  317 :         sp->gpart, a_hydro, e->gravity_properties, e->cosmology);
  335 :     error("spart (id=%lld) wants a time-step (%e) below dt_min (%e)", sp->id,
  341 :       new_dt, sp->time_bin, num_time_bins, e->ti_current, e->time_base_inv);
./tracers/EAGLE/tracers.h:
  359 :     sp->tracers_data.averaged_SFR[i] = 0.f;
./tracers/EAGLE/tracers_io.h:
   67 :       ret[i] = sp->tracers_data.averaged_SFR[i] /
./velociraptor_io.h:
   40 :   if (sp->gpart == NULL)
   43 :     const ptrdiff_t offset = sp->gpart - e->s->gparts;
./velocity:
    2 :   438 :   const timebin_t spart_bin = sp->time_bin;
    3 :   442 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
    4 :   446 :         "s-particle in an impossible time-zone! sp->ti_end=%lld "
    5 :   541 :   return sp->time_bin == time_bin_inhibited;
    6 :   747 :   const timebin_t spart_bin = sp->time_bin;
    7 :   752 :       get_integer_time_begin(ti_current + 1, sp->time_bin);
    8 :   756 :         "s-particle in an impossible time-zone! sp->ti_beg=%lld "
   10 :  1353 :     if ((sp->x[0] < c->loc[0] / space_stretch) ||
   11 :  1354 :         (sp->x[1] < c->loc[1] / space_stretch) ||
   12 :  1355 :         (sp->x[2] < c->loc[2] / space_stretch) ||
   13 :  1356 :         (sp->x[0] >= (c->loc[0] + c->width[0]) * space_stretch) ||
   14 :  1357 :         (sp->x[1] >= (c->loc[1] + c->width[1]) * space_stretch) ||
   15 :  1358 :         (sp->x[2] >= (c->loc[2] + c->width[2]) * space_stretch))
   16 :  1361 :     if (sp->time_bin != time_bin_not_created &&
   17 :  1362 :         sp->time_bin != time_bin_inhibited) {
   18 :  1363 :       const struct gpart *gp = sp->gpart;
   19 :  1364 :       if (gp == NULL && sp->time_bin != time_bin_not_created)
   21 :   255 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
   22 :   256 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
   23 :   257 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
   24 :   260 :   sp->time_bin = e->min_active_bin;
   25 :   264 :   sp->ti_drift = e->ti_current;
   26 :   388 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
   27 :   389 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
   28 :   390 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
   29 :   393 :   sp->time_bin = e->min_active_bin;
   30 :   397 :   sp->ti_drift = e->ti_current;
   31 :   642 :   if (sp->time_bin == time_bin_inhibited) return;
   32 :   645 :   sp->time_bin = time_bin_inhibited;
   33 :   646 :   if (sp->gpart) {
   34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
   35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
   36 :   649 :     sp->gpart->type = swift_type_dark_matter;
   37 :   655 :   if (sp->gpart) {
   38 :   660 :   sp->gpart = NULL;
   39 :   813 :   if (sp->gpart == NULL)
   40 :   817 :   struct gpart *gp = sp->gpart;
   41 :   820 :   sp->time_bin = time_bin_inhibited;
   42 :   823 :   sp->gpart = NULL;
   43 :   827 :   gp->id_or_neg_offset = sp->id;
   44 :   830 :   gp->ti_kick = sp->ti_kick;
   45 :   873 :   sp->x_diff[0] = xp->x_diff[0];
   46 :   874 :   sp->x_diff[1] = xp->x_diff[1];
   47 :   875 :   sp->x_diff[2] = xp->x_diff[2];
   48 :   881 :   sp->id = gp->id_or_neg_offset;
   49 :   885 :   sp->gpart = gp;
   50 :   889 :   gp->time_bin = sp->time_bin;
   51 :   892 :   sp->mass = gp->mass;
   52 :   893 :   sp->x[0] = gp->x[0];
   53 :   894 :   sp->x[1] = gp->x[1];
   54 :   895 :   sp->x[2] = gp->x[2];
   55 :   896 :   sp->v[0] = gp->v_full[0];
   56 :   897 :   sp->v[1] = gp->v_full[1];
   57 :   898 :   sp->v[2] = gp->v_full[2];
   58 :   901 :   sp->ti_kick = gp->ti_kick;
   59 :   902 :   gp->ti_drift = sp->ti_drift;
   60 :   906 :   sp->h = p->h;
   61 :   941 :   sp->x_diff[0] = xp->x_diff[0];
   62 :   942 :   sp->x_diff[1] = xp->x_diff[1];
   63 :   943 :   sp->x_diff[2] = xp->x_diff[2];
   64 :   959 :   sp->id = space_get_new_unique_id(e->s);
   65 :   963 :   sp->gpart = gp;
   66 :   967 :   gp->time_bin = sp->time_bin;
   67 :   970 :   sp->mass = hydro_get_mass(p);
   68 :   971 :   sp->x[0] = p->x[0];
   69 :   972 :   sp->x[1] = p->x[1];
   70 :   973 :   sp->x[2] = p->x[2];
   71 :   974 :   sp->v[0] = p->v_full[0];
   72 :   975 :   sp->v[1] = p->v_full[1];
   73 :   976 :   sp->v[2] = p->v_full[2];
   74 :   979 :   sp->ti_kick = p->ti_kick;
   75 :   980 :   sp->ti_drift = p->ti_drift;
   76 :   984 :   sp->h = p->h;
   77 :  1024 :   sp->x_diff[0] = xp->x_diff[0];
   78 :  1025 :   sp->x_diff[1] = xp->x_diff[1];
   79 :  1026 :   sp->x_diff[2] = xp->x_diff[2];
   80 :  1032 :   sp->id = p->id;
   81 :  1036 :   sp->gpart = gp;
   82 :  1040 :   gp->time_bin = sp->time_bin;
   83 :  1043 :   sp->mass = gp->mass;
   84 :  1044 :   sp->x[0] = gp->x[0];
   85 :  1045 :   sp->x[1] = gp->x[1];
   86 :  1046 :   sp->x[2] = gp->x[2];
   87 :  1047 :   sp->v[0] = gp->v_full[0];
   88 :  1048 :   sp->v[1] = gp->v_full[1];
   89 :  1049 :   sp->v[2] = gp->v_full[2];
   90 :  1052 :   sp->ti_kick = gp->ti_kick;
   91 :  1053 :   gp->ti_drift = sp->ti_drift;
   92 :  1057 :   sp->r_cut = e->sink_properties->cut_off_radius;
   93 :  1090 :   sp->x_diff[0] = s->x_diff[0];
   94 :  1091 :   sp->x_diff[1] = s->x_diff[1];
   95 :  1092 :   sp->x_diff[2] = s->x_diff[2];
   96 :  1108 :   sp->id = space_get_new_unique_id(e->s);
   97 :  1112 :   sp->gpart = gp;
   98 :  1116 :   gp->time_bin = sp->time_bin;
   99 :  1119 :   sp->mass = s->mass;
  100 :  1120 :   sp->x[0] = s->x[0];
  101 :  1121 :   sp->x[1] = s->x[1];
  102 :  1122 :   sp->x[2] = s->x[2];
  103 :  1123 :   sp->v[0] = s->v[0];
  104 :  1124 :   sp->v[1] = s->v[1];
  105 :  1125 :   sp->v[2] = s->v[2];
  106 :  1128 :   sp->ti_kick = s->ti_kick;
  107 :  1129 :   sp->ti_drift = s->ti_drift;
  108 :  1133 :   sp->h = s->r_cut;
  110 :   666 :       if (fabs(sp->v[0] * dt_drift) > e->s->dim[0] ||
  111 :   667 :           fabs(sp->v[1] * dt_drift) > e->s->dim[1] ||
  112 :   668 :           fabs(sp->v[2] * dt_drift) > e->s->dim[2]) {
  113 :   677 :         if ((sp->x[0] > dim[0]) || (sp->x[0] < 0.) ||  // x
  114 :   678 :             (sp->x[1] > dim[1]) || (sp->x[1] < 0.) ||  // y
  115 :   679 :             (sp->x[2] > dim[2]) || (sp->x[2] < 0.)) {  // z
  116 :   707 :       sp->h = min(sp->h, stars_h_max);
  117 :   708 :       sp->h = max(sp->h, stars_h_min);
  118 :   711 :       const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  119 :   712 :                         sp->x_diff[1] * sp->x_diff[1] +
  120 :   713 :                         sp->x_diff[2] * sp->x_diff[2];
  121 :   716 :       const float dx2_sort = sp->x_diff_sort[0] * sp->x_diff_sort[0] +
  122 :   717 :                              sp->x_diff_sort[1] * sp->x_diff_sort[1] +
  123 :   718 :                              sp->x_diff_sort[2] * sp->x_diff_sort[2];
  124 :   723 :       cell_h_max = max(cell_h_max, sp->h);
  125 :   732 :         cell_h_max_active = max(cell_h_max_active, sp->h);
  126 :  1094 :       /* sp->h does not need to be limited. */
  128 :   864 :       for (int k = 0; k < csp->count; k++) {
  129 :   865 :         const int pid = csp->pairs[k].pid;
  130 :   866 :         const int pjd = csp->pairs[k].pjd;
  131 :   994 :       for (int k = 0; k < csp->count; k++) {
  132 :   995 :         const int pid = csp->pairs[k].pid;
  133 :   996 :         const int pjd = csp->pairs[k].pjd;
  134 :  1120 :       for (int k = 0; k < csp->count; k++) {
  135 :  1121 :         const int pid = csp->pairs[k].pid;
  136 :  1122 :         const int pjd = csp->pairs[k].pjd;
  137 :  1225 :       for (int k = 0; k < csp->count; k++) {
  138 :  1226 :         const int pid = csp->pairs[k].pid;
  139 :  1227 :         const int pjd = csp->pairs[k].pjd;
  140 :  1298 :   const struct engine *e = sp->e;
  141 :  1523 :   const struct engine *e = sp->e;
  142 :  1605 :       for (int k = 0; k < csp->count; k++) {
  143 :  1606 :         const int pid = csp->pairs[k].pid;
  144 :  1607 :         const int pjd = csp->pairs[k].pjd;
  146 :    69 :     sp->chemistry_data.metal_mass_fraction[i] =
  147 :    73 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  148 :   297 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  149 :   449 :   return sp->chemistry_data
  150 :   465 :   return sp->chemistry_data.metal_mass_fraction;
  151 :   554 :   return sp->chemistry_data
  152 :   556 :          sp->mass;
  154 :   193 :     sp->chemistry_data.metal_mass_fraction_total =
  155 :   197 :       sp->chemistry_data.metal_mass_fraction[elem] =
  156 :   203 :     sp->chemistry_data.smoothed_metal_mass_fraction_total =
  157 :   207 :       sp->chemistry_data.smoothed_metal_mass_fraction[elem] =
  158 :   517 :   return sp->chemistry_data.smoothed_metal_mass_fraction_total;
  159 :   532 :   return sp->chemistry_data.smoothed_metal_mass_fraction;
  160 :   615 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  161 :   640 :   return sp->chemistry_data.metal_mass_fraction_total;
  163 :    55 :     sp->chemistry_data.metal_mass_fraction[i] =
  164 :    59 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  165 :   429 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  166 :   549 :   return sp->chemistry_data
  167 :   564 :   return sp->chemistry_data.metal_mass_fraction[0];
  168 :   577 :   return sp->chemistry_data.metal_mass_fraction;
  169 :   654 :   return sp->chemistry_data
  170 :   656 :          sp->mass;
  172 :    56 :     sp->chemistry_data.metal_mass_fraction[i] =
  173 :    60 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  174 :   416 :     sp->chemistry_data.metal_mass_fraction[i] =
  175 :   417 :         data->initial_metallicities[i] * sp->mass;
  176 :   487 :   return sp->chemistry_data
  177 :   501 :   return sp->chemistry_data.metal_mass_fraction;
  178 :   590 :   return sp->chemistry_data
  179 :   592 :          sp->mass;
  181 :   254 :     sp->chemistry_data.metal_mass_fraction_total =
  182 :   258 :       sp->chemistry_data.metal_mass_fraction[elem] =
  183 :   601 :   return sp->chemistry_data.metal_mass_fraction_total;
  184 :   616 :   return sp->chemistry_data.metal_mass_fraction;
  185 :   699 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  186 :   724 :   return sp->chemistry_data.metal_mass_fraction_total;
  188 :   158 :     sp->chemistry_data.metal_mass_fraction_total =
  189 :   162 :       sp->chemistry_data.metal_mass_fraction[elem] =
  190 :   467 :   return sp->chemistry_data.metal_mass_fraction_total;
  191 :   482 :   return sp->chemistry_data.metal_mass_fraction;
  192 :   565 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  193 :   590 :   return sp->chemistry_data.metal_mass_fraction_total;
  195 :   100 :     if (!spart_is_inhibited(sp, e) && sp->time_bin != time_bin_not_created) {
  197 :   395 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  198 :   396 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  199 :   397 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  200 :   402 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  201 :   408 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  202 :   409 :                       sp->x_diff[1] * sp->x_diff[1] +
  203 :   410 :                       sp->x_diff[2] * sp->x_diff[2];
  204 :   412 :     stars_h_max = max(stars_h_max, sp->h);
  205 :   422 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  206 :   423 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  207 :   424 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  208 :   429 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  209 :   435 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  210 :   436 :                       sp->x_diff[1] * sp->x_diff[1] +
  211 :   437 :                       sp->x_diff[2] * sp->x_diff[2];
  212 :   439 :     sinks_h_max = max(sinks_h_max, sp->r_cut);
  214 :   248 :   if (sp->ti_drift != ti_old)
  215 :   251 :         "sp->ti_drift=%lld, "
  216 :   253 :         sp->ti_drift, ti_old, ti_current);
  217 :   255 :   sp->ti_drift = ti_current;
  218 :   261 :   const long long id = sp->id;
  219 :   267 :     sp->v[0] = 0.f;
  220 :   268 :     sp->v[1] = 0.f;
  221 :   269 :     sp->v[2] = 0.f;
  222 :   275 :   const double x[3] = {sp->x[0], sp->x[1], sp->x[2]};
  223 :   276 :   const float v_full[3] = {sp->v[0], sp->v[1], sp->v[2]};
  224 :   280 :   sp->x[0] += sp->v[0] * dt_drift;
  225 :   281 :   sp->x[1] += sp->v[1] * dt_drift;
  226 :   282 :   sp->x[2] += sp->v[2] * dt_drift;
  227 :   289 :     const float dx = sp->v[k] * dt_drift;
  228 :   290 :     sp->x_diff[k] -= dx;
  229 :   291 :     sp->x_diff_sort[k] -= dx;
  230 :   296 :   if (sp->gpart)
  231 :   297 :     lightcone_check_particle_crosses(e, replication_list, x, v_full, sp->gpart,
  233 :   105 :           get_integer_time_begin(e->ti_current, sp->time_bin);
  234 :   112 :       if (e->ti_current - ti_begin == get_integer_timestep(sp->time_bin))
  235 :  1361 :             get_integer_time_begin(e->ti_current, sp->time_bin);
  237 :   755 :     if (sp->time_bin == time_bin_inhibited)
  238 :   758 :     if (sp->time_bin == time_bin_not_created)
  239 :   763 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
  240 :   764 :                    sp->x[2] * s->iwidth[2]);
  241 :   773 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
  242 :   774 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
  243 :   775 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
  245 :   519 :           sp->gpart = gp;
  247 :   109 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  248 :   110 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  249 :   118 :     dt_star = get_timestep(sp->time_bin, time_base);
  250 :   124 :     if (cosmo->a > (double)sp->birth_scale_factor)
  251 :   126 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  252 :   130 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  253 :   163 :   if (sp->feedback_data.idle == 1) {
  254 :   164 :     sp->feedback_data.will_do_feedback = 0;
  255 :   176 :   sp->feedback_data.energy_ejected = 0;
  256 :   177 :   sp->feedback_data.will_do_feedback = 0;
  257 :   180 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  258 :   195 :   double NSN = sp->mass / phys_const->const_solar_mass *
  259 :   199 :   sp->feedback_data.energy_ejected = NSN * feedback_props->energy_per_CCSN;
  260 :   200 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  261 :   203 :   sp->feedback_data.mass_ejected = NSN * feedback_props->ejected_mass_per_CCSN;
  262 :   206 :   sp->feedback_data.metal_mass_ejected[0] =
  263 :   208 :   sp->feedback_data.metal_mass_ejected[AGORA_CHEMISTRY_ELEMENT_COUNT - 1] =
  264 :   212 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  265 :   215 :   sp->feedback_data.idle = 1;
  266 :   226 :   return sp->feedback_data.will_do_feedback;
  267 :   236 :   sp->feedback_data.enrichment_weight = 0.f;
  268 :   250 :   sp->feedback_data.energy_ejected = 0;
  269 :   253 :   sp->feedback_data.will_do_feedback = 1;
  270 :   256 :   sp->feedback_data.idle = 0;
  271 :   274 :   sp->feedback_data.energy_ejected = 0;
  272 :   277 :   sp->feedback_data.will_do_feedback = 1;
  273 :   280 :   sp->feedback_data.idle = 0;
  274 :   323 :   const float hi_inv = 1.f / sp->h;
  275 :   325 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
  277 :    39 :   return props->num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  278 :   139 :   return num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  280 :   110 :   const double rho_birth = sp->birth_density;
  281 :   175 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  282 :   177 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  283 :   247 :             sp->id, i, ti_begin, random_number_stellar_feedback_2);
  284 :   277 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  285 :   281 :     sp->f_E = f_E;
  286 :   282 :     sp->feedback_data.to_distribute.SNII_E_kinetic = E_kinetic;
  287 :   283 :     sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj =
  288 :   312 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  289 :   322 :   const double M_init = sp->mass_init;
  290 :   335 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  291 :   336 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  292 :   337 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  293 :   338 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  294 :   343 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  295 :   350 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  296 :   353 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  297 :   366 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  298 :   369 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  299 :   407 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  300 :   411 :                 abundances, feedback_props, &sp->feedback_data);
  301 :   415 :                abundances, feedback_props, &sp->feedback_data);
  302 :   419 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  303 :   424 :   sp->feedback_data.to_distribute.mass =
  304 :   425 :       sp->feedback_data.to_distribute.total_metal_mass +
  305 :   426 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  306 :   427 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  307 :   430 :   sp->feedback_data.to_distribute.energy +=
  308 :   431 :       sp->feedback_data.to_distribute.mass *
  309 :   435 :   sp->feedback_data.to_distribute.energy +=
  310 :   436 :       sp->feedback_data.to_distribute.mass * 0.5f *
  311 :   437 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  313 :   104 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  314 :   127 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  315 :   128 :   sp->feedback_data.to_collect.ngb_N = 0;
  316 :   129 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  317 :   130 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  318 :   131 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  319 :   134 :   ray_init(sp->feedback_data.SNII_rays_true, eagle_SNII_feedback_num_of_rays);
  320 :   135 :   ray_init(sp->feedback_data.SNII_rays_mirr, eagle_SNII_feedback_num_of_rays);
  321 :   136 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_true,
  322 :   138 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_mirr,
  323 :   142 :   sp->has_done_feedback = 0;
  324 :   164 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  325 :   166 :     return time - (double)sp->last_enrichment_time;
  326 :   178 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  327 :   181 :   sp->feedback_data.to_distribute.mass = 0.f;
  328 :   185 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  329 :   187 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  330 :   188 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  331 :   189 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  332 :   190 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  333 :   191 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  334 :   192 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  335 :   193 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  336 :   194 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  337 :   197 :   sp->feedback_data.to_distribute.energy = 0.f;
  338 :   200 :   sp->feedback_data.to_distribute.SNII_E_kinetic = 0.f;
  339 :   203 :   sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj = 0;
  340 :   258 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  341 :   262 :   const float h = sp->h;
  342 :   266 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  343 :   267 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  344 :   268 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  345 :   276 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  346 :   280 :     sp->last_enrichment_time = cosmo->a;
  347 :   282 :     sp->last_enrichment_time = time;
  348 :   285 :   sp->has_done_feedback = 1;
  349 :   313 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  350 :   316 :       sp->count_since_last_enrichment = 0;
  351 :   322 :     if (sp->birth_time == (float)time) {
  352 :   325 :       sp->count_since_last_enrichment = 0;
  353 :   336 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  354 :   338 :     age_of_star = time - (double)sp->birth_time;
  355 :   345 :     sp->count_since_last_enrichment = 0;
  356 :   350 :     sp->count_since_last_enrichment++;
  357 :   352 :     if ((sp->count_since_last_enrichment %
  358 :   356 :       sp->count_since_last_enrichment = 0;
  360 :   124 :   const double rho_birth = sp->birth_density;
  361 :   207 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  362 :   209 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  363 :   255 :             sp->id, i, ti_begin, random_number_stellar_feedback_3);
  364 :   271 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  365 :   287 :     double star_f_E = sp->f_E * sp->number_of_SNII_events;
  366 :   290 :     star_f_E = (star_f_E + f_E) / (sp->number_of_SNII_events + 1.);
  367 :   293 :     sp->f_E = star_f_E;
  368 :   294 :     sp->number_of_SNII_events++;
  369 :   295 :     sp->feedback_data.to_distribute.SNII_delta_u = delta_u;
  370 :   296 :     sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj =
  371 :   325 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  372 :   335 :   const double M_init = sp->mass_init;
  373 :   348 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  374 :   349 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  375 :   350 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  376 :   351 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  377 :   356 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  378 :   363 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  379 :   366 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  380 :   379 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  381 :   382 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  382 :   420 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  383 :   424 :                 abundances, feedback_props, &sp->feedback_data);
  384 :   428 :                abundances, feedback_props, &sp->feedback_data);
  385 :   432 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  386 :   437 :   sp->feedback_data.to_distribute.mass =
  387 :   438 :       sp->feedback_data.to_distribute.total_metal_mass +
  388 :   439 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  389 :   440 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  390 :   443 :   sp->feedback_data.to_distribute.energy +=
  391 :   444 :       sp->feedback_data.to_distribute.mass *
  392 :   448 :   sp->feedback_data.to_distribute.energy +=
  393 :   449 :       sp->feedback_data.to_distribute.mass * 0.5f *
  394 :   450 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  396 :   103 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  397 :   126 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  398 :   127 :   sp->feedback_data.to_collect.ngb_N = 0;
  399 :   128 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  400 :   129 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  401 :   130 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  402 :   133 :   ray_init(sp->feedback_data.SNII_rays, eagle_SNII_feedback_num_of_rays);
  403 :   136 :   sp->has_done_feedback = 0;
  404 :   158 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  405 :   160 :     return time - sp->last_enrichment_time;
  406 :   172 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  407 :   175 :   sp->feedback_data.to_distribute.mass = 0.f;
  408 :   179 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  409 :   181 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  410 :   182 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  411 :   183 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  412 :   184 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  413 :   185 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  414 :   186 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  415 :   187 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  416 :   188 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  417 :   191 :   sp->feedback_data.to_distribute.energy = 0.f;
  418 :   194 :   sp->feedback_data.to_distribute.SNII_delta_u = 0.f;
  419 :   197 :   sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj = 0;
  420 :   252 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  421 :   256 :   const float h = sp->h;
  422 :   260 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  423 :   261 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  424 :   262 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  425 :   270 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  426 :   274 :     sp->last_enrichment_time = cosmo->a;
  427 :   276 :     sp->last_enrichment_time = time;
  428 :   279 :   sp->has_done_feedback = 1;
  429 :   307 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  430 :   310 :       sp->count_since_last_enrichment = 0;
  431 :   316 :     if (sp->birth_time == (float)time) {
  432 :   319 :       sp->count_since_last_enrichment = 0;
  433 :   330 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  434 :   332 :     age_of_star = time - (double)sp->birth_time;
  435 :   339 :     sp->count_since_last_enrichment = 0;
  436 :   344 :     sp->count_since_last_enrichment++;
  437 :   346 :     if ((sp->count_since_last_enrichment %
  438 :   350 :       sp->count_since_last_enrichment = 0;
  440 :   169 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  441 :   170 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  442 :   178 :     dt_star = get_timestep(sp->time_bin, time_base);
  443 :   184 :     if (cosmo->a > (double)sp->birth_scale_factor)
  444 :   186 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  445 :   190 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  446 :   230 :   sp->feedback_data.energy_ejected = 0;
  447 :   231 :   sp->feedback_data.will_do_feedback = 0;
  448 :   234 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  449 :   258 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  450 :   261 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  451 :   272 :   return sp->feedback_data.will_do_feedback;
  452 :   302 :   sp->feedback_data.enrichment_weight = 0.f;
  453 :   316 :   sp->feedback_data.energy_ejected = 0;
  454 :   319 :   sp->feedback_data.will_do_feedback = 1;
  455 :   346 :   sp->feedback_data.energy_ejected = 0;
  456 :   349 :   sp->feedback_data.will_do_feedback = 1;
  457 :   392 :   const float hi_inv = 1.f / sp->h;
  458 :   394 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
  460 :    74 :   const float rand_sn = random_unit_interval(sp->id, ti_begin, random_type);
  461 :   121 :   sp->feedback_data.mass_ejected = mass_frac_snii * sp->sf_data.birth_mass +
  462 :   125 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  463 :   127 :     message("Negative mass, skipping current star: %lli", sp->id);
  464 :   129 :     sp->feedback_data.number_snia = 0;
  465 :   130 :     sp->feedback_data.number_snii = 0;
  466 :   131 :     sp->feedback_data.mass_ejected = 0;
  467 :   136 :   sp->mass -= sp->feedback_data.mass_ejected;
  468 :   156 :     sp->feedback_data.metal_mass_ejected[i] =
  469 :   164 :     sp->feedback_data.metal_mass_ejected[i] *= sp->sf_data.birth_mass;
  470 :   167 :     sp->feedback_data.metal_mass_ejected[i] +=
  471 :   212 :   sp->feedback_data.mass_ejected = mass_snia + mass_snii;
  472 :   215 :   sp->feedback_data.mass_ejected *= phys_const->const_solar_mass;
  473 :   218 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  474 :   220 :     message("Negative mass, skipping current star: %lli", sp->id);
  475 :   222 :     sp->feedback_data.number_snia = 0;
  476 :   223 :     sp->feedback_data.number_snii = 0;
  477 :   224 :     sp->feedback_data.mass_ejected = 0;
  478 :   229 :   sp->mass -= sp->feedback_data.mass_ejected;
  479 :   247 :     sp->feedback_data.metal_mass_ejected[i] =
  480 :   255 :     sp->feedback_data.metal_mass_ejected[i] *= m_avg * number_snii;
  481 :   258 :     sp->feedback_data.metal_mass_ejected[i] += snia_yields[i] * number_snia;
  482 :   261 :     sp->feedback_data.metal_mass_ejected[i] *= phys_const->const_solar_mass;
  483 :   331 :   const float m_init = sp->sf_data.birth_mass / phys_const->const_solar_mass;
  484 :   366 :     sp->feedback_data.number_snia = number_snia;
  485 :   367 :     sp->feedback_data.number_snii = number_snii;
  486 :   376 :     sp->feedback_data.number_snia = number_snia_f;
  487 :   377 :     sp->feedback_data.number_snii = number_snii_f;
  488 :   393 :   sp->feedback_data.energy_ejected = 0;
  489 :   397 :   sp->feedback_data.energy_ejected +=
  490 :   398 :       sp->feedback_data.number_snia * snia_energy;
  491 :   404 :   sp->feedback_data.energy_ejected +=
  492 :   405 :       sp->feedback_data.number_snii * snii_energy;
  494 :    96 :   double logmass6 = log10(sp->mass * fb_props->mass_to_solar_mass * 1.e-6); 
  495 :    99 :   double z = sp->chemistry_data.metal_mass_fraction_total;
  496 :   183 :   for (k=0; k<chemistry_element_count; k++) sp->feedback_data.delta_dust_mass[k]=0.f;
  497 :   187 :     sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->delta_AGBCOG1[chemistry_element_C] * 
  498 :   190 :     if (sp->feedback_data.delta_dust_mass[chemistry_element_C] > fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C])
  499 :   191 :             sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C];
  500 :   193 :     delta_metal_mass[chemistry_element_C] -= sp->feedback_data.delta_dust_mass[chemistry_element_C];
  501 :   202 :         sp->feedback_data.delta_dust_mass[k] = 16.0 * (delta_table[chemistry_element_Mg] * delta_metal_mass[chemistry_element_Mg] / 24.305 
  502 :   209 :         sp->feedback_data.delta_dust_mass[k] = delta_table[k] * delta_metal_mass[k];
  503 :   211 :       if (sp->feedback_data.delta_dust_mass[k] > fb_props->max_dust_fraction * delta_metal_mass[k])
  504 :   212 :             sp->feedback_data.delta_dust_mass[k] = fb_props->max_dust_fraction * delta_metal_mass[k];
  505 :   213 :       delta_metal_mass[k] -= sp->feedback_data.delta_dust_mass[k];
  506 :   261 :   if (sp->mass_init == sp->mass) fb_first = 1;
  507 :   263 :   z = sp->chemistry_data.metal_mass_fraction_total;
  508 :   272 :     feh = sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H];
  509 :   777 :   *ejecta_unprocessed = max(0.f, sp->mass_init * SNII_U);
  510 :   778 :   *ejecta_mass = max(0.f, sp->mass_init * SNII_E);
  511 :   793 :       SWn = sp->mass_init * SW_R;
  512 :   804 :       SWn = sp->mass_init * SW_R;
  513 :   805 :       SNn = sp->mass_init * SNII_R;
  514 :   808 :         *ejecta_energy += sp->mass_init * SNII_ENE;
  515 :   815 :       ejecta_metal_mass[k] = sp->mass_init * SNII_Z[k];
  516 :   824 :         SNn = sp->mass_init * SNIa_R;
  517 :   840 : /*    if (sp->id == 3554000 ) message("Star %lld with m=%g (frac=%g), age=%g Myr, Z=%g is ejecting %g Msun (fIa=%g, Zej=%g) and %g erg in %g Myr.",
  518 :   841 :           sp->id,
  519 :   842 :           sp->mass * fb_props->mass_to_solar_mass,
  520 :   843 :           sp->mass/sp->mass_init,
  522 :   240 :   sp->feedback_data.enrichment_weight_inv = 0.f;
  523 :   241 :   sp->feedback_data.ngb_N = 0;
  524 :   242 :   sp->feedback_data.ngb_mass = 0.f;
  525 :   243 :   sp->feedback_data.ngb_rho = 0.f;
  526 :   244 :   sp->feedback_data.ngb_Z = 0.f;
  527 :   246 :   sp->has_done_feedback = 0;
  528 :   289 :   sp->feedback_data.enrichment_weight = 0.f;
  529 :   292 :   sp->feedback_data.mass = 0.f;
  530 :   296 :     sp->feedback_data.metal_mass[i] = 0.f;
  531 :   298 :     sp->feedback_data.delta_dust_mass[i] = 0.f;
  532 :   301 :   sp->feedback_data.total_metal_mass = 0.f;
  533 :   304 :   sp->feedback_data.energy = 0.f;
  534 :   346 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  535 :   374 :       sp->gpart->fof_data.group_stellar_mass;
  536 :   387 :       sp->gpart->fof_data.group_mass;
  537 :   396 :   const double rand_for_scatter = random_unit_interval(sp->id, ti_current,
  538 :   437 :   if (sp->feedback_data.ngb_rho <= 0.) {
  539 :   438 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  540 :   443 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  541 :   447 :   const float h = sp->h;
  542 :   451 :   sp->feedback_data.ngb_rho *= h_inv_dim;
  543 :   453 :   const float rho_inv = 1.f / sp->feedback_data.ngb_rho;
  544 :   454 :   sp->feedback_data.ngb_Z *= h_inv_dim * rho_inv;
  545 :   459 :   if (sp->feedback_data.ngb_rho <= 0) {
  546 :   461 :             sp->id, sp->mass);
  547 :   468 :   if (sp->feedback_data.ngb_rho <= 0)
  548 :   470 :             sp->id, sp->mass);
  549 :   471 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  550 :   476 :   const float ngb_gas_mass = sp->feedback_data.ngb_mass;
  551 :   479 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  552 :   486 :       sp->feedback_data.enrichment_weight_inv;
  553 :   489 :   if (sp->feedback_data.enrichment_weight_inv < 0.)
  554 :   496 :   sp->feedback_data.enrichment_weight = enrichment_weight;
  555 :   499 :   if (sp->feedback_data.enrichment_weight < 0.)
  556 :   506 :      sp->feedback_data.feedback_mass_to_launch = eta * sp->mass;
  557 :   507 :      sp->feedback_data.feedback_wind_velocity = feedback_compute_kick_velocity(sp, cosmo, feedback_props, ti_begin);
  558 :   512 :   //sp->feedback_data.lum_habing = feedback_get_lum_from_star_particle(sp, star_age_beg_step, feedback_props);
  559 :   513 :   //message("G0: age %g  Lhabing %g\n",star_age_beg_step*feedback_props->time_to_Myr, sp->feedback_data.lum_habing);
  560 :   517 :   sp->feedback_data.mass = 0.f;
  561 :   521 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  562 :   547 :     message("[Fe/H] = %g", sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H]);
  563 :   548 :     message("Z = %g", sp->chemistry_data.metal_mass_fraction_total);
  564 :   551 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  565 :   556 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  566 :   561 :   if (sp->mass-ejecta_mass < 0.2 * sp->mass_init) {
  567 :   563 :           sp->id, sp->mass, ejecta_mass);
  568 :   578 :     dum = ejecta_unprocessed * sp->chemistry_data.metal_mass_fraction[elem];
  569 :   604 :   sp->feedback_data.total_metal_mass = 0.f;
  570 :   606 :     sp->feedback_data.metal_mass[elem] = ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  571 :   610 :       sp->feedback_data.total_metal_mass += ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  572 :   615 :     if (sp->mass/sp->mass_init<0.2) message("Star particle %lld with mass %g (init %g) is giving away %g Msun and %g erg (%g Msun metals).",
  573 :   616 :           sp->id, 
  574 :   617 :           sp->mass, 
  575 :   618 :           sp->mass_init, 
  576 :   621 :           sp->feedback_data.total_metal_mass * feedback_props->mass_to_solar_mass);
  577 :   626 :   if (sp->feedback_data.total_metal_mass > 0.f) {
  578 :   628 :                                          sp->feedback_data.metal_mass);
  579 :   633 :   sp->feedback_data.mass = ejecta_mass;
  580 :   637 :   //sp->feedback_data.energy = ejecta_energy;
  581 :   640 :   sp->feedback_data.feedback_energy_reservoir += ejecta_energy * cosmo->a_inv * cosmo->a_inv;
  582 :   643 :   sp->mass -= ejecta_mass;
  583 :   646 :   sp->last_enrichment_time = cosmo->a;
  584 :   650 :   sp->feedback_data.SNe_ThisTimeStep = N_SNe;
  585 :   654 :   sp->has_done_feedback = 1;
  587 :   285 :   pj->feedback_data.radius_stream = si->sf_data.SFR * si->feedback_mass_to_launch/ (sp->mass *2 * M_PI * rho_volumefilling * (wind_velocity - sp->velocity));
  589 :   344 :   if (sp->feedback_data.to_collect.ngb_rho <= 0) {
  590 :   346 :             sp->id, sp->mass);
  591 :   353 :   if (sp->feedback_data.to_collect.ngb_rho <= 0)
  592 :   355 :             sp->id, sp->mass);
  593 :   356 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  594 :   366 :   const double M_init = sp->mass_init;
  595 :   379 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  596 :   382 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  597 :   389 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  598 :   392 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  599 :   405 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  600 :   408 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  601 :   439 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  602 :   443 :                 abundances, feedback_props, &sp->feedback_data);
  603 :   447 :                abundances, feedback_props, &sp->feedback_data);
  604 :   451 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  605 :   456 :   sp->feedback_data.to_distribute.mass =
  606 :   457 :       sp->feedback_data.to_distribute.total_metal_mass +
  607 :   458 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  608 :   459 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  609 :   462 :   sp->feedback_data.to_distribute.energy +=
  610 :   463 :       sp->feedback_data.to_distribute.mass *
  611 :   467 :   sp->feedback_data.to_distribute.energy +=
  612 :   468 :       sp->feedback_data.to_distribute.mass * 0.5f *
  613 :   469 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  615 :   177 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  616 :   200 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  617 :   201 :   sp->feedback_data.to_collect.ngb_N = 0;
  618 :   202 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  619 :   203 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  620 :   204 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  621 :   206 :   sp->has_done_feedback = 0;
  622 :   242 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  623 :   244 :     return time - (double)sp->last_enrichment_time;
  624 :   256 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  625 :   259 :   sp->feedback_data.to_distribute.mass = 0.f;
  626 :   263 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  627 :   265 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  628 :   266 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  629 :   267 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  630 :   268 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  631 :   269 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  632 :   270 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  633 :   271 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  634 :   272 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  635 :   275 :   sp->feedback_data.to_distribute.energy = 0.f;
  636 :   331 :   if (sp->feedback_data.to_collect.ngb_rho <= 0.) {
  637 :   332 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  638 :   337 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  639 :   341 :   const float h = sp->h;
  640 :   345 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  641 :   347 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  642 :   348 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  643 :   356 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  644 :   360 :     sp->last_enrichment_time = cosmo->a;
  645 :   362 :     sp->last_enrichment_time = time;
  646 :   365 :   sp->has_done_feedback = 1;
  647 :   393 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  648 :   396 :       sp->count_since_last_enrichment = 0;
  649 :   402 :     if (sp->birth_time == (float)time) {
  650 :   405 :       sp->count_since_last_enrichment = 0;
  651 :   416 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  652 :   418 :     age_of_star = time - (double)sp->birth_time;
  653 :   425 :     sp->count_since_last_enrichment = 0;
  654 :   430 :     sp->count_since_last_enrichment++;
  655 :   432 :     if ((sp->count_since_last_enrichment %
  656 :   436 :       sp->count_since_last_enrichment = 0;
  658 :    41 :   const float v_circ = pow(sp->feedback_data.host_galaxy_mass /
  659 :    44 :   const float sigma = sqrtf(sp->potential * cosmo->a_inv);
  660 :    48 :   sp->feedback_data.to_distribute.v_kick =
  661 :    59 :   sp->feedback_data.to_distribute.v_kick =
  662 :   121 :   return (sp->birth_time != -1.);
  663 :   132 :   sp->feedback_data.host_galaxy_mass = 1.;
  664 :   153 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  665 :   155 :     return time - (double)sp->last_enrichment_time;
  666 :   177 :   sp->feedback_data.to_distribute.simba_delay_time =
  667 :   218 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  668 :   232 :     sp->last_enrichment_time = cosmo->a;
  669 :   234 :     sp->last_enrichment_time = time;
  670 :   237 :   sp->has_done_feedback = 1;
  672 :  4585 :   sp->gpart->fof_data.is_grouppable = 1;
  673 :  4626 :   if (sp->gpart != gp) error("Copying group properties to the wrong star!");
  674 :  4629 :   sp->group_data.mass = gp->fof_data.group_mass;
  675 :  4630 :   sp->group_data.stellar_mass = gp->fof_data.group_stellar_mass;
  676 :  4632 :     sp->group_data.ssfr = gp->fof_data.group_sfr / gp->fof_data.group_stellar_mass;
  677 :  4634 :     sp->group_data.ssfr = 0.f;
  679 :    44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  680 :    45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  681 :    46 :   649 :     sp->gpart->type = swift_type_dark_matter;
  682 :    89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  683 :    90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  684 :    91 :   355 :       sp->gpart->fof_data.group_mass;
  685 :   120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  686 :   123 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  687 :   124 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  688 :   125 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  689 :   126 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  690 :   127 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  691 :   128 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  692 :   129 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  693 :   130 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  694 :   131 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  695 :   132 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  696 :   133 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  697 :   134 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  698 :   135 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  699 :   136 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  700 :   137 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  701 :   138 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  702 :   139 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  703 :   140 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  704 :   141 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  705 :   142 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  706 :   143 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  707 :   144 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  708 :   145 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  709 :   146 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  710 :   147 :  1490 :   251 :   sp->gpart->mass += gas_mass;
  711 :   148 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  712 :   149 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  713 :   150 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  714 :   151 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
  715 :   152 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
  716 :   153 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
  717 :   154 :  1591 :   339 :     sp->gpart->mass = mass_star;
  718 :   155 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  719 :   156 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  720 :   157 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  721 :   158 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  722 :   159 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  723 :   160 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  724 :   161 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  725 :   162 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  726 :   163 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  727 :   164 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  728 :   165 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  729 :   166 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  730 :   167 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  731 :   168 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  732 :   169 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  733 :   170 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  734 :   171 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  735 :   172 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  736 :   173 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  737 :   174 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  738 :   175 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  739 :   176 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  740 :   177 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  741 :   178 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  742 :   179 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  743 :   180 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  744 :   181 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  745 :   182 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  746 :   183 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  747 :   184 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  748 :   185 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  749 :   186 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  750 :   187 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  751 :   190 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  752 :   308 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  753 :   309 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  754 :   310 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  755 :   311 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  756 :   312 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  757 :   313 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  758 :   314 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  759 :   315 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  760 :   316 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  761 :   375 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  762 :   382 :   251 :   sp->gpart->mass += gas_mass;
  763 :   383 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  764 :   384 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  765 :   385 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  766 :   421 :   274 :   sp->gpart->x[0] = sp->x[0];
  767 :   422 :   275 :   sp->gpart->x[1] = sp->x[1];
  768 :   423 :   276 :   sp->gpart->x[2] = sp->x[2];
  769 :   427 :   339 :     sp->gpart->mass = mass_star;
  770 :   430 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  771 :   431 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  772 :   432 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  773 :   434 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  774 :   435 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  775 :   436 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  776 :   438 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  777 :   439 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  778 :   440 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  779 :   441 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  780 :   442 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  781 :   443 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  782 :   444 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  783 :   445 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  784 :   446 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  785 :   447 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  786 :   448 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  787 :   449 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  788 :   450 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  789 :   451 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  790 :   452 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  791 :   453 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  792 :   454 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  793 :   455 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  794 :   457 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  795 :   458 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  796 :   459 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  797 :   460 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  798 :   461 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  799 :   462 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  800 :   463 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  801 :   464 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  802 :   465 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  804 :    44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  805 :    45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  806 :    46 :   649 :     sp->gpart->type = swift_type_dark_matter;
  807 :    89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  808 :    90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  809 :    91 :   355 :       sp->gpart->fof_data.group_mass;
  810 :   120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  811 :   162 :    44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  812 :   163 :    45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  813 :   164 :    46 :   649 :     sp->gpart->type = swift_type_dark_matter;
  814 :   202 :    89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  815 :   203 :    90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  816 :   204 :    91 :   355 :       sp->gpart->fof_data.group_mass;
  817 :   230 :   120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  818 :   232 :   123 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  819 :   233 :   124 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  820 :   234 :   125 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  821 :   235 :   126 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  822 :   236 :   127 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  823 :   237 :   128 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  824 :   238 :   129 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  825 :   239 :   130 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  826 :   240 :   131 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  827 :   241 :   132 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  828 :   242 :   133 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  829 :   243 :   134 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  830 :   244 :   135 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  831 :   245 :   136 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  832 :   246 :   137 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  833 :   247 :   138 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  834 :   248 :   139 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  835 :   249 :   140 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  836 :   250 :   141 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  837 :   251 :   142 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  838 :   252 :   143 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  839 :   253 :   144 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  840 :   254 :   145 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  841 :   255 :   146 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  842 :   256 :   147 :  1490 :   251 :   sp->gpart->mass += gas_mass;
  843 :   257 :   148 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  844 :   258 :   149 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  845 :   259 :   150 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  846 :   260 :   151 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
  847 :   261 :   152 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
  848 :   262 :   153 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
  849 :   263 :   154 :  1591 :   339 :     sp->gpart->mass = mass_star;
  850 :   264 :   155 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  851 :   265 :   156 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  852 :   266 :   157 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  853 :   267 :   158 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  854 :   268 :   159 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  855 :   269 :   160 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  856 :   270 :   161 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  857 :   271 :   162 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  858 :   272 :   163 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  859 :   273 :   164 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  860 :   274 :   165 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  861 :   275 :   166 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  862 :   276 :   167 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  863 :   277 :   168 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  864 :   278 :   169 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  865 :   279 :   170 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  866 :   280 :   171 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  867 :   281 :   172 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  868 :   282 :   173 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  869 :   283 :   174 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  870 :   284 :   175 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  871 :   285 :   176 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  872 :   286 :   177 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  873 :   287 :   178 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  874 :   288 :   179 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  875 :   289 :   180 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  876 :   290 :   181 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  877 :   291 :   182 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  878 :   292 :   183 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  879 :   293 :   184 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  880 :   294 :   185 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  881 :   295 :   186 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  882 :   296 :   187 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  883 :   298 :   190 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  884 :   397 :   308 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  885 :   398 :   309 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  886 :   399 :   310 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  887 :   400 :   311 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  888 :   401 :   312 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  889 :   402 :   313 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  890 :   403 :   314 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  891 :   404 :   315 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  892 :   405 :   316 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  893 :   461 :   375 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  894 :   467 :   382 :   251 :   sp->gpart->mass += gas_mass;
  895 :   468 :   383 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  896 :   469 :   384 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  897 :   470 :   385 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  898 :   500 :   421 :   274 :   sp->gpart->x[0] = sp->x[0];
  899 :   501 :   422 :   275 :   sp->gpart->x[1] = sp->x[1];
  900 :   502 :   423 :   276 :   sp->gpart->x[2] = sp->x[2];
  901 :   506 :   427 :   339 :     sp->gpart->mass = mass_star;
  902 :   508 :   430 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  903 :   509 :   431 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  904 :   510 :   432 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  905 :   511 :   434 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  906 :   512 :   435 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  907 :   513 :   436 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  908 :   514 :   438 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  909 :   515 :   439 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  910 :   516 :   440 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  911 :   517 :   441 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  912 :   518 :   442 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  913 :   519 :   443 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  914 :   520 :   444 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  915 :   521 :   445 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  916 :   522 :   446 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  917 :   523 :   447 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  918 :   524 :   448 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  919 :   525 :   449 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  920 :   526 :   450 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  921 :   527 :   451 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  922 :   528 :   452 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  923 :   529 :   453 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  924 :   530 :   454 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  925 :   531 :   455 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  926 :   532 :   457 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  927 :   533 :   458 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  928 :   534 :   459 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  929 :   535 :   460 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  930 :   536 :   461 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  931 :   537 :   462 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  932 :   538 :   463 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  933 :   539 :   464 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  934 :   540 :   465 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  935 :   581 :    44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  936 :   582 :    45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  937 :   583 :    46 :   649 :     sp->gpart->type = swift_type_dark_matter;
  938 :   621 :    89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  939 :   622 :    90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  940 :   623 :    91 :   355 :       sp->gpart->fof_data.group_mass;
  941 :   649 :   120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  942 :   690 :   162 :    44 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  943 :   691 :   163 :    45 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  944 :   692 :   164 :    46 :   649 :     sp->gpart->type = swift_type_dark_matter;
  945 :   730 :   202 :    89 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  946 :   731 :   203 :    90 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  947 :   732 :   204 :    91 :   355 :       sp->gpart->fof_data.group_mass;
  948 :   758 :   230 :   120 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  949 :   760 :   232 :   123 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  950 :   761 :   233 :   124 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  951 :   762 :   234 :   125 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  952 :   763 :   235 :   126 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  953 :   764 :   236 :   127 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  954 :   765 :   237 :   128 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  955 :   766 :   238 :   129 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
  956 :   767 :   239 :   130 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
  957 :   768 :   240 :   131 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
  958 :   769 :   241 :   132 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
  959 :   770 :   242 :   133 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  960 :   771 :   243 :   134 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  961 :   772 :   244 :   135 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
  962 :   773 :   245 :   136 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
  963 :   774 :   246 :   137 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  964 :   775 :   247 :   138 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  965 :   776 :   248 :   139 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  966 :   777 :   249 :   140 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  967 :   778 :   250 :   141 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  968 :   779 :   251 :   142 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  969 :   780 :   252 :   143 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
  970 :   781 :   253 :   144 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
  971 :   782 :   254 :   145 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
  972 :   783 :   255 :   146 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  973 :   784 :   256 :   147 :  1490 :   251 :   sp->gpart->mass += gas_mass;
  974 :   785 :   257 :   148 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
  975 :   786 :   258 :   149 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
  976 :   787 :   259 :   150 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
  977 :   788 :   260 :   151 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
  978 :   789 :   261 :   152 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
  979 :   790 :   262 :   153 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
  980 :   791 :   263 :   154 :  1591 :   339 :     sp->gpart->mass = mass_star;
  981 :   792 :   264 :   155 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  982 :   793 :   265 :   156 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  983 :   794 :   266 :   157 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  984 :   795 :   267 :   158 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  985 :   796 :   268 :   159 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  986 :   797 :   269 :   160 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  987 :   798 :   270 :   161 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  988 :   799 :   271 :   162 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  989 :   800 :   272 :   163 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  990 :   801 :   273 :   164 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  991 :   802 :   274 :   165 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  992 :   803 :   275 :   166 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  993 :   804 :   276 :   167 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  994 :   805 :   277 :   168 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  995 :   806 :   278 :   169 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  996 :   807 :   279 :   170 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  997 :   808 :   280 :   171 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  998 :   809 :   281 :   172 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  999 :   810 :   282 :   173 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1000 :   811 :   283 :   174 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1001 :   812 :   284 :   175 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1002 :   813 :   285 :   176 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1003 :   814 :   286 :   177 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1004 :   815 :   287 :   178 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1005 :   816 :   288 :   179 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1006 :   817 :   289 :   180 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1007 :   818 :   290 :   181 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1008 :   819 :   291 :   182 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1009 :   820 :   292 :   183 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1010 :   821 :   293 :   184 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1011 :   822 :   294 :   185 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1012 :   823 :   295 :   186 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1013 :   824 :   296 :   187 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1014 :   826 :   298 :   190 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
 1015 :   925 :   397 :   308 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
 1016 :   926 :   398 :   309 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
 1017 :   927 :   399 :   310 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
 1018 :   928 :   400 :   311 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
 1019 :   929 :   401 :   312 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
 1020 :   930 :   402 :   313 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
 1021 :   931 :   403 :   314 :   331 :   sp->gpart->v_full[0] = sp->v[0];
 1022 :   932 :   404 :   315 :   332 :   sp->gpart->v_full[1] = sp->v[1];
 1023 :   933 :   405 :   316 :   333 :   sp->gpart->v_full[2] = sp->v[2];
 1024 :   989 :   461 :   375 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
 1025 :   995 :   467 :   382 :   251 :   sp->gpart->mass += gas_mass;
 1026 :   996 :   468 :   383 :   279 :   sp->gpart->v_full[0] = sp->v[0];
 1027 :   997 :   469 :   384 :   280 :   sp->gpart->v_full[1] = sp->v[1];
 1028 :   998 :   470 :   385 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 1029 :  1028 :   500 :   421 :   274 :   sp->gpart->x[0] = sp->x[0];
 1030 :  1029 :   501 :   422 :   275 :   sp->gpart->x[1] = sp->x[1];
 1031 :  1030 :   502 :   423 :   276 :   sp->gpart->x[2] = sp->x[2];
 1032 :  1034 :   506 :   427 :   339 :     sp->gpart->mass = mass_star;
 1033 :  1036 :   508 :   430 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1034 :  1037 :   509 :   431 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1035 :  1038 :   510 :   432 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1036 :  1039 :   511 :   434 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1037 :  1040 :   512 :   435 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1038 :  1041 :   513 :   436 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1039 :  1042 :   514 :   438 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1040 :  1043 :   515 :   439 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1041 :  1044 :   516 :   440 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1042 :  1045 :   517 :   441 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1043 :  1046 :   518 :   442 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1044 :  1047 :   519 :   443 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1045 :  1048 :   520 :   444 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1046 :  1049 :   521 :   445 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1047 :  1050 :   522 :   446 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1048 :  1051 :   523 :   447 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1049 :  1052 :   524 :   448 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1050 :  1053 :   525 :   449 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1051 :  1054 :   526 :   450 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1052 :  1055 :   527 :   451 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1053 :  1056 :   528 :   452 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1054 :  1057 :   529 :   453 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1055 :  1058 :   530 :   454 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1056 :  1059 :   531 :   455 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1057 :  1060 :   532 :   457 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1058 :  1061 :   533 :   458 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1059 :  1062 :   534 :   459 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1060 :  1063 :   535 :   460 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1061 :  1064 :   536 :   461 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1062 :  1065 :   537 :   462 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1063 :  1066 :   538 :   463 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1064 :  1067 :   539 :   464 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1065 :  1068 :   540 :   465 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1066 :  1070 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
 1067 :  1071 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
 1068 :  1072 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
 1069 :  1073 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
 1070 :  1074 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
 1071 :  1075 :   536 :   355 :       sp->gpart->fof_data.group_mass;
 1072 :  1076 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
 1073 :  1077 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
 1074 :  1078 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
 1075 :  1079 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
 1076 :  1080 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
 1077 :  1081 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
 1078 :  1082 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
 1079 :  1083 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
 1080 :  1084 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
 1081 :  1085 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
 1082 :  1086 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
 1083 :  1087 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
 1084 :  1088 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
 1085 :  1089 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
 1086 :  1090 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
 1087 :  1091 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
 1088 :  1092 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
 1089 :  1093 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
 1090 :  1094 :  1490 :   251 :   sp->gpart->mass += gas_mass;
 1091 :  1095 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
 1092 :  1096 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
 1093 :  1097 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 1094 :  1098 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
 1095 :  1099 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
 1096 :  1100 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
 1097 :  1101 :  1591 :   339 :     sp->gpart->mass = mass_star;
 1098 :  1102 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1099 :  1103 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1100 :  1104 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1101 :  1105 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1102 :  1106 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1103 :  1107 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1104 :  1108 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1105 :  1109 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1106 :  1110 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1107 :  1111 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1108 :  1112 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1109 :  1113 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1110 :  1114 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1111 :  1115 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1112 :  1116 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1113 :  1117 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1114 :  1118 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1115 :  1119 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1116 :  1120 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1117 :  1121 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1118 :  1122 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1119 :  1123 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1120 :  1124 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1121 :  1125 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1122 :  1126 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1123 :  1127 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1124 :  1128 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1125 :  1129 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1126 :  1130 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1127 :  1131 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1128 :  1132 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1129 :  1133 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1130 :  1134 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1131 :  1137 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
 1132 :  1255 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
 1133 :  1256 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
 1134 :  1257 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
 1135 :  1258 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
 1136 :  1259 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
 1137 :  1260 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
 1138 :  1261 :   331 :   sp->gpart->v_full[0] = sp->v[0];
 1139 :  1262 :   332 :   sp->gpart->v_full[1] = sp->v[1];
 1140 :  1263 :   333 :   sp->gpart->v_full[2] = sp->v[2];
 1141 :  1322 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
 1142 :  1329 :   251 :   sp->gpart->mass += gas_mass;
 1143 :  1330 :   279 :   sp->gpart->v_full[0] = sp->v[0];
 1144 :  1331 :   280 :   sp->gpart->v_full[1] = sp->v[1];
 1145 :  1332 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 1146 :  1368 :   274 :   sp->gpart->x[0] = sp->x[0];
 1147 :  1369 :   275 :   sp->gpart->x[1] = sp->x[1];
 1148 :  1370 :   276 :   sp->gpart->x[2] = sp->x[2];
 1149 :  1374 :   339 :     sp->gpart->mass = mass_star;
 1150 :  1377 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1151 :  1378 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1152 :  1379 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1153 :  1381 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1154 :  1382 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1155 :  1383 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1156 :  1385 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1157 :  1386 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1158 :  1387 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1159 :  1388 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1160 :  1389 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1161 :  1390 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1162 :  1391 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1163 :  1392 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1164 :  1393 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1165 :  1394 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1166 :  1395 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1167 :  1396 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1168 :  1397 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1169 :  1398 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1170 :  1399 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1171 :  1400 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1172 :  1401 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1173 :  1402 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1174 :  1404 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1175 :  1405 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1176 :  1406 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1177 :  1407 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1178 :  1408 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1179 :  1409 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1180 :  1410 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 1181 :  1411 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 1182 :  1412 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 1184 :     2 :   438 :   const timebin_t spart_bin = sp->time_bin;
 1185 :     3 :   442 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1186 :     4 :   446 :         "s-particle in an impossible time-zone! sp->ti_end=%lld "
 1187 :     5 :   541 :   return sp->time_bin == time_bin_inhibited;
 1188 :     6 :   747 :   const timebin_t spart_bin = sp->time_bin;
 1189 :     7 :   752 :       get_integer_time_begin(ti_current + 1, sp->time_bin);
 1190 :     8 :   756 :         "s-particle in an impossible time-zone! sp->ti_beg=%lld "
 1191 :    10 :  1353 :     if ((sp->x[0] < c->loc[0] / space_stretch) ||
 1192 :    11 :  1354 :         (sp->x[1] < c->loc[1] / space_stretch) ||
 1193 :    12 :  1355 :         (sp->x[2] < c->loc[2] / space_stretch) ||
 1194 :    13 :  1356 :         (sp->x[0] >= (c->loc[0] + c->width[0]) * space_stretch) ||
 1195 :    14 :  1357 :         (sp->x[1] >= (c->loc[1] + c->width[1]) * space_stretch) ||
 1196 :    15 :  1358 :         (sp->x[2] >= (c->loc[2] + c->width[2]) * space_stretch))
 1197 :    16 :  1361 :     if (sp->time_bin != time_bin_not_created &&
 1198 :    17 :  1362 :         sp->time_bin != time_bin_inhibited) {
 1199 :    18 :  1363 :       const struct gpart *gp = sp->gpart;
 1200 :    19 :  1364 :       if (gp == NULL && sp->time_bin != time_bin_not_created)
 1201 :    21 :   255 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
 1202 :    22 :   256 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
 1203 :    23 :   257 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
 1204 :    24 :   260 :   sp->time_bin = e->min_active_bin;
 1205 :    25 :   264 :   sp->ti_drift = e->ti_current;
 1206 :    26 :   388 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
 1207 :    27 :   389 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
 1208 :    28 :   390 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
 1209 :    29 :   393 :   sp->time_bin = e->min_active_bin;
 1210 :    30 :   397 :   sp->ti_drift = e->ti_current;
 1211 :    31 :   642 :   if (sp->time_bin == time_bin_inhibited) return;
 1212 :    32 :   645 :   sp->time_bin = time_bin_inhibited;
 1213 :    33 :   646 :   if (sp->gpart) {
 1214 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
 1215 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
 1216 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
 1217 :    37 :   655 :   if (sp->gpart) {
 1218 :    38 :   660 :   sp->gpart = NULL;
 1219 :    39 :   813 :   if (sp->gpart == NULL)
 1220 :    40 :   817 :   struct gpart *gp = sp->gpart;
 1221 :    41 :   820 :   sp->time_bin = time_bin_inhibited;
 1222 :    42 :   823 :   sp->gpart = NULL;
 1223 :    43 :   827 :   gp->id_or_neg_offset = sp->id;
 1224 :    44 :   830 :   gp->ti_kick = sp->ti_kick;
 1225 :    45 :   873 :   sp->x_diff[0] = xp->x_diff[0];
 1226 :    46 :   874 :   sp->x_diff[1] = xp->x_diff[1];
 1227 :    47 :   875 :   sp->x_diff[2] = xp->x_diff[2];
 1228 :    48 :   881 :   sp->id = gp->id_or_neg_offset;
 1229 :    49 :   885 :   sp->gpart = gp;
 1230 :    50 :   889 :   gp->time_bin = sp->time_bin;
 1231 :    51 :   892 :   sp->mass = gp->mass;
 1232 :    52 :   893 :   sp->x[0] = gp->x[0];
 1233 :    53 :   894 :   sp->x[1] = gp->x[1];
 1234 :    54 :   895 :   sp->x[2] = gp->x[2];
 1235 :    55 :   896 :   sp->v[0] = gp->v_full[0];
 1236 :    56 :   897 :   sp->v[1] = gp->v_full[1];
 1237 :    57 :   898 :   sp->v[2] = gp->v_full[2];
 1238 :    58 :   901 :   sp->ti_kick = gp->ti_kick;
 1239 :    59 :   902 :   gp->ti_drift = sp->ti_drift;
 1240 :    60 :   906 :   sp->h = p->h;
 1241 :    61 :   941 :   sp->x_diff[0] = xp->x_diff[0];
 1242 :    62 :   942 :   sp->x_diff[1] = xp->x_diff[1];
 1243 :    63 :   943 :   sp->x_diff[2] = xp->x_diff[2];
 1244 :    64 :   959 :   sp->id = space_get_new_unique_id(e->s);
 1245 :    65 :   963 :   sp->gpart = gp;
 1246 :    66 :   967 :   gp->time_bin = sp->time_bin;
 1247 :    67 :   970 :   sp->mass = hydro_get_mass(p);
 1248 :    68 :   971 :   sp->x[0] = p->x[0];
 1249 :    69 :   972 :   sp->x[1] = p->x[1];
 1250 :    70 :   973 :   sp->x[2] = p->x[2];
 1251 :    71 :   974 :   sp->v[0] = p->v_full[0];
 1252 :    72 :   975 :   sp->v[1] = p->v_full[1];
 1253 :    73 :   976 :   sp->v[2] = p->v_full[2];
 1254 :    74 :   979 :   sp->ti_kick = p->ti_kick;
 1255 :    75 :   980 :   sp->ti_drift = p->ti_drift;
 1256 :    76 :   984 :   sp->h = p->h;
 1257 :    77 :  1024 :   sp->x_diff[0] = xp->x_diff[0];
 1258 :    78 :  1025 :   sp->x_diff[1] = xp->x_diff[1];
 1259 :    79 :  1026 :   sp->x_diff[2] = xp->x_diff[2];
 1260 :    80 :  1032 :   sp->id = p->id;
 1261 :    81 :  1036 :   sp->gpart = gp;
 1262 :    82 :  1040 :   gp->time_bin = sp->time_bin;
 1263 :    83 :  1043 :   sp->mass = gp->mass;
 1264 :    84 :  1044 :   sp->x[0] = gp->x[0];
 1265 :    85 :  1045 :   sp->x[1] = gp->x[1];
 1266 :    86 :  1046 :   sp->x[2] = gp->x[2];
 1267 :    87 :  1047 :   sp->v[0] = gp->v_full[0];
 1268 :    88 :  1048 :   sp->v[1] = gp->v_full[1];
 1269 :    89 :  1049 :   sp->v[2] = gp->v_full[2];
 1270 :    90 :  1052 :   sp->ti_kick = gp->ti_kick;
 1271 :    91 :  1053 :   gp->ti_drift = sp->ti_drift;
 1272 :    92 :  1057 :   sp->r_cut = e->sink_properties->cut_off_radius;
 1273 :    93 :  1090 :   sp->x_diff[0] = s->x_diff[0];
 1274 :    94 :  1091 :   sp->x_diff[1] = s->x_diff[1];
 1275 :    95 :  1092 :   sp->x_diff[2] = s->x_diff[2];
 1276 :    96 :  1108 :   sp->id = space_get_new_unique_id(e->s);
 1277 :    97 :  1112 :   sp->gpart = gp;
 1278 :    98 :  1116 :   gp->time_bin = sp->time_bin;
 1279 :    99 :  1119 :   sp->mass = s->mass;
 1280 :   100 :  1120 :   sp->x[0] = s->x[0];
 1281 :   101 :  1121 :   sp->x[1] = s->x[1];
 1282 :   102 :  1122 :   sp->x[2] = s->x[2];
 1283 :   103 :  1123 :   sp->v[0] = s->v[0];
 1284 :   104 :  1124 :   sp->v[1] = s->v[1];
 1285 :   105 :  1125 :   sp->v[2] = s->v[2];
 1286 :   106 :  1128 :   sp->ti_kick = s->ti_kick;
 1287 :   107 :  1129 :   sp->ti_drift = s->ti_drift;
 1288 :   108 :  1133 :   sp->h = s->r_cut;
 1289 :   110 :   666 :       if (fabs(sp->v[0] * dt_drift) > e->s->dim[0] ||
 1290 :   111 :   667 :           fabs(sp->v[1] * dt_drift) > e->s->dim[1] ||
 1291 :   112 :   668 :           fabs(sp->v[2] * dt_drift) > e->s->dim[2]) {
 1292 :   113 :   677 :         if ((sp->x[0] > dim[0]) || (sp->x[0] < 0.) ||  // x
 1293 :   114 :   678 :             (sp->x[1] > dim[1]) || (sp->x[1] < 0.) ||  // y
 1294 :   115 :   679 :             (sp->x[2] > dim[2]) || (sp->x[2] < 0.)) {  // z
 1295 :   116 :   707 :       sp->h = min(sp->h, stars_h_max);
 1296 :   117 :   708 :       sp->h = max(sp->h, stars_h_min);
 1297 :   118 :   711 :       const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
 1298 :   119 :   712 :                         sp->x_diff[1] * sp->x_diff[1] +
 1299 :   120 :   713 :                         sp->x_diff[2] * sp->x_diff[2];
 1300 :   121 :   716 :       const float dx2_sort = sp->x_diff_sort[0] * sp->x_diff_sort[0] +
 1301 :   122 :   717 :                              sp->x_diff_sort[1] * sp->x_diff_sort[1] +
 1302 :   123 :   718 :                              sp->x_diff_sort[2] * sp->x_diff_sort[2];
 1303 :   124 :   723 :       cell_h_max = max(cell_h_max, sp->h);
 1304 :   125 :   732 :         cell_h_max_active = max(cell_h_max_active, sp->h);
 1305 :   126 :  1094 :       /* sp->h does not need to be limited. */
 1306 :   128 :   864 :       for (int k = 0; k < csp->count; k++) {
 1307 :   129 :   865 :         const int pid = csp->pairs[k].pid;
 1308 :   130 :   866 :         const int pjd = csp->pairs[k].pjd;
 1309 :   131 :   994 :       for (int k = 0; k < csp->count; k++) {
 1310 :   132 :   995 :         const int pid = csp->pairs[k].pid;
 1311 :   133 :   996 :         const int pjd = csp->pairs[k].pjd;
 1312 :   134 :  1120 :       for (int k = 0; k < csp->count; k++) {
 1313 :   135 :  1121 :         const int pid = csp->pairs[k].pid;
 1314 :   136 :  1122 :         const int pjd = csp->pairs[k].pjd;
 1315 :   137 :  1225 :       for (int k = 0; k < csp->count; k++) {
 1316 :   138 :  1226 :         const int pid = csp->pairs[k].pid;
 1317 :   139 :  1227 :         const int pjd = csp->pairs[k].pjd;
 1318 :   140 :  1298 :   const struct engine *e = sp->e;
 1319 :   141 :  1523 :   const struct engine *e = sp->e;
 1320 :   142 :  1605 :       for (int k = 0; k < csp->count; k++) {
 1321 :   143 :  1606 :         const int pid = csp->pairs[k].pid;
 1322 :   144 :  1607 :         const int pjd = csp->pairs[k].pjd;
 1323 :   146 :    69 :     sp->chemistry_data.metal_mass_fraction[i] =
 1324 :   147 :    73 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
 1325 :   148 :   297 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
 1326 :   149 :   449 :   return sp->chemistry_data
 1327 :   150 :   465 :   return sp->chemistry_data.metal_mass_fraction;
 1328 :   151 :   554 :   return sp->chemistry_data
 1329 :   152 :   556 :          sp->mass;
 1330 :   154 :   193 :     sp->chemistry_data.metal_mass_fraction_total =
 1331 :   155 :   197 :       sp->chemistry_data.metal_mass_fraction[elem] =
 1332 :   156 :   203 :     sp->chemistry_data.smoothed_metal_mass_fraction_total =
 1333 :   157 :   207 :       sp->chemistry_data.smoothed_metal_mass_fraction[elem] =
 1334 :   158 :   517 :   return sp->chemistry_data.smoothed_metal_mass_fraction_total;
 1335 :   159 :   532 :   return sp->chemistry_data.smoothed_metal_mass_fraction;
 1336 :   160 :   615 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
 1337 :   161 :   640 :   return sp->chemistry_data.metal_mass_fraction_total;
 1338 :   163 :    55 :     sp->chemistry_data.metal_mass_fraction[i] =
 1339 :   164 :    59 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
 1340 :   165 :   429 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
 1341 :   166 :   549 :   return sp->chemistry_data
 1342 :   167 :   564 :   return sp->chemistry_data.metal_mass_fraction[0];
 1343 :   168 :   577 :   return sp->chemistry_data.metal_mass_fraction;
 1344 :   169 :   654 :   return sp->chemistry_data
 1345 :   170 :   656 :          sp->mass;
 1346 :   172 :    56 :     sp->chemistry_data.metal_mass_fraction[i] =
 1347 :   173 :    60 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
 1348 :   174 :   416 :     sp->chemistry_data.metal_mass_fraction[i] =
 1349 :   175 :   417 :         data->initial_metallicities[i] * sp->mass;
 1350 :   176 :   487 :   return sp->chemistry_data
 1351 :   177 :   501 :   return sp->chemistry_data.metal_mass_fraction;
 1352 :   178 :   590 :   return sp->chemistry_data
 1353 :   179 :   592 :          sp->mass;
 1354 :   181 :   254 :     sp->chemistry_data.metal_mass_fraction_total =
 1355 :   182 :   258 :       sp->chemistry_data.metal_mass_fraction[elem] =
 1356 :   183 :   601 :   return sp->chemistry_data.metal_mass_fraction_total;
 1357 :   184 :   616 :   return sp->chemistry_data.metal_mass_fraction;
 1358 :   185 :   699 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
 1359 :   186 :   724 :   return sp->chemistry_data.metal_mass_fraction_total;
 1360 :   188 :   158 :     sp->chemistry_data.metal_mass_fraction_total =
 1361 :   189 :   162 :       sp->chemistry_data.metal_mass_fraction[elem] =
 1362 :   190 :   467 :   return sp->chemistry_data.metal_mass_fraction_total;
 1363 :   191 :   482 :   return sp->chemistry_data.metal_mass_fraction;
 1364 :   192 :   565 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
 1365 :   193 :   590 :   return sp->chemistry_data.metal_mass_fraction_total;
 1366 :   195 :   100 :     if (!spart_is_inhibited(sp, e) && sp->time_bin != time_bin_not_created) {
 1367 :   197 :   395 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
 1368 :   198 :   396 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
 1369 :   199 :   397 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
 1370 :   200 :   402 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
 1371 :   201 :   408 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
 1372 :   202 :   409 :                       sp->x_diff[1] * sp->x_diff[1] +
 1373 :   203 :   410 :                       sp->x_diff[2] * sp->x_diff[2];
 1374 :   204 :   412 :     stars_h_max = max(stars_h_max, sp->h);
 1375 :   205 :   422 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
 1376 :   206 :   423 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
 1377 :   207 :   424 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
 1378 :   208 :   429 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
 1379 :   209 :   435 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
 1380 :   210 :   436 :                       sp->x_diff[1] * sp->x_diff[1] +
 1381 :   211 :   437 :                       sp->x_diff[2] * sp->x_diff[2];
 1382 :   212 :   439 :     sinks_h_max = max(sinks_h_max, sp->r_cut);
 1383 :   214 :   248 :   if (sp->ti_drift != ti_old)
 1384 :   215 :   251 :         "sp->ti_drift=%lld, "
 1385 :   216 :   253 :         sp->ti_drift, ti_old, ti_current);
 1386 :   217 :   255 :   sp->ti_drift = ti_current;
 1387 :   218 :   261 :   const long long id = sp->id;
 1388 :   219 :   267 :     sp->v[0] = 0.f;
 1389 :   220 :   268 :     sp->v[1] = 0.f;
 1390 :   221 :   269 :     sp->v[2] = 0.f;
 1391 :   222 :   275 :   const double x[3] = {sp->x[0], sp->x[1], sp->x[2]};
 1392 :   223 :   276 :   const float v_full[3] = {sp->v[0], sp->v[1], sp->v[2]};
 1393 :   224 :   280 :   sp->x[0] += sp->v[0] * dt_drift;
 1394 :   225 :   281 :   sp->x[1] += sp->v[1] * dt_drift;
 1395 :   226 :   282 :   sp->x[2] += sp->v[2] * dt_drift;
 1396 :   227 :   289 :     const float dx = sp->v[k] * dt_drift;
 1397 :   228 :   290 :     sp->x_diff[k] -= dx;
 1398 :   229 :   291 :     sp->x_diff_sort[k] -= dx;
 1399 :   230 :   296 :   if (sp->gpart)
 1400 :   231 :   297 :     lightcone_check_particle_crosses(e, replication_list, x, v_full, sp->gpart,
 1401 :   233 :   105 :           get_integer_time_begin(e->ti_current, sp->time_bin);
 1402 :   234 :   112 :       if (e->ti_current - ti_begin == get_integer_timestep(sp->time_bin))
 1403 :   235 :  1355 :             get_integer_time_begin(e->ti_current, sp->time_bin);
 1404 :   237 :   755 :     if (sp->time_bin == time_bin_inhibited)
 1405 :   238 :   758 :     if (sp->time_bin == time_bin_not_created)
 1406 :   239 :   763 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
 1407 :   240 :   764 :                    sp->x[2] * s->iwidth[2]);
 1408 :   241 :   773 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
 1409 :   242 :   774 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
 1410 :   243 :   775 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
 1411 :   245 :   519 :           sp->gpart = gp;
 1412 :   247 :   109 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 1413 :   248 :   110 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
 1414 :   249 :   118 :     dt_star = get_timestep(sp->time_bin, time_base);
 1415 :   250 :   124 :     if (cosmo->a > (double)sp->birth_scale_factor)
 1416 :   251 :   126 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1417 :   252 :   130 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
 1418 :   253 :   163 :   if (sp->feedback_data.idle == 1) {
 1419 :   254 :   164 :     sp->feedback_data.will_do_feedback = 0;
 1420 :   255 :   176 :   sp->feedback_data.energy_ejected = 0;
 1421 :   256 :   177 :   sp->feedback_data.will_do_feedback = 0;
 1422 :   257 :   180 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1423 :   258 :   195 :   double NSN = sp->mass / phys_const->const_solar_mass *
 1424 :   259 :   199 :   sp->feedback_data.energy_ejected = NSN * feedback_props->energy_per_CCSN;
 1425 :   260 :   200 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
 1426 :   261 :   203 :   sp->feedback_data.mass_ejected = NSN * feedback_props->ejected_mass_per_CCSN;
 1427 :   262 :   206 :   sp->feedback_data.metal_mass_ejected[0] =
 1428 :   263 :   208 :   sp->feedback_data.metal_mass_ejected[AGORA_CHEMISTRY_ELEMENT_COUNT - 1] =
 1429 :   264 :   212 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
 1430 :   265 :   215 :   sp->feedback_data.idle = 1;
 1431 :   266 :   226 :   return sp->feedback_data.will_do_feedback;
 1432 :   267 :   236 :   sp->feedback_data.enrichment_weight = 0.f;
 1433 :   268 :   250 :   sp->feedback_data.energy_ejected = 0;
 1434 :   269 :   253 :   sp->feedback_data.will_do_feedback = 1;
 1435 :   270 :   256 :   sp->feedback_data.idle = 0;
 1436 :   271 :   274 :   sp->feedback_data.energy_ejected = 0;
 1437 :   272 :   277 :   sp->feedback_data.will_do_feedback = 1;
 1438 :   273 :   280 :   sp->feedback_data.idle = 0;
 1439 :   274 :   323 :   const float hi_inv = 1.f / sp->h;
 1440 :   275 :   325 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
 1441 :   277 :    39 :   return props->num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
 1442 :   278 :   139 :   return num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
 1443 :   280 :   110 :   const double rho_birth = sp->birth_density;
 1444 :   281 :   175 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
 1445 :   282 :   177 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
 1446 :   283 :   247 :             sp->id, i, ti_begin, random_number_stellar_feedback_2);
 1447 :   284 :   277 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
 1448 :   285 :   281 :     sp->f_E = f_E;
 1449 :   286 :   282 :     sp->feedback_data.to_distribute.SNII_E_kinetic = E_kinetic;
 1450 :   287 :   283 :     sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj =
 1451 :   288 :   312 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 1452 :   289 :   322 :   const double M_init = sp->mass_init;
 1453 :   290 :   335 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
 1454 :   291 :   336 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
 1455 :   292 :   337 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
 1456 :   293 :   338 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
 1457 :   294 :   343 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 1458 :   295 :   350 :       sp->feedback_data.to_collect.enrichment_weight_inv;
 1459 :   296 :   353 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
 1460 :   297 :   366 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
 1461 :   298 :   369 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
 1462 :   299 :   407 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
 1463 :   300 :   411 :                 abundances, feedback_props, &sp->feedback_data);
 1464 :   301 :   415 :                abundances, feedback_props, &sp->feedback_data);
 1465 :   302 :   419 :   if (sp->feedback_data.to_distribute.mass != 0.f)
 1466 :   303 :   424 :   sp->feedback_data.to_distribute.mass =
 1467 :   304 :   425 :       sp->feedback_data.to_distribute.total_metal_mass +
 1468 :   305 :   426 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
 1469 :   306 :   427 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
 1470 :   307 :   430 :   sp->feedback_data.to_distribute.energy +=
 1471 :   308 :   431 :       sp->feedback_data.to_distribute.mass *
 1472 :   309 :   435 :   sp->feedback_data.to_distribute.energy +=
 1473 :   310 :   436 :       sp->feedback_data.to_distribute.mass * 0.5f *
 1474 :   311 :   437 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
 1475 :   313 :   104 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
 1476 :   314 :   127 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
 1477 :   315 :   128 :   sp->feedback_data.to_collect.ngb_N = 0;
 1478 :   316 :   129 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
 1479 :   317 :   130 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
 1480 :   318 :   131 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
 1481 :   319 :   134 :   ray_init(sp->feedback_data.SNII_rays_true, eagle_SNII_feedback_num_of_rays);
 1482 :   320 :   135 :   ray_init(sp->feedback_data.SNII_rays_mirr, eagle_SNII_feedback_num_of_rays);
 1483 :   321 :   136 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_true,
 1484 :   322 :   138 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_mirr,
 1485 :   323 :   142 :   sp->has_done_feedback = 0;
 1486 :   324 :   164 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 1487 :   325 :   166 :     return time - (double)sp->last_enrichment_time;
 1488 :   326 :   178 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
 1489 :   327 :   181 :   sp->feedback_data.to_distribute.mass = 0.f;
 1490 :   328 :   185 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
 1491 :   329 :   187 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
 1492 :   330 :   188 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
 1493 :   331 :   189 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
 1494 :   332 :   190 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
 1495 :   333 :   191 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
 1496 :   334 :   192 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
 1497 :   335 :   193 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
 1498 :   336 :   194 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
 1499 :   337 :   197 :   sp->feedback_data.to_distribute.energy = 0.f;
 1500 :   338 :   200 :   sp->feedback_data.to_distribute.SNII_E_kinetic = 0.f;
 1501 :   339 :   203 :   sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj = 0;
 1502 :   340 :   258 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1503 :   341 :   262 :   const float h = sp->h;
 1504 :   342 :   266 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
 1505 :   343 :   267 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
 1506 :   344 :   268 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
 1507 :   345 :   276 :   sp->mass -= sp->feedback_data.to_distribute.mass;
 1508 :   346 :   280 :     sp->last_enrichment_time = cosmo->a;
 1509 :   347 :   282 :     sp->last_enrichment_time = time;
 1510 :   348 :   285 :   sp->has_done_feedback = 1;
 1511 :   349 :   313 :     if (sp->birth_scale_factor == (float)cosmo->a) {
 1512 :   350 :   316 :       sp->count_since_last_enrichment = 0;
 1513 :   351 :   322 :     if (sp->birth_time == (float)time) {
 1514 :   352 :   325 :       sp->count_since_last_enrichment = 0;
 1515 :   353 :   336 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1516 :   354 :   338 :     age_of_star = time - (double)sp->birth_time;
 1517 :   355 :   345 :     sp->count_since_last_enrichment = 0;
 1518 :   356 :   350 :     sp->count_since_last_enrichment++;
 1519 :   357 :   352 :     if ((sp->count_since_last_enrichment %
 1520 :   358 :   356 :       sp->count_since_last_enrichment = 0;
 1521 :   360 :   124 :   const double rho_birth = sp->birth_density;
 1522 :   361 :   207 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
 1523 :   362 :   209 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
 1524 :   363 :   255 :             sp->id, i, ti_begin, random_number_stellar_feedback_3);
 1525 :   364 :   271 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
 1526 :   365 :   287 :     double star_f_E = sp->f_E * sp->number_of_SNII_events;
 1527 :   366 :   290 :     star_f_E = (star_f_E + f_E) / (sp->number_of_SNII_events + 1.);
 1528 :   367 :   293 :     sp->f_E = star_f_E;
 1529 :   368 :   294 :     sp->number_of_SNII_events++;
 1530 :   369 :   295 :     sp->feedback_data.to_distribute.SNII_delta_u = delta_u;
 1531 :   370 :   296 :     sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj =
 1532 :   371 :   325 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 1533 :   372 :   335 :   const double M_init = sp->mass_init;
 1534 :   373 :   348 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
 1535 :   374 :   349 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
 1536 :   375 :   350 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
 1537 :   376 :   351 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
 1538 :   377 :   356 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 1539 :   378 :   363 :       sp->feedback_data.to_collect.enrichment_weight_inv;
 1540 :   379 :   366 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
 1541 :   380 :   379 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
 1542 :   381 :   382 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
 1543 :   382 :   420 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
 1544 :   383 :   424 :                 abundances, feedback_props, &sp->feedback_data);
 1545 :   384 :   428 :                abundances, feedback_props, &sp->feedback_data);
 1546 :   385 :   432 :   if (sp->feedback_data.to_distribute.mass != 0.f)
 1547 :   386 :   437 :   sp->feedback_data.to_distribute.mass =
 1548 :   387 :   438 :       sp->feedback_data.to_distribute.total_metal_mass +
 1549 :   388 :   439 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
 1550 :   389 :   440 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
 1551 :   390 :   443 :   sp->feedback_data.to_distribute.energy +=
 1552 :   391 :   444 :       sp->feedback_data.to_distribute.mass *
 1553 :   392 :   448 :   sp->feedback_data.to_distribute.energy +=
 1554 :   393 :   449 :       sp->feedback_data.to_distribute.mass * 0.5f *
 1555 :   394 :   450 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
 1556 :   396 :   103 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
 1557 :   397 :   126 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
 1558 :   398 :   127 :   sp->feedback_data.to_collect.ngb_N = 0;
 1559 :   399 :   128 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
 1560 :   400 :   129 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
 1561 :   401 :   130 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
 1562 :   402 :   133 :   ray_init(sp->feedback_data.SNII_rays, eagle_SNII_feedback_num_of_rays);
 1563 :   403 :   136 :   sp->has_done_feedback = 0;
 1564 :   404 :   158 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 1565 :   405 :   160 :     return time - sp->last_enrichment_time;
 1566 :   406 :   172 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
 1567 :   407 :   175 :   sp->feedback_data.to_distribute.mass = 0.f;
 1568 :   408 :   179 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
 1569 :   409 :   181 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
 1570 :   410 :   182 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
 1571 :   411 :   183 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
 1572 :   412 :   184 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
 1573 :   413 :   185 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
 1574 :   414 :   186 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
 1575 :   415 :   187 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
 1576 :   416 :   188 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
 1577 :   417 :   191 :   sp->feedback_data.to_distribute.energy = 0.f;
 1578 :   418 :   194 :   sp->feedback_data.to_distribute.SNII_delta_u = 0.f;
 1579 :   419 :   197 :   sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj = 0;
 1580 :   420 :   252 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1581 :   421 :   256 :   const float h = sp->h;
 1582 :   422 :   260 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
 1583 :   423 :   261 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
 1584 :   424 :   262 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
 1585 :   425 :   270 :   sp->mass -= sp->feedback_data.to_distribute.mass;
 1586 :   426 :   274 :     sp->last_enrichment_time = cosmo->a;
 1587 :   427 :   276 :     sp->last_enrichment_time = time;
 1588 :   428 :   279 :   sp->has_done_feedback = 1;
 1589 :   429 :   307 :     if (sp->birth_scale_factor == (float)cosmo->a) {
 1590 :   430 :   310 :       sp->count_since_last_enrichment = 0;
 1591 :   431 :   316 :     if (sp->birth_time == (float)time) {
 1592 :   432 :   319 :       sp->count_since_last_enrichment = 0;
 1593 :   433 :   330 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1594 :   434 :   332 :     age_of_star = time - (double)sp->birth_time;
 1595 :   435 :   339 :     sp->count_since_last_enrichment = 0;
 1596 :   436 :   344 :     sp->count_since_last_enrichment++;
 1597 :   437 :   346 :     if ((sp->count_since_last_enrichment %
 1598 :   438 :   350 :       sp->count_since_last_enrichment = 0;
 1599 :   440 :   169 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 1600 :   441 :   170 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
 1601 :   442 :   178 :     dt_star = get_timestep(sp->time_bin, time_base);
 1602 :   443 :   184 :     if (cosmo->a > (double)sp->birth_scale_factor)
 1603 :   444 :   186 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1604 :   445 :   190 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
 1605 :   446 :   230 :   sp->feedback_data.energy_ejected = 0;
 1606 :   447 :   231 :   sp->feedback_data.will_do_feedback = 0;
 1607 :   448 :   234 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1608 :   449 :   258 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
 1609 :   450 :   261 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
 1610 :   451 :   272 :   return sp->feedback_data.will_do_feedback;
 1611 :   452 :   302 :   sp->feedback_data.enrichment_weight = 0.f;
 1612 :   453 :   316 :   sp->feedback_data.energy_ejected = 0;
 1613 :   454 :   319 :   sp->feedback_data.will_do_feedback = 1;
 1614 :   455 :   346 :   sp->feedback_data.energy_ejected = 0;
 1615 :   456 :   349 :   sp->feedback_data.will_do_feedback = 1;
 1616 :   457 :   392 :   const float hi_inv = 1.f / sp->h;
 1617 :   458 :   394 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
 1618 :   460 :    74 :   const float rand_sn = random_unit_interval(sp->id, ti_begin, random_type);
 1619 :   461 :   121 :   sp->feedback_data.mass_ejected = mass_frac_snii * sp->sf_data.birth_mass +
 1620 :   462 :   125 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
 1621 :   463 :   127 :     message("Negative mass, skipping current star: %lli", sp->id);
 1622 :   464 :   129 :     sp->feedback_data.number_snia = 0;
 1623 :   465 :   130 :     sp->feedback_data.number_snii = 0;
 1624 :   466 :   131 :     sp->feedback_data.mass_ejected = 0;
 1625 :   467 :   136 :   sp->mass -= sp->feedback_data.mass_ejected;
 1626 :   468 :   156 :     sp->feedback_data.metal_mass_ejected[i] =
 1627 :   469 :   164 :     sp->feedback_data.metal_mass_ejected[i] *= sp->sf_data.birth_mass;
 1628 :   470 :   167 :     sp->feedback_data.metal_mass_ejected[i] +=
 1629 :   471 :   212 :   sp->feedback_data.mass_ejected = mass_snia + mass_snii;
 1630 :   472 :   215 :   sp->feedback_data.mass_ejected *= phys_const->const_solar_mass;
 1631 :   473 :   218 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
 1632 :   474 :   220 :     message("Negative mass, skipping current star: %lli", sp->id);
 1633 :   475 :   222 :     sp->feedback_data.number_snia = 0;
 1634 :   476 :   223 :     sp->feedback_data.number_snii = 0;
 1635 :   477 :   224 :     sp->feedback_data.mass_ejected = 0;
 1636 :   478 :   229 :   sp->mass -= sp->feedback_data.mass_ejected;
 1637 :   479 :   247 :     sp->feedback_data.metal_mass_ejected[i] =
 1638 :   480 :   255 :     sp->feedback_data.metal_mass_ejected[i] *= m_avg * number_snii;
 1639 :   481 :   258 :     sp->feedback_data.metal_mass_ejected[i] += snia_yields[i] * number_snia;
 1640 :   482 :   261 :     sp->feedback_data.metal_mass_ejected[i] *= phys_const->const_solar_mass;
 1641 :   483 :   331 :   const float m_init = sp->sf_data.birth_mass / phys_const->const_solar_mass;
 1642 :   484 :   366 :     sp->feedback_data.number_snia = number_snia;
 1643 :   485 :   367 :     sp->feedback_data.number_snii = number_snii;
 1644 :   486 :   376 :     sp->feedback_data.number_snia = number_snia_f;
 1645 :   487 :   377 :     sp->feedback_data.number_snii = number_snii_f;
 1646 :   488 :   393 :   sp->feedback_data.energy_ejected = 0;
 1647 :   489 :   397 :   sp->feedback_data.energy_ejected +=
 1648 :   490 :   398 :       sp->feedback_data.number_snia * snia_energy;
 1649 :   491 :   404 :   sp->feedback_data.energy_ejected +=
 1650 :   492 :   405 :       sp->feedback_data.number_snii * snii_energy;
 1651 :   494 :    96 :   double logmass6 = log10(sp->mass * fb_props->mass_to_solar_mass * 1.e-6); 
 1652 :   495 :    99 :   double z = sp->chemistry_data.metal_mass_fraction_total;
 1653 :   496 :   183 :   for (k=0; k<chemistry_element_count; k++) sp->feedback_data.delta_dust_mass[k]=0.f;
 1654 :   497 :   187 :     sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->delta_AGBCOG1[chemistry_element_C] * 
 1655 :   498 :   190 :     if (sp->feedback_data.delta_dust_mass[chemistry_element_C] > fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C])
 1656 :   499 :   191 :             sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C];
 1657 :   500 :   193 :     delta_metal_mass[chemistry_element_C] -= sp->feedback_data.delta_dust_mass[chemistry_element_C];
 1658 :   501 :   202 :         sp->feedback_data.delta_dust_mass[k] = 16.0 * (delta_table[chemistry_element_Mg] * delta_metal_mass[chemistry_element_Mg] / 24.305 
 1659 :   502 :   209 :         sp->feedback_data.delta_dust_mass[k] = delta_table[k] * delta_metal_mass[k];
 1660 :   503 :   211 :       if (sp->feedback_data.delta_dust_mass[k] > fb_props->max_dust_fraction * delta_metal_mass[k])
 1661 :   504 :   212 :             sp->feedback_data.delta_dust_mass[k] = fb_props->max_dust_fraction * delta_metal_mass[k];
 1662 :   505 :   213 :       delta_metal_mass[k] -= sp->feedback_data.delta_dust_mass[k];
 1663 :   506 :   261 :   if (sp->mass_init == sp->mass) fb_first = 1;
 1664 :   507 :   263 :   z = sp->chemistry_data.metal_mass_fraction_total;
 1665 :   508 :   272 :     feh = sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H];
 1666 :   509 :   777 :   *ejecta_unprocessed = max(0.f, sp->mass_init * SNII_U);
 1667 :   510 :   778 :   *ejecta_mass = max(0.f, sp->mass_init * SNII_E);
 1668 :   511 :   793 :       SWn = sp->mass_init * SW_R;
 1669 :   512 :   804 :       SWn = sp->mass_init * SW_R;
 1670 :   513 :   805 :       SNn = sp->mass_init * SNII_R;
 1671 :   514 :   808 :         *ejecta_energy += sp->mass_init * SNII_ENE;
 1672 :   515 :   815 :       ejecta_metal_mass[k] = sp->mass_init * SNII_Z[k];
 1673 :   516 :   824 :         SNn = sp->mass_init * SNIa_R;
 1674 :   517 :   840 : /*    if (sp->id == 3554000 ) message("Star %lld with m=%g (frac=%g), age=%g Myr, Z=%g is ejecting %g Msun (fIa=%g, Zej=%g) and %g erg in %g Myr.",
 1675 :   518 :   841 :           sp->id,
 1676 :   519 :   842 :           sp->mass * fb_props->mass_to_solar_mass,
 1677 :   520 :   843 :           sp->mass/sp->mass_init,
 1678 :   522 :   215 :   sp->feedback_data.enrichment_weight_inv = 0.f;
 1679 :   523 :   216 :   sp->feedback_data.ngb_N = 0;
 1680 :   524 :   217 :   sp->feedback_data.ngb_mass = 0.f;
 1681 :   525 :   218 :   sp->feedback_data.ngb_rho = 0.f;
 1682 :   526 :   219 :   sp->feedback_data.ngb_Z = 0.f;
 1683 :   527 :   221 :   sp->has_done_feedback = 0;
 1684 :   528 :   264 :   sp->feedback_data.enrichment_weight = 0.f;
 1685 :   529 :   267 :   sp->feedback_data.mass = 0.f;
 1686 :   530 :   271 :     sp->feedback_data.metal_mass[i] = 0.f;
 1687 :   531 :   273 :     sp->feedback_data.delta_dust_mass[i] = 0.f;
 1688 :   532 :   276 :   sp->feedback_data.total_metal_mass = 0.f;
 1689 :   533 :   279 :   sp->feedback_data.energy = 0.f;
 1690 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
 1691 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
 1692 :   536 :   355 :       sp->gpart->fof_data.group_mass;
 1693 :   537 :   364 :   const double rand_for_scatter = random_unit_interval(sp->id, ti_current,
 1694 :   538 :   405 :   if (sp->feedback_data.ngb_rho <= 0.) {
 1695 :   539 :   406 :     warning("Star %lld has zero neighbor gas density.", sp->id);
 1696 :   540 :   411 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1697 :   541 :   415 :   const float h = sp->h;
 1698 :   542 :   419 :   sp->feedback_data.ngb_rho *= h_inv_dim;
 1699 :   543 :   421 :   const float rho_inv = 1.f / sp->feedback_data.ngb_rho;
 1700 :   544 :   422 :   sp->feedback_data.ngb_Z *= h_inv_dim * rho_inv;
 1701 :   545 :   427 :   if (sp->feedback_data.ngb_rho <= 0) {
 1702 :   546 :   429 :             sp->id, sp->mass);
 1703 :   547 :   436 :   if (sp->feedback_data.ngb_rho <= 0)
 1704 :   548 :   438 :             sp->id, sp->mass);
 1705 :   549 :   439 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 1706 :   550 :   444 :   const float ngb_gas_mass = sp->feedback_data.ngb_mass;
 1707 :   551 :   447 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 1708 :   552 :   454 :       sp->feedback_data.enrichment_weight_inv;
 1709 :   553 :   457 :   if (sp->feedback_data.enrichment_weight_inv < 0.)
 1710 :   554 :   464 :   sp->feedback_data.enrichment_weight = enrichment_weight;
 1711 :   555 :   467 :   if (sp->feedback_data.enrichment_weight < 0.)
 1712 :   556 :   474 :      sp->feedback_data.feedback_mass_to_launch = eta * sp->mass;
 1713 :   557 :   475 :      sp->feedback_data.feedback_wind_velocity = feedback_compute_kick_velocity(sp, cosmo, feedback_props, ti_begin);
 1714 :   558 :   480 :   //sp->feedback_data.lum_habing = feedback_get_lum_from_star_particle(sp, star_age_beg_step, feedback_props);
 1715 :   559 :   481 :   //message("G0: age %g  Lhabing %g\n",star_age_beg_step*feedback_props->time_to_Myr, sp->feedback_data.lum_habing);
 1716 :   560 :   485 :   sp->feedback_data.mass = 0.f;
 1717 :   561 :   489 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 1718 :   562 :   515 :     message("[Fe/H] = %g", sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H]);
 1719 :   563 :   516 :     message("Z = %g", sp->chemistry_data.metal_mass_fraction_total);
 1720 :   564 :   519 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
 1721 :   565 :   524 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
 1722 :   566 :   529 :   if (sp->mass-ejecta_mass < 0.2 * sp->mass_init) {
 1723 :   567 :   531 :           sp->id, sp->mass, ejecta_mass);
 1724 :   568 :   546 :     dum = ejecta_unprocessed * sp->chemistry_data.metal_mass_fraction[elem];
 1725 :   569 :   572 :   sp->feedback_data.total_metal_mass = 0.f;
 1726 :   570 :   574 :     sp->feedback_data.metal_mass[elem] = ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
 1727 :   571 :   578 :       sp->feedback_data.total_metal_mass += ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
 1728 :   572 :   583 :     if (sp->mass/sp->mass_init<0.2) message("Star particle %lld with mass %g (init %g) is giving away %g Msun and %g erg (%g Msun metals).",
 1729 :   573 :   584 :           sp->id, 
 1730 :   574 :   585 :           sp->mass, 
 1731 :   575 :   586 :           sp->mass_init, 
 1732 :   576 :   589 :           sp->feedback_data.total_metal_mass * feedback_props->mass_to_solar_mass);
 1733 :   577 :   594 :   if (sp->feedback_data.total_metal_mass > 0.f) {
 1734 :   578 :   596 :                                          sp->feedback_data.metal_mass);
 1735 :   579 :   601 :   sp->feedback_data.mass = ejecta_mass;
 1736 :   580 :   605 :   //sp->feedback_data.energy = ejecta_energy;
 1737 :   581 :   608 :   sp->feedback_data.feedback_energy_reservoir += ejecta_energy;
 1738 :   582 :   611 :   sp->mass -= ejecta_mass;
 1739 :   583 :   614 :   sp->last_enrichment_time = cosmo->a;
 1740 :   584 :   618 :   sp->feedback_data.SNe_ThisTimeStep = N_SNe;
 1741 :   585 :   622 :   sp->has_done_feedback = 1;
 1742 :   587 :   344 :   if (sp->feedback_data.to_collect.ngb_rho <= 0) {
 1743 :   588 :   346 :             sp->id, sp->mass);
 1744 :   589 :   353 :   if (sp->feedback_data.to_collect.ngb_rho <= 0)
 1745 :   590 :   355 :             sp->id, sp->mass);
 1746 :   591 :   356 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 1747 :   592 :   366 :   const double M_init = sp->mass_init;
 1748 :   593 :   379 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
 1749 :   594 :   382 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 1750 :   595 :   389 :       sp->feedback_data.to_collect.enrichment_weight_inv;
 1751 :   596 :   392 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
 1752 :   597 :   405 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
 1753 :   598 :   408 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
 1754 :   599 :   439 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
 1755 :   600 :   443 :                 abundances, feedback_props, &sp->feedback_data);
 1756 :   601 :   447 :                abundances, feedback_props, &sp->feedback_data);
 1757 :   602 :   451 :   if (sp->feedback_data.to_distribute.mass != 0.f)
 1758 :   603 :   456 :   sp->feedback_data.to_distribute.mass =
 1759 :   604 :   457 :       sp->feedback_data.to_distribute.total_metal_mass +
 1760 :   605 :   458 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
 1761 :   606 :   459 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
 1762 :   607 :   462 :   sp->feedback_data.to_distribute.energy +=
 1763 :   608 :   463 :       sp->feedback_data.to_distribute.mass *
 1764 :   609 :   467 :   sp->feedback_data.to_distribute.energy +=
 1765 :   610 :   468 :       sp->feedback_data.to_distribute.mass * 0.5f *
 1766 :   611 :   469 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
 1767 :   613 :   176 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
 1768 :   614 :   199 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
 1769 :   615 :   200 :   sp->feedback_data.to_collect.ngb_N = 0;
 1770 :   616 :   201 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
 1771 :   617 :   202 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
 1772 :   618 :   203 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
 1773 :   619 :   205 :   sp->has_done_feedback = 0;
 1774 :   620 :   241 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 1775 :   621 :   243 :     return time - (double)sp->last_enrichment_time;
 1776 :   622 :   255 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
 1777 :   623 :   258 :   sp->feedback_data.to_distribute.mass = 0.f;
 1778 :   624 :   262 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
 1779 :   625 :   264 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
 1780 :   626 :   265 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
 1781 :   627 :   266 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
 1782 :   628 :   267 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
 1783 :   629 :   268 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
 1784 :   630 :   269 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
 1785 :   631 :   270 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
 1786 :   632 :   271 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
 1787 :   633 :   274 :   sp->feedback_data.to_distribute.energy = 0.f;
 1788 :   634 :   330 :   if (sp->feedback_data.to_collect.ngb_rho <= 0.) {
 1789 :   635 :   331 :     warning("Star %lld has zero neighbor gas density.", sp->id);
 1790 :   636 :   336 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1791 :   637 :   340 :   const float h = sp->h;
 1792 :   638 :   344 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
 1793 :   639 :   346 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
 1794 :   640 :   347 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
 1795 :   641 :   355 :   sp->mass -= sp->feedback_data.to_distribute.mass;
 1796 :   642 :   359 :     sp->last_enrichment_time = cosmo->a;
 1797 :   643 :   361 :     sp->last_enrichment_time = time;
 1798 :   644 :   364 :   sp->has_done_feedback = 1;
 1799 :   645 :   392 :     if (sp->birth_scale_factor == (float)cosmo->a) {
 1800 :   646 :   395 :       sp->count_since_last_enrichment = 0;
 1801 :   647 :   401 :     if (sp->birth_time == (float)time) {
 1802 :   648 :   404 :       sp->count_since_last_enrichment = 0;
 1803 :   649 :   415 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 1804 :   650 :   417 :     age_of_star = time - (double)sp->birth_time;
 1805 :   651 :   424 :     sp->count_since_last_enrichment = 0;
 1806 :   652 :   429 :     sp->count_since_last_enrichment++;
 1807 :   653 :   431 :     if ((sp->count_since_last_enrichment %
 1808 :   654 :   435 :       sp->count_since_last_enrichment = 0;
 1809 :   656 :    41 :   const float v_circ = pow(sp->feedback_data.host_galaxy_mass /
 1810 :   657 :    44 :   const float sigma = sqrtf(sp->potential * cosmo->a_inv);
 1811 :   658 :    48 :   sp->feedback_data.to_distribute.v_kick =
 1812 :   659 :    59 :   sp->feedback_data.to_distribute.v_kick =
 1813 :   660 :   121 :   return (sp->birth_time != -1.);
 1814 :   661 :   132 :   sp->feedback_data.host_galaxy_mass = 1.;
 1815 :   662 :   153 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 1816 :   663 :   155 :     return time - (double)sp->last_enrichment_time;
 1817 :   664 :   177 :   sp->feedback_data.to_distribute.simba_delay_time =
 1818 :   665 :   218 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 1819 :   666 :   232 :     sp->last_enrichment_time = cosmo->a;
 1820 :   667 :   234 :     sp->last_enrichment_time = time;
 1821 :   668 :   237 :   sp->has_done_feedback = 1;
 1822 :   670 :  3629 :   sp->gpart->fof_data.is_grouppable = 1;
 1823 :   671 :  3671 :   if (sp->gpart != gp) error("Copying group properties to the wrong star!");
 1824 :   672 :  3674 :   sp->group_data.mass = gp->fof_data.group_mass;
 1825 :   673 :  3675 :   sp->group_data.stellar_mass = gp->fof_data.group_stellar_mass;
 1826 :   674 :  3677 :     sp->group_data.ssfr = gp->fof_data.group_sfr / gp->fof_data.group_stellar_mass;
 1827 :   675 :  3679 :     sp->group_data.ssfr = 0.f;
 1828 :   677 :     2 :   438 :   const timebin_t spart_bin = sp->time_bin;
 1829 :   678 :     3 :   442 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 1830 :   679 :     4 :   446 :         "s-particle in an impossible time-zone! sp->ti_end=%lld "
 1831 :   680 :     5 :   541 :   return sp->time_bin == time_bin_inhibited;
 1832 :   681 :     6 :   747 :   const timebin_t spart_bin = sp->time_bin;
 1833 :   682 :     7 :   752 :       get_integer_time_begin(ti_current + 1, sp->time_bin);
 1834 :   683 :     8 :   756 :         "s-particle in an impossible time-zone! sp->ti_beg=%lld "
 1835 :   684 :    10 :  1353 :     if ((sp->x[0] < c->loc[0] / space_stretch) ||
 1836 :   685 :    11 :  1354 :         (sp->x[1] < c->loc[1] / space_stretch) ||
 1837 :   686 :    12 :  1355 :         (sp->x[2] < c->loc[2] / space_stretch) ||
 1838 :   687 :    13 :  1356 :         (sp->x[0] >= (c->loc[0] + c->width[0]) * space_stretch) ||
 1839 :   688 :    14 :  1357 :         (sp->x[1] >= (c->loc[1] + c->width[1]) * space_stretch) ||
 1840 :   689 :    15 :  1358 :         (sp->x[2] >= (c->loc[2] + c->width[2]) * space_stretch))
 1841 :   690 :    16 :  1361 :     if (sp->time_bin != time_bin_not_created &&
 1842 :   691 :    17 :  1362 :         sp->time_bin != time_bin_inhibited) {
 1843 :   692 :    18 :  1363 :       const struct gpart *gp = sp->gpart;
 1844 :   693 :    19 :  1364 :       if (gp == NULL && sp->time_bin != time_bin_not_created)
 1845 :   694 :    21 :   255 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
 1846 :   695 :    22 :   256 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
 1847 :   696 :    23 :   257 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
 1848 :   697 :    24 :   260 :   sp->time_bin = e->min_active_bin;
 1849 :   698 :    25 :   264 :   sp->ti_drift = e->ti_current;
 1850 :   699 :    26 :   388 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
 1851 :   700 :    27 :   389 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
 1852 :   701 :    28 :   390 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
 1853 :   702 :    29 :   393 :   sp->time_bin = e->min_active_bin;
 1854 :   703 :    30 :   397 :   sp->ti_drift = e->ti_current;
 1855 :   704 :    31 :   642 :   if (sp->time_bin == time_bin_inhibited) return;
 1856 :   705 :    32 :   645 :   sp->time_bin = time_bin_inhibited;
 1857 :   706 :    33 :   646 :   if (sp->gpart) {
 1858 :   707 :    34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
 1859 :   708 :    35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
 1860 :   709 :    36 :   649 :     sp->gpart->type = swift_type_dark_matter;
 1861 :   710 :    37 :   655 :   if (sp->gpart) {
 1862 :   711 :    38 :   660 :   sp->gpart = NULL;
 1863 :   712 :    39 :   813 :   if (sp->gpart == NULL)
 1864 :   713 :    40 :   817 :   struct gpart *gp = sp->gpart;
 1865 :   714 :    41 :   820 :   sp->time_bin = time_bin_inhibited;
 1866 :   715 :    42 :   823 :   sp->gpart = NULL;
 1867 :   716 :    43 :   827 :   gp->id_or_neg_offset = sp->id;
 1868 :   717 :    44 :   830 :   gp->ti_kick = sp->ti_kick;
 1869 :   718 :    45 :   873 :   sp->x_diff[0] = xp->x_diff[0];
 1870 :   719 :    46 :   874 :   sp->x_diff[1] = xp->x_diff[1];
 1871 :   720 :    47 :   875 :   sp->x_diff[2] = xp->x_diff[2];
 1872 :   721 :    48 :   881 :   sp->id = gp->id_or_neg_offset;
 1873 :   722 :    49 :   885 :   sp->gpart = gp;
 1874 :   723 :    50 :   889 :   gp->time_bin = sp->time_bin;
 1875 :   724 :    51 :   892 :   sp->mass = gp->mass;
 1876 :   725 :    52 :   893 :   sp->x[0] = gp->x[0];
 1877 :   726 :    53 :   894 :   sp->x[1] = gp->x[1];
 1878 :   727 :    54 :   895 :   sp->x[2] = gp->x[2];
 1879 :   728 :    55 :   896 :   sp->v[0] = gp->v_full[0];
 1880 :   729 :    56 :   897 :   sp->v[1] = gp->v_full[1];
 1881 :   730 :    57 :   898 :   sp->v[2] = gp->v_full[2];
 1882 :   731 :    58 :   901 :   sp->ti_kick = gp->ti_kick;
 1883 :   732 :    59 :   902 :   gp->ti_drift = sp->ti_drift;
 1884 :   733 :    60 :   906 :   sp->h = p->h;
 1885 :   734 :    61 :   941 :   sp->x_diff[0] = xp->x_diff[0];
 1886 :   735 :    62 :   942 :   sp->x_diff[1] = xp->x_diff[1];
 1887 :   736 :    63 :   943 :   sp->x_diff[2] = xp->x_diff[2];
 1888 :   737 :    64 :   959 :   sp->id = space_get_new_unique_id(e->s);
 1889 :   738 :    65 :   963 :   sp->gpart = gp;
 1890 :   739 :    66 :   967 :   gp->time_bin = sp->time_bin;
 1891 :   740 :    67 :   970 :   sp->mass = hydro_get_mass(p);
 1892 :   741 :    68 :   971 :   sp->x[0] = p->x[0];
 1893 :   742 :    69 :   972 :   sp->x[1] = p->x[1];
 1894 :   743 :    70 :   973 :   sp->x[2] = p->x[2];
 1895 :   744 :    71 :   974 :   sp->v[0] = p->v_full[0];
 1896 :   745 :    72 :   975 :   sp->v[1] = p->v_full[1];
 1897 :   746 :    73 :   976 :   sp->v[2] = p->v_full[2];
 1898 :   747 :    74 :   979 :   sp->ti_kick = p->ti_kick;
 1899 :   748 :    75 :   980 :   sp->ti_drift = p->ti_drift;
 1900 :   749 :    76 :   984 :   sp->h = p->h;
 1901 :   750 :    77 :  1024 :   sp->x_diff[0] = xp->x_diff[0];
 1902 :   751 :    78 :  1025 :   sp->x_diff[1] = xp->x_diff[1];
 1903 :   752 :    79 :  1026 :   sp->x_diff[2] = xp->x_diff[2];
 1904 :   753 :    80 :  1032 :   sp->id = p->id;
 1905 :   754 :    81 :  1036 :   sp->gpart = gp;
 1906 :   755 :    82 :  1040 :   gp->time_bin = sp->time_bin;
 1907 :   756 :    83 :  1043 :   sp->mass = gp->mass;
 1908 :   757 :    84 :  1044 :   sp->x[0] = gp->x[0];
 1909 :   758 :    85 :  1045 :   sp->x[1] = gp->x[1];
 1910 :   759 :    86 :  1046 :   sp->x[2] = gp->x[2];
 1911 :   760 :    87 :  1047 :   sp->v[0] = gp->v_full[0];
 1912 :   761 :    88 :  1048 :   sp->v[1] = gp->v_full[1];
 1913 :   762 :    89 :  1049 :   sp->v[2] = gp->v_full[2];
 1914 :   763 :    90 :  1052 :   sp->ti_kick = gp->ti_kick;
 1915 :   764 :    91 :  1053 :   gp->ti_drift = sp->ti_drift;
 1916 :   765 :    92 :  1057 :   sp->r_cut = e->sink_properties->cut_off_radius;
 1917 :   766 :    93 :  1090 :   sp->x_diff[0] = s->x_diff[0];
 1918 :   767 :    94 :  1091 :   sp->x_diff[1] = s->x_diff[1];
 1919 :   768 :    95 :  1092 :   sp->x_diff[2] = s->x_diff[2];
 1920 :   769 :    96 :  1108 :   sp->id = space_get_new_unique_id(e->s);
 1921 :   770 :    97 :  1112 :   sp->gpart = gp;
 1922 :   771 :    98 :  1116 :   gp->time_bin = sp->time_bin;
 1923 :   772 :    99 :  1119 :   sp->mass = s->mass;
 1924 :   773 :   100 :  1120 :   sp->x[0] = s->x[0];
 1925 :   774 :   101 :  1121 :   sp->x[1] = s->x[1];
 1926 :   775 :   102 :  1122 :   sp->x[2] = s->x[2];
 1927 :   776 :   103 :  1123 :   sp->v[0] = s->v[0];
 1928 :   777 :   104 :  1124 :   sp->v[1] = s->v[1];
 1929 :   778 :   105 :  1125 :   sp->v[2] = s->v[2];
 1930 :   779 :   106 :  1128 :   sp->ti_kick = s->ti_kick;
 1931 :   780 :   107 :  1129 :   sp->ti_drift = s->ti_drift;
 1932 :   781 :   108 :  1133 :   sp->h = s->r_cut;
 1933 :   782 :   110 :   666 :       if (fabs(sp->v[0] * dt_drift) > e->s->dim[0] ||
 1934 :   783 :   111 :   667 :           fabs(sp->v[1] * dt_drift) > e->s->dim[1] ||
 1935 :   784 :   112 :   668 :           fabs(sp->v[2] * dt_drift) > e->s->dim[2]) {
 1936 :   785 :   113 :   677 :         if ((sp->x[0] > dim[0]) || (sp->x[0] < 0.) ||  // x
 1937 :   786 :   114 :   678 :             (sp->x[1] > dim[1]) || (sp->x[1] < 0.) ||  // y
 1938 :   787 :   115 :   679 :             (sp->x[2] > dim[2]) || (sp->x[2] < 0.)) {  // z
 1939 :   788 :   116 :   707 :       sp->h = min(sp->h, stars_h_max);
 1940 :   789 :   117 :   708 :       sp->h = max(sp->h, stars_h_min);
 1941 :   790 :   118 :   711 :       const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
 1942 :   791 :   119 :   712 :                         sp->x_diff[1] * sp->x_diff[1] +
 1943 :   792 :   120 :   713 :                         sp->x_diff[2] * sp->x_diff[2];
 1944 :   793 :   121 :   716 :       const float dx2_sort = sp->x_diff_sort[0] * sp->x_diff_sort[0] +
 1945 :   794 :   122 :   717 :                              sp->x_diff_sort[1] * sp->x_diff_sort[1] +
 1946 :   795 :   123 :   718 :                              sp->x_diff_sort[2] * sp->x_diff_sort[2];
 1947 :   796 :   124 :   723 :       cell_h_max = max(cell_h_max, sp->h);
 1948 :   797 :   125 :   732 :         cell_h_max_active = max(cell_h_max_active, sp->h);
 1949 :   798 :   126 :  1094 :       /* sp->h does not need to be limited. */
 1950 :   799 :   128 :   864 :       for (int k = 0; k < csp->count; k++) {
 1951 :   800 :   129 :   865 :         const int pid = csp->pairs[k].pid;
 1952 :   801 :   130 :   866 :         const int pjd = csp->pairs[k].pjd;
 1953 :   802 :   131 :   994 :       for (int k = 0; k < csp->count; k++) {
 1954 :   803 :   132 :   995 :         const int pid = csp->pairs[k].pid;
 1955 :   804 :   133 :   996 :         const int pjd = csp->pairs[k].pjd;
 1956 :   805 :   134 :  1120 :       for (int k = 0; k < csp->count; k++) {
 1957 :   806 :   135 :  1121 :         const int pid = csp->pairs[k].pid;
 1958 :   807 :   136 :  1122 :         const int pjd = csp->pairs[k].pjd;
 1959 :   808 :   137 :  1225 :       for (int k = 0; k < csp->count; k++) {
 1960 :   809 :   138 :  1226 :         const int pid = csp->pairs[k].pid;
 1961 :   810 :   139 :  1227 :         const int pjd = csp->pairs[k].pjd;
 1962 :   811 :   140 :  1298 :   const struct engine *e = sp->e;
 1963 :   812 :   141 :  1523 :   const struct engine *e = sp->e;
 1964 :   813 :   142 :  1605 :       for (int k = 0; k < csp->count; k++) {
 1965 :   814 :   143 :  1606 :         const int pid = csp->pairs[k].pid;
 1966 :   815 :   144 :  1607 :         const int pjd = csp->pairs[k].pjd;
 1967 :   816 :   146 :    69 :     sp->chemistry_data.metal_mass_fraction[i] =
 1968 :   817 :   147 :    73 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
 1969 :   818 :   148 :   297 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
 1970 :   819 :   149 :   449 :   return sp->chemistry_data
 1971 :   820 :   150 :   465 :   return sp->chemistry_data.metal_mass_fraction;
 1972 :   821 :   151 :   554 :   return sp->chemistry_data
 1973 :   822 :   152 :   556 :          sp->mass;
 1974 :   823 :   154 :   193 :     sp->chemistry_data.metal_mass_fraction_total =
 1975 :   824 :   155 :   197 :       sp->chemistry_data.metal_mass_fraction[elem] =
 1976 :   825 :   156 :   203 :     sp->chemistry_data.smoothed_metal_mass_fraction_total =
 1977 :   826 :   157 :   207 :       sp->chemistry_data.smoothed_metal_mass_fraction[elem] =
 1978 :   827 :   158 :   517 :   return sp->chemistry_data.smoothed_metal_mass_fraction_total;
 1979 :   828 :   159 :   532 :   return sp->chemistry_data.smoothed_metal_mass_fraction;
 1980 :   829 :   160 :   615 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
 1981 :   830 :   161 :   640 :   return sp->chemistry_data.metal_mass_fraction_total;
 1982 :   831 :   163 :    55 :     sp->chemistry_data.metal_mass_fraction[i] =
 1983 :   832 :   164 :    59 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
 1984 :   833 :   165 :   429 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
 1985 :   834 :   166 :   549 :   return sp->chemistry_data
 1986 :   835 :   167 :   564 :   return sp->chemistry_data.metal_mass_fraction[0];
 1987 :   836 :   168 :   577 :   return sp->chemistry_data.metal_mass_fraction;
 1988 :   837 :   169 :   654 :   return sp->chemistry_data
 1989 :   838 :   170 :   656 :          sp->mass;
 1990 :   839 :   172 :    56 :     sp->chemistry_data.metal_mass_fraction[i] =
 1991 :   840 :   173 :    60 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
 1992 :   841 :   174 :   416 :     sp->chemistry_data.metal_mass_fraction[i] =
 1993 :   842 :   175 :   417 :         data->initial_metallicities[i] * sp->mass;
 1994 :   843 :   176 :   487 :   return sp->chemistry_data
 1995 :   844 :   177 :   501 :   return sp->chemistry_data.metal_mass_fraction;
 1996 :   845 :   178 :   590 :   return sp->chemistry_data
 1997 :   846 :   179 :   592 :          sp->mass;
 1998 :   847 :   181 :   254 :     sp->chemistry_data.metal_mass_fraction_total =
 1999 :   848 :   182 :   258 :       sp->chemistry_data.metal_mass_fraction[elem] =
 2000 :   849 :   183 :   601 :   return sp->chemistry_data.metal_mass_fraction_total;
 2001 :   850 :   184 :   616 :   return sp->chemistry_data.metal_mass_fraction;
 2002 :   851 :   185 :   699 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
 2003 :   852 :   186 :   724 :   return sp->chemistry_data.metal_mass_fraction_total;
 2004 :   853 :   188 :   158 :     sp->chemistry_data.metal_mass_fraction_total =
 2005 :   854 :   189 :   162 :       sp->chemistry_data.metal_mass_fraction[elem] =
 2006 :   855 :   190 :   467 :   return sp->chemistry_data.metal_mass_fraction_total;
 2007 :   856 :   191 :   482 :   return sp->chemistry_data.metal_mass_fraction;
 2008 :   857 :   192 :   565 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
 2009 :   858 :   193 :   590 :   return sp->chemistry_data.metal_mass_fraction_total;
 2010 :   859 :   195 :   100 :     if (!spart_is_inhibited(sp, e) && sp->time_bin != time_bin_not_created) {
 2011 :   860 :   197 :   395 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
 2012 :   861 :   198 :   396 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
 2013 :   862 :   199 :   397 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
 2014 :   863 :   200 :   402 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
 2015 :   864 :   201 :   408 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
 2016 :   865 :   202 :   409 :                       sp->x_diff[1] * sp->x_diff[1] +
 2017 :   866 :   203 :   410 :                       sp->x_diff[2] * sp->x_diff[2];
 2018 :   867 :   204 :   412 :     stars_h_max = max(stars_h_max, sp->h);
 2019 :   868 :   205 :   422 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
 2020 :   869 :   206 :   423 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
 2021 :   870 :   207 :   424 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
 2022 :   871 :   208 :   429 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
 2023 :   872 :   209 :   435 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
 2024 :   873 :   210 :   436 :                       sp->x_diff[1] * sp->x_diff[1] +
 2025 :   874 :   211 :   437 :                       sp->x_diff[2] * sp->x_diff[2];
 2026 :   875 :   212 :   439 :     sinks_h_max = max(sinks_h_max, sp->r_cut);
 2027 :   876 :   214 :   248 :   if (sp->ti_drift != ti_old)
 2028 :   877 :   215 :   251 :         "sp->ti_drift=%lld, "
 2029 :   878 :   216 :   253 :         sp->ti_drift, ti_old, ti_current);
 2030 :   879 :   217 :   255 :   sp->ti_drift = ti_current;
 2031 :   880 :   218 :   261 :   const long long id = sp->id;
 2032 :   881 :   219 :   267 :     sp->v[0] = 0.f;
 2033 :   882 :   220 :   268 :     sp->v[1] = 0.f;
 2034 :   883 :   221 :   269 :     sp->v[2] = 0.f;
 2035 :   884 :   222 :   275 :   const double x[3] = {sp->x[0], sp->x[1], sp->x[2]};
 2036 :   885 :   223 :   276 :   const float v_full[3] = {sp->v[0], sp->v[1], sp->v[2]};
 2037 :   886 :   224 :   280 :   sp->x[0] += sp->v[0] * dt_drift;
 2038 :   887 :   225 :   281 :   sp->x[1] += sp->v[1] * dt_drift;
 2039 :   888 :   226 :   282 :   sp->x[2] += sp->v[2] * dt_drift;
 2040 :   889 :   227 :   289 :     const float dx = sp->v[k] * dt_drift;
 2041 :   890 :   228 :   290 :     sp->x_diff[k] -= dx;
 2042 :   891 :   229 :   291 :     sp->x_diff_sort[k] -= dx;
 2043 :   892 :   230 :   296 :   if (sp->gpart)
 2044 :   893 :   231 :   297 :     lightcone_check_particle_crosses(e, replication_list, x, v_full, sp->gpart,
 2045 :   894 :   233 :   105 :           get_integer_time_begin(e->ti_current, sp->time_bin);
 2046 :   895 :   234 :   112 :       if (e->ti_current - ti_begin == get_integer_timestep(sp->time_bin))
 2047 :   896 :   235 :  1355 :             get_integer_time_begin(e->ti_current, sp->time_bin);
 2048 :   897 :   237 :   755 :     if (sp->time_bin == time_bin_inhibited)
 2049 :   898 :   238 :   758 :     if (sp->time_bin == time_bin_not_created)
 2050 :   899 :   239 :   763 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
 2051 :   900 :   240 :   764 :                    sp->x[2] * s->iwidth[2]);
 2052 :   901 :   241 :   773 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
 2053 :   902 :   242 :   774 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
 2054 :   903 :   243 :   775 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
 2055 :   904 :   245 :   519 :           sp->gpart = gp;
 2056 :   905 :   247 :   109 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 2057 :   906 :   248 :   110 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
 2058 :   907 :   249 :   118 :     dt_star = get_timestep(sp->time_bin, time_base);
 2059 :   908 :   250 :   124 :     if (cosmo->a > (double)sp->birth_scale_factor)
 2060 :   909 :   251 :   126 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2061 :   910 :   252 :   130 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
 2062 :   911 :   253 :   163 :   if (sp->feedback_data.idle == 1) {
 2063 :   912 :   254 :   164 :     sp->feedback_data.will_do_feedback = 0;
 2064 :   913 :   255 :   176 :   sp->feedback_data.energy_ejected = 0;
 2065 :   914 :   256 :   177 :   sp->feedback_data.will_do_feedback = 0;
 2066 :   915 :   257 :   180 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 2067 :   916 :   258 :   195 :   double NSN = sp->mass / phys_const->const_solar_mass *
 2068 :   917 :   259 :   199 :   sp->feedback_data.energy_ejected = NSN * feedback_props->energy_per_CCSN;
 2069 :   918 :   260 :   200 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
 2070 :   919 :   261 :   203 :   sp->feedback_data.mass_ejected = NSN * feedback_props->ejected_mass_per_CCSN;
 2071 :   920 :   262 :   206 :   sp->feedback_data.metal_mass_ejected[0] =
 2072 :   921 :   263 :   208 :   sp->feedback_data.metal_mass_ejected[AGORA_CHEMISTRY_ELEMENT_COUNT - 1] =
 2073 :   922 :   264 :   212 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
 2074 :   923 :   265 :   215 :   sp->feedback_data.idle = 1;
 2075 :   924 :   266 :   226 :   return sp->feedback_data.will_do_feedback;
 2076 :   925 :   267 :   236 :   sp->feedback_data.enrichment_weight = 0.f;
 2077 :   926 :   268 :   250 :   sp->feedback_data.energy_ejected = 0;
 2078 :   927 :   269 :   253 :   sp->feedback_data.will_do_feedback = 1;
 2079 :   928 :   270 :   256 :   sp->feedback_data.idle = 0;
 2080 :   929 :   271 :   274 :   sp->feedback_data.energy_ejected = 0;
 2081 :   930 :   272 :   277 :   sp->feedback_data.will_do_feedback = 1;
 2082 :   931 :   273 :   280 :   sp->feedback_data.idle = 0;
 2083 :   932 :   274 :   323 :   const float hi_inv = 1.f / sp->h;
 2084 :   933 :   275 :   325 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
 2085 :   934 :   277 :    39 :   return props->num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
 2086 :   935 :   278 :   139 :   return num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
 2087 :   936 :   280 :   110 :   const double rho_birth = sp->birth_density;
 2088 :   937 :   281 :   175 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
 2089 :   938 :   282 :   177 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
 2090 :   939 :   283 :   247 :             sp->id, i, ti_begin, random_number_stellar_feedback_2);
 2091 :   940 :   284 :   277 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
 2092 :   941 :   285 :   281 :     sp->f_E = f_E;
 2093 :   942 :   286 :   282 :     sp->feedback_data.to_distribute.SNII_E_kinetic = E_kinetic;
 2094 :   943 :   287 :   283 :     sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj =
 2095 :   944 :   288 :   312 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 2096 :   945 :   289 :   322 :   const double M_init = sp->mass_init;
 2097 :   946 :   290 :   335 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
 2098 :   947 :   291 :   336 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
 2099 :   948 :   292 :   337 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
 2100 :   949 :   293 :   338 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
 2101 :   950 :   294 :   343 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 2102 :   951 :   295 :   350 :       sp->feedback_data.to_collect.enrichment_weight_inv;
 2103 :   952 :   296 :   353 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
 2104 :   953 :   297 :   366 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
 2105 :   954 :   298 :   369 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
 2106 :   955 :   299 :   407 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
 2107 :   956 :   300 :   411 :                 abundances, feedback_props, &sp->feedback_data);
 2108 :   957 :   301 :   415 :                abundances, feedback_props, &sp->feedback_data);
 2109 :   958 :   302 :   419 :   if (sp->feedback_data.to_distribute.mass != 0.f)
 2110 :   959 :   303 :   424 :   sp->feedback_data.to_distribute.mass =
 2111 :   960 :   304 :   425 :       sp->feedback_data.to_distribute.total_metal_mass +
 2112 :   961 :   305 :   426 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
 2113 :   962 :   306 :   427 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
 2114 :   963 :   307 :   430 :   sp->feedback_data.to_distribute.energy +=
 2115 :   964 :   308 :   431 :       sp->feedback_data.to_distribute.mass *
 2116 :   965 :   309 :   435 :   sp->feedback_data.to_distribute.energy +=
 2117 :   966 :   310 :   436 :       sp->feedback_data.to_distribute.mass * 0.5f *
 2118 :   967 :   311 :   437 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
 2119 :   968 :   313 :   104 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
 2120 :   969 :   314 :   127 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
 2121 :   970 :   315 :   128 :   sp->feedback_data.to_collect.ngb_N = 0;
 2122 :   971 :   316 :   129 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
 2123 :   972 :   317 :   130 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
 2124 :   973 :   318 :   131 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
 2125 :   974 :   319 :   134 :   ray_init(sp->feedback_data.SNII_rays_true, eagle_SNII_feedback_num_of_rays);
 2126 :   975 :   320 :   135 :   ray_init(sp->feedback_data.SNII_rays_mirr, eagle_SNII_feedback_num_of_rays);
 2127 :   976 :   321 :   136 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_true,
 2128 :   977 :   322 :   138 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_mirr,
 2129 :   978 :   323 :   142 :   sp->has_done_feedback = 0;
 2130 :   979 :   324 :   164 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 2131 :   980 :   325 :   166 :     return time - (double)sp->last_enrichment_time;
 2132 :   981 :   326 :   178 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
 2133 :   982 :   327 :   181 :   sp->feedback_data.to_distribute.mass = 0.f;
 2134 :   983 :   328 :   185 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
 2135 :   984 :   329 :   187 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
 2136 :   985 :   330 :   188 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
 2137 :   986 :   331 :   189 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
 2138 :   987 :   332 :   190 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
 2139 :   988 :   333 :   191 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
 2140 :   989 :   334 :   192 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
 2141 :   990 :   335 :   193 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
 2142 :   991 :   336 :   194 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
 2143 :   992 :   337 :   197 :   sp->feedback_data.to_distribute.energy = 0.f;
 2144 :   993 :   338 :   200 :   sp->feedback_data.to_distribute.SNII_E_kinetic = 0.f;
 2145 :   994 :   339 :   203 :   sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj = 0;
 2146 :   995 :   340 :   258 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 2147 :   996 :   341 :   262 :   const float h = sp->h;
 2148 :   997 :   342 :   266 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
 2149 :   998 :   343 :   267 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
 2150 :   999 :   344 :   268 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
 2151 :  1000 :   345 :   276 :   sp->mass -= sp->feedback_data.to_distribute.mass;
 2152 :  1001 :   346 :   280 :     sp->last_enrichment_time = cosmo->a;
 2153 :  1002 :   347 :   282 :     sp->last_enrichment_time = time;
 2154 :  1003 :   348 :   285 :   sp->has_done_feedback = 1;
 2155 :  1004 :   349 :   313 :     if (sp->birth_scale_factor == (float)cosmo->a) {
 2156 :  1005 :   350 :   316 :       sp->count_since_last_enrichment = 0;
 2157 :  1006 :   351 :   322 :     if (sp->birth_time == (float)time) {
 2158 :  1007 :   352 :   325 :       sp->count_since_last_enrichment = 0;
 2159 :  1008 :   353 :   336 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2160 :  1009 :   354 :   338 :     age_of_star = time - (double)sp->birth_time;
 2161 :  1010 :   355 :   345 :     sp->count_since_last_enrichment = 0;
 2162 :  1011 :   356 :   350 :     sp->count_since_last_enrichment++;
 2163 :  1012 :   357 :   352 :     if ((sp->count_since_last_enrichment %
 2164 :  1013 :   358 :   356 :       sp->count_since_last_enrichment = 0;
 2165 :  1014 :   360 :   124 :   const double rho_birth = sp->birth_density;
 2166 :  1015 :   361 :   207 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
 2167 :  1016 :   362 :   209 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
 2168 :  1017 :   363 :   255 :             sp->id, i, ti_begin, random_number_stellar_feedback_3);
 2169 :  1018 :   364 :   271 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
 2170 :  1019 :   365 :   287 :     double star_f_E = sp->f_E * sp->number_of_SNII_events;
 2171 :  1020 :   366 :   290 :     star_f_E = (star_f_E + f_E) / (sp->number_of_SNII_events + 1.);
 2172 :  1021 :   367 :   293 :     sp->f_E = star_f_E;
 2173 :  1022 :   368 :   294 :     sp->number_of_SNII_events++;
 2174 :  1023 :   369 :   295 :     sp->feedback_data.to_distribute.SNII_delta_u = delta_u;
 2175 :  1024 :   370 :   296 :     sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj =
 2176 :  1025 :   371 :   325 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 2177 :  1026 :   372 :   335 :   const double M_init = sp->mass_init;
 2178 :  1027 :   373 :   348 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
 2179 :  1028 :   374 :   349 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
 2180 :  1029 :   375 :   350 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
 2181 :  1030 :   376 :   351 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
 2182 :  1031 :   377 :   356 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 2183 :  1032 :   378 :   363 :       sp->feedback_data.to_collect.enrichment_weight_inv;
 2184 :  1033 :   379 :   366 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
 2185 :  1034 :   380 :   379 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
 2186 :  1035 :   381 :   382 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
 2187 :  1036 :   382 :   420 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
 2188 :  1037 :   383 :   424 :                 abundances, feedback_props, &sp->feedback_data);
 2189 :  1038 :   384 :   428 :                abundances, feedback_props, &sp->feedback_data);
 2190 :  1039 :   385 :   432 :   if (sp->feedback_data.to_distribute.mass != 0.f)
 2191 :  1040 :   386 :   437 :   sp->feedback_data.to_distribute.mass =
 2192 :  1041 :   387 :   438 :       sp->feedback_data.to_distribute.total_metal_mass +
 2193 :  1042 :   388 :   439 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
 2194 :  1043 :   389 :   440 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
 2195 :  1044 :   390 :   443 :   sp->feedback_data.to_distribute.energy +=
 2196 :  1045 :   391 :   444 :       sp->feedback_data.to_distribute.mass *
 2197 :  1046 :   392 :   448 :   sp->feedback_data.to_distribute.energy +=
 2198 :  1047 :   393 :   449 :       sp->feedback_data.to_distribute.mass * 0.5f *
 2199 :  1048 :   394 :   450 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
 2200 :  1049 :   396 :   103 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
 2201 :  1050 :   397 :   126 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
 2202 :  1051 :   398 :   127 :   sp->feedback_data.to_collect.ngb_N = 0;
 2203 :  1052 :   399 :   128 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
 2204 :  1053 :   400 :   129 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
 2205 :  1054 :   401 :   130 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
 2206 :  1055 :   402 :   133 :   ray_init(sp->feedback_data.SNII_rays, eagle_SNII_feedback_num_of_rays);
 2207 :  1056 :   403 :   136 :   sp->has_done_feedback = 0;
 2208 :  1057 :   404 :   158 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 2209 :  1058 :   405 :   160 :     return time - sp->last_enrichment_time;
 2210 :  1059 :   406 :   172 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
 2211 :  1060 :   407 :   175 :   sp->feedback_data.to_distribute.mass = 0.f;
 2212 :  1061 :   408 :   179 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
 2213 :  1062 :   409 :   181 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
 2214 :  1063 :   410 :   182 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
 2215 :  1064 :   411 :   183 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
 2216 :  1065 :   412 :   184 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
 2217 :  1066 :   413 :   185 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
 2218 :  1067 :   414 :   186 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
 2219 :  1068 :   415 :   187 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
 2220 :  1069 :   416 :   188 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
 2221 :  1070 :   417 :   191 :   sp->feedback_data.to_distribute.energy = 0.f;
 2222 :  1071 :   418 :   194 :   sp->feedback_data.to_distribute.SNII_delta_u = 0.f;
 2223 :  1072 :   419 :   197 :   sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj = 0;
 2224 :  1073 :   420 :   252 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 2225 :  1074 :   421 :   256 :   const float h = sp->h;
 2226 :  1075 :   422 :   260 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
 2227 :  1076 :   423 :   261 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
 2228 :  1077 :   424 :   262 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
 2229 :  1078 :   425 :   270 :   sp->mass -= sp->feedback_data.to_distribute.mass;
 2230 :  1079 :   426 :   274 :     sp->last_enrichment_time = cosmo->a;
 2231 :  1080 :   427 :   276 :     sp->last_enrichment_time = time;
 2232 :  1081 :   428 :   279 :   sp->has_done_feedback = 1;
 2233 :  1082 :   429 :   307 :     if (sp->birth_scale_factor == (float)cosmo->a) {
 2234 :  1083 :   430 :   310 :       sp->count_since_last_enrichment = 0;
 2235 :  1084 :   431 :   316 :     if (sp->birth_time == (float)time) {
 2236 :  1085 :   432 :   319 :       sp->count_since_last_enrichment = 0;
 2237 :  1086 :   433 :   330 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2238 :  1087 :   434 :   332 :     age_of_star = time - (double)sp->birth_time;
 2239 :  1088 :   435 :   339 :     sp->count_since_last_enrichment = 0;
 2240 :  1089 :   436 :   344 :     sp->count_since_last_enrichment++;
 2241 :  1090 :   437 :   346 :     if ((sp->count_since_last_enrichment %
 2242 :  1091 :   438 :   350 :       sp->count_since_last_enrichment = 0;
 2243 :  1092 :   440 :   169 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 2244 :  1093 :   441 :   170 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
 2245 :  1094 :   442 :   178 :     dt_star = get_timestep(sp->time_bin, time_base);
 2246 :  1095 :   443 :   184 :     if (cosmo->a > (double)sp->birth_scale_factor)
 2247 :  1096 :   444 :   186 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2248 :  1097 :   445 :   190 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
 2249 :  1098 :   446 :   230 :   sp->feedback_data.energy_ejected = 0;
 2250 :  1099 :   447 :   231 :   sp->feedback_data.will_do_feedback = 0;
 2251 :  1100 :   448 :   234 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 2252 :  1101 :   449 :   258 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
 2253 :  1102 :   450 :   261 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
 2254 :  1103 :   451 :   272 :   return sp->feedback_data.will_do_feedback;
 2255 :  1104 :   452 :   302 :   sp->feedback_data.enrichment_weight = 0.f;
 2256 :  1105 :   453 :   316 :   sp->feedback_data.energy_ejected = 0;
 2257 :  1106 :   454 :   319 :   sp->feedback_data.will_do_feedback = 1;
 2258 :  1107 :   455 :   346 :   sp->feedback_data.energy_ejected = 0;
 2259 :  1108 :   456 :   349 :   sp->feedback_data.will_do_feedback = 1;
 2260 :  1109 :   457 :   392 :   const float hi_inv = 1.f / sp->h;
 2261 :  1110 :   458 :   394 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
 2262 :  1111 :   460 :    74 :   const float rand_sn = random_unit_interval(sp->id, ti_begin, random_type);
 2263 :  1112 :   461 :   121 :   sp->feedback_data.mass_ejected = mass_frac_snii * sp->sf_data.birth_mass +
 2264 :  1113 :   462 :   125 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
 2265 :  1114 :   463 :   127 :     message("Negative mass, skipping current star: %lli", sp->id);
 2266 :  1115 :   464 :   129 :     sp->feedback_data.number_snia = 0;
 2267 :  1116 :   465 :   130 :     sp->feedback_data.number_snii = 0;
 2268 :  1117 :   466 :   131 :     sp->feedback_data.mass_ejected = 0;
 2269 :  1118 :   467 :   136 :   sp->mass -= sp->feedback_data.mass_ejected;
 2270 :  1119 :   468 :   156 :     sp->feedback_data.metal_mass_ejected[i] =
 2271 :  1120 :   469 :   164 :     sp->feedback_data.metal_mass_ejected[i] *= sp->sf_data.birth_mass;
 2272 :  1121 :   470 :   167 :     sp->feedback_data.metal_mass_ejected[i] +=
 2273 :  1122 :   471 :   212 :   sp->feedback_data.mass_ejected = mass_snia + mass_snii;
 2274 :  1123 :   472 :   215 :   sp->feedback_data.mass_ejected *= phys_const->const_solar_mass;
 2275 :  1124 :   473 :   218 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
 2276 :  1125 :   474 :   220 :     message("Negative mass, skipping current star: %lli", sp->id);
 2277 :  1126 :   475 :   222 :     sp->feedback_data.number_snia = 0;
 2278 :  1127 :   476 :   223 :     sp->feedback_data.number_snii = 0;
 2279 :  1128 :   477 :   224 :     sp->feedback_data.mass_ejected = 0;
 2280 :  1129 :   478 :   229 :   sp->mass -= sp->feedback_data.mass_ejected;
 2281 :  1130 :   479 :   247 :     sp->feedback_data.metal_mass_ejected[i] =
 2282 :  1131 :   480 :   255 :     sp->feedback_data.metal_mass_ejected[i] *= m_avg * number_snii;
 2283 :  1132 :   481 :   258 :     sp->feedback_data.metal_mass_ejected[i] += snia_yields[i] * number_snia;
 2284 :  1133 :   482 :   261 :     sp->feedback_data.metal_mass_ejected[i] *= phys_const->const_solar_mass;
 2285 :  1134 :   483 :   331 :   const float m_init = sp->sf_data.birth_mass / phys_const->const_solar_mass;
 2286 :  1135 :   484 :   366 :     sp->feedback_data.number_snia = number_snia;
 2287 :  1136 :   485 :   367 :     sp->feedback_data.number_snii = number_snii;
 2288 :  1137 :   486 :   376 :     sp->feedback_data.number_snia = number_snia_f;
 2289 :  1138 :   487 :   377 :     sp->feedback_data.number_snii = number_snii_f;
 2290 :  1139 :   488 :   393 :   sp->feedback_data.energy_ejected = 0;
 2291 :  1140 :   489 :   397 :   sp->feedback_data.energy_ejected +=
 2292 :  1141 :   490 :   398 :       sp->feedback_data.number_snia * snia_energy;
 2293 :  1142 :   491 :   404 :   sp->feedback_data.energy_ejected +=
 2294 :  1143 :   492 :   405 :       sp->feedback_data.number_snii * snii_energy;
 2295 :  1144 :   494 :    96 :   double logmass6 = log10(sp->mass * fb_props->mass_to_solar_mass * 1.e-6); 
 2296 :  1145 :   495 :    99 :   double z = sp->chemistry_data.metal_mass_fraction_total;
 2297 :  1146 :   496 :   183 :   for (k=0; k<chemistry_element_count; k++) sp->feedback_data.delta_dust_mass[k]=0.f;
 2298 :  1147 :   497 :   187 :     sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->delta_AGBCOG1[chemistry_element_C] * 
 2299 :  1148 :   498 :   190 :     if (sp->feedback_data.delta_dust_mass[chemistry_element_C] > fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C])
 2300 :  1149 :   499 :   191 :             sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C];
 2301 :  1150 :   500 :   193 :     delta_metal_mass[chemistry_element_C] -= sp->feedback_data.delta_dust_mass[chemistry_element_C];
 2302 :  1151 :   501 :   202 :         sp->feedback_data.delta_dust_mass[k] = 16.0 * (delta_table[chemistry_element_Mg] * delta_metal_mass[chemistry_element_Mg] / 24.305 
 2303 :  1152 :   502 :   209 :         sp->feedback_data.delta_dust_mass[k] = delta_table[k] * delta_metal_mass[k];
 2304 :  1153 :   503 :   211 :       if (sp->feedback_data.delta_dust_mass[k] > fb_props->max_dust_fraction * delta_metal_mass[k])
 2305 :  1154 :   504 :   212 :             sp->feedback_data.delta_dust_mass[k] = fb_props->max_dust_fraction * delta_metal_mass[k];
 2306 :  1155 :   505 :   213 :       delta_metal_mass[k] -= sp->feedback_data.delta_dust_mass[k];
 2307 :  1156 :   506 :   261 :   if (sp->mass_init == sp->mass) fb_first = 1;
 2308 :  1157 :   507 :   263 :   z = sp->chemistry_data.metal_mass_fraction_total;
 2309 :  1158 :   508 :   272 :     feh = sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H];
 2310 :  1159 :   509 :   777 :   *ejecta_unprocessed = max(0.f, sp->mass_init * SNII_U);
 2311 :  1160 :   510 :   778 :   *ejecta_mass = max(0.f, sp->mass_init * SNII_E);
 2312 :  1161 :   511 :   793 :       SWn = sp->mass_init * SW_R;
 2313 :  1162 :   512 :   804 :       SWn = sp->mass_init * SW_R;
 2314 :  1163 :   513 :   805 :       SNn = sp->mass_init * SNII_R;
 2315 :  1164 :   514 :   808 :         *ejecta_energy += sp->mass_init * SNII_ENE;
 2316 :  1165 :   515 :   815 :       ejecta_metal_mass[k] = sp->mass_init * SNII_Z[k];
 2317 :  1166 :   516 :   824 :         SNn = sp->mass_init * SNIa_R;
 2318 :  1167 :   517 :   840 : /*    if (sp->id == 3554000 ) message("Star %lld with m=%g (frac=%g), age=%g Myr, Z=%g is ejecting %g Msun (fIa=%g, Zej=%g) and %g erg in %g Myr.",
 2319 :  1168 :   518 :   841 :           sp->id,
 2320 :  1169 :   519 :   842 :           sp->mass * fb_props->mass_to_solar_mass,
 2321 :  1170 :   520 :   843 :           sp->mass/sp->mass_init,
 2322 :  1171 :   522 :   215 :   sp->feedback_data.enrichment_weight_inv = 0.f;
 2323 :  1172 :   523 :   216 :   sp->feedback_data.ngb_N = 0;
 2324 :  1173 :   524 :   217 :   sp->feedback_data.ngb_mass = 0.f;
 2325 :  1174 :   525 :   218 :   sp->feedback_data.ngb_rho = 0.f;
 2326 :  1175 :   526 :   219 :   sp->feedback_data.ngb_Z = 0.f;
 2327 :  1176 :   527 :   221 :   sp->has_done_feedback = 0;
 2328 :  1177 :   528 :   264 :   sp->feedback_data.enrichment_weight = 0.f;
 2329 :  1178 :   529 :   267 :   sp->feedback_data.mass = 0.f;
 2330 :  1179 :   530 :   271 :     sp->feedback_data.metal_mass[i] = 0.f;
 2331 :  1180 :   531 :   273 :     sp->feedback_data.delta_dust_mass[i] = 0.f;
 2332 :  1181 :   532 :   276 :   sp->feedback_data.total_metal_mass = 0.f;
 2333 :  1182 :   533 :   279 :   sp->feedback_data.energy = 0.f;
 2334 :  1183 :   534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
 2335 :  1184 :   535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
 2336 :  1185 :   536 :   355 :       sp->gpart->fof_data.group_mass;
 2337 :  1186 :   537 :   364 :   const double rand_for_scatter = random_unit_interval(sp->id, ti_current,
 2338 :  1187 :   538 :   405 :   if (sp->feedback_data.ngb_rho <= 0.) {
 2339 :  1188 :   539 :   406 :     warning("Star %lld has zero neighbor gas density.", sp->id);
 2340 :  1189 :   540 :   411 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
 2341 :  1190 :   541 :   415 :   const float h = sp->h;
 2342 :  1191 :   542 :   419 :   sp->feedback_data.ngb_rho *= h_inv_dim;
 2343 :  1192 :   543 :   421 :   const float rho_inv = 1.f / sp->feedback_data.ngb_rho;
 2344 :  1193 :   544 :   422 :   sp->feedback_data.ngb_Z *= h_inv_dim * rho_inv;
 2345 :  1194 :   545 :   427 :   if (sp->feedback_data.ngb_rho <= 0) {
 2346 :  1195 :   546 :   429 :             sp->id, sp->mass);
 2347 :  1196 :   547 :   436 :   if (sp->feedback_data.ngb_rho <= 0)
 2348 :  1197 :   548 :   438 :             sp->id, sp->mass);
 2349 :  1198 :   549 :   439 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 2350 :  1199 :   550 :   444 :   const float ngb_gas_mass = sp->feedback_data.ngb_mass;
 2351 :  1200 :   551 :   447 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 2352 :  1201 :   552 :   454 :       sp->feedback_data.enrichment_weight_inv;
 2353 :  1202 :   553 :   457 :   if (sp->feedback_data.enrichment_weight_inv < 0.)
 2354 :  1203 :   554 :   464 :   sp->feedback_data.enrichment_weight = enrichment_weight;
 2355 :  1204 :   555 :   467 :   if (sp->feedback_data.enrichment_weight < 0.)
 2356 :  1205 :   556 :   474 :      sp->feedback_data.feedback_mass_to_launch = eta * sp->mass;
 2357 :  1206 :   557 :   475 :      sp->feedback_data.feedback_wind_velocity = feedback_compute_kick_velocity(sp, cosmo, feedback_props, ti_begin);
 2358 :  1207 :   558 :   480 :   //sp->feedback_data.lum_habing = feedback_get_lum_from_star_particle(sp, star_age_beg_step, feedback_props);
 2359 :  1208 :   559 :   481 :   //message("G0: age %g  Lhabing %g\n",star_age_beg_step*feedback_props->time_to_Myr, sp->feedback_data.lum_habing);
 2360 :  1209 :   560 :   485 :   sp->feedback_data.mass = 0.f;
 2361 :  1210 :   561 :   489 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
 2362 :  1211 :   562 :   515 :     message("[Fe/H] = %g", sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H]);
 2363 :  1212 :   563 :   516 :     message("Z = %g", sp->chemistry_data.metal_mass_fraction_total);
 2364 :  1213 :   564 :   519 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
 2365 :  1214 :   565 :   524 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
 2366 :  1215 :   566 :   529 :   if (sp->mass-ejecta_mass < 0.2 * sp->mass_init) {
 2367 :  1216 :   567 :   531 :           sp->id, sp->mass, ejecta_mass);
 2368 :  1217 :   568 :   546 :     dum = ejecta_unprocessed * sp->chemistry_data.metal_mass_fraction[elem];
 2369 :  1218 :   569 :   572 :   sp->feedback_data.total_metal_mass = 0.f;
 2370 :  1219 :   570 :   574 :     sp->feedback_data.metal_mass[elem] = ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
 2371 :  1220 :   571 :   578 :       sp->feedback_data.total_metal_mass += ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
 2372 :  1221 :   572 :   583 :     if (sp->mass/sp->mass_init<0.2) message("Star particle %lld with mass %g (init %g) is giving away %g Msun and %g erg (%g Msun metals).",
 2373 :  1222 :   573 :   584 :           sp->id, 
 2374 :  1223 :   574 :   585 :           sp->mass, 
 2375 :  1224 :   575 :   586 :           sp->mass_init, 
 2376 :  1225 :   576 :   589 :           sp->feedback_data.total_metal_mass * feedback_props->mass_to_solar_mass);
 2377 :  1226 :   577 :   594 :   if (sp->feedback_data.total_metal_mass > 0.f) {
 2378 :  1227 :   578 :   596 :                                          sp->feedback_data.metal_mass);
 2379 :  1228 :   579 :   601 :   sp->feedback_data.mass = ejecta_mass;
 2380 :  1229 :   580 :   605 :   //sp->feedback_data.energy = ejecta_energy;
 2381 :  1230 :   581 :   608 :   sp->feedback_data.feedback_energy_reservoir += ejecta_energy;
 2382 :  1231 :   582 :   611 :   sp->mass -= ejecta_mass;
 2383 :  1232 :   583 :   614 :   sp->last_enrichment_time = cosmo->a;
 2384 :  1233 :   584 :   618 :   sp->feedback_data.SNe_ThisTimeStep = N_SNe;
 2385 :  1234 :   585 :   622 :   sp->has_done_feedback = 1;
 2386 :  1235 :   587 :   344 :   if (sp->feedback_data.to_collect.ngb_rho <= 0) {
 2387 :  1236 :   588 :   346 :             sp->id, sp->mass);
 2388 :  1237 :   589 :   353 :   if (sp->feedback_data.to_collect.ngb_rho <= 0)
 2389 :  1238 :   590 :   355 :             sp->id, sp->mass);
 2390 :  1239 :   591 :   356 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
 2391 :  1240 :   592 :   366 :   const double M_init = sp->mass_init;
 2392 :  1241 :   593 :   379 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
 2393 :  1242 :   594 :   382 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
 2394 :  1243 :   595 :   389 :       sp->feedback_data.to_collect.enrichment_weight_inv;
 2395 :  1244 :   596 :   392 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
 2396 :  1245 :   597 :   405 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
 2397 :  1246 :   598 :   408 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
 2398 :  1247 :   599 :   439 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
 2399 :  1248 :   600 :   443 :                 abundances, feedback_props, &sp->feedback_data);
 2400 :  1249 :   601 :   447 :                abundances, feedback_props, &sp->feedback_data);
 2401 :  1250 :   602 :   451 :   if (sp->feedback_data.to_distribute.mass != 0.f)
 2402 :  1251 :   603 :   456 :   sp->feedback_data.to_distribute.mass =
 2403 :  1252 :   604 :   457 :       sp->feedback_data.to_distribute.total_metal_mass +
 2404 :  1253 :   605 :   458 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
 2405 :  1254 :   606 :   459 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
 2406 :  1255 :   607 :   462 :   sp->feedback_data.to_distribute.energy +=
 2407 :  1256 :   608 :   463 :       sp->feedback_data.to_distribute.mass *
 2408 :  1257 :   609 :   467 :   sp->feedback_data.to_distribute.energy +=
 2409 :  1258 :   610 :   468 :       sp->feedback_data.to_distribute.mass * 0.5f *
 2410 :  1259 :   611 :   469 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
 2411 :  1261 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
 2412 :  1263 :   168 :   const float hi = sp->h;
 2413 :  1265 :   303 :   if (sp->ti_kick != ti_start)
 2414 :  1266 :   305 :         "s-particle has not been kicked to the current time sp->ti_kick=%lld, "
 2415 :  1267 :   307 :         sp->ti_kick, ti_start, ti_end, sp->id);
 2416 :  1268 :   309 :   sp->ti_kick = ti_end;
 2417 :  1269 :   321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
 2418 :  1270 :   322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
 2419 :  1271 :   323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
 2420 :  1272 :   326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
 2421 :  1273 :   327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
 2422 :  1274 :   328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
 2423 :  1275 :   331 :   sp->gpart->v_full[0] = sp->v[0];
 2424 :  1276 :   332 :   sp->gpart->v_full[1] = sp->v[1];
 2425 :  1277 :   333 :   sp->gpart->v_full[2] = sp->v[2];
 2426 :  1279 :   104 :       return sp->mass;
 2427 :  1280 :   267 :       return sp->mass;
 2428 :  1282 :   499 :   data->id = sp->id;
 2429 :  1283 :   504 :       sp->v[0] / a_cross;  // TODO: extrapolate velocities to a_cross?
 2430 :  1284 :   505 :   data->vel[1] = sp->v[1] / a_cross;
 2431 :  1285 :   506 :   data->vel[2] = sp->v[2] / a_cross;
 2432 :  1286 :   507 :   data->mass = sp->mass;
 2433 :  1287 :   515 :   data->mass_init = sp->mass_init;
 2434 :  1288 :   516 :   data->birth_scale_factor = sp->birth_scale_factor;
 2435 :  1289 :   517 :   data->birth_density = sp->birth_density;
 2436 :  1290 :   526 :         sp->chemistry_data.smoothed_metal_mass_fraction[i];
 2437 :  1291 :   528 :       sp->chemistry_data.metal_mass_fraction_total;
 2438 :  1292 :   530 :       sp->chemistry_data.smoothed_metal_mass_fraction_total;
 2439 :  1293 :   535 :       sp->tracers_data.last_AGN_injection_scale_factor;
 2440 :  1295 :   340 :             "gp->x=[%e %e %e] sp->x=[%e %e %e] diff=[%e %e %e]",
 2441 :  1296 :   349 :             "gp->m=%e sp->m=%e",
 2442 :  1297 :   383 :             "gp->m=%e sp->m=%e",
 2443 :  1299 :    60 :   sp->rt_data.debug_emission_rate_set += 1;
 2444 :  1300 :    89 :         emission_this_step, sp->mass, dt, rt_props->photon_number_integral,
 2445 :  1301 :    97 :     sp->rt_data.emission_this_step[g] = emission_this_step[g];
 2446 :  1302 :   187 :     sp->rt_data.octant_weights[i] = 0.f;
 2447 :  1303 :   193 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
 2448 :  1304 :   194 :   sp->rt_data.debug_iact_hydro_inject = 0;
 2449 :  1305 :   195 :   sp->rt_data.debug_emission_rate_set = 0;
 2450 :  1306 :   198 :     sp->rt_data.debug_injected_energy[g] = 0.f;
 2451 :  1307 :   201 :     sp->rt_data.emission_this_step[g] = 0.f;
 2452 :  1308 :   203 :   sp->rt_data.debug_psi_sum = 0.f;
 2453 :  1309 :   218 :     sp->rt_data.emission_this_step[g] = 0.f;
 2454 :  1310 :   233 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
 2455 :  1311 :   235 :     sp->rt_data.debug_injected_energy_tot[g] = 0.f;
 2456 :  1312 :   272 :     sp->rt_data.emission_this_step[g] = 0.f;
 2457 :  1314 :   134 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
 2458 :  1315 :   135 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
 2459 :  1316 :   137 :     sp->rt_data.debug_iact_hydro_inject = 0;
 2460 :  1317 :   138 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
 2461 :  1318 :   146 :        * sp->rt_data.emission_this_step: energy we should distribute
 2462 :  1319 :   148 :        * sp->rt_data.debug_injected_energy: energy we actually did
 2463 :  1320 :   150 :       if (sp->rt_data.debug_injected_energy[g] != 0.f) {
 2464 :  1321 :   151 :         float diff = 1.f - sp->rt_data.emission_this_step[g] /
 2465 :  1322 :   152 :                                sp->rt_data.debug_injected_energy[g];
 2466 :  1323 :   162 :             psi_sum_now += sp->rt_data.octant_weights[i];
 2467 :  1324 :   163 :           float diff_weights = 1.f - sp->rt_data.debug_psi_sum / psi_sum_now;
 2468 :  1325 :   168 :                 sp->id, g, sp->rt_data.emission_this_step[g],
 2469 :  1326 :   169 :                 sp->rt_data.debug_injected_energy[g], diff, diff_weights);
 2470 :  1327 :   176 :       sp->rt_data.debug_injected_energy[g] = 0.f;
 2471 :  1328 :   179 :       sp->rt_data.emission_this_step[g] = 0.f;
 2472 :  1330 :   149 :   sp->rt_data.injection_weight = 0.f;
 2473 :  1331 :   151 :     sp->rt_data.emission_reinject[g] = 0.f;
 2474 :  1332 :   165 :     sp->rt_data.emission_this_step[g] = 0.f;
 2475 :  1334 :    50 :       sp->rt_data.emission_this_step[g] +=
 2476 :  1336 :    51 :   sp->rt_data.debug_emission_rate_set += 1;
 2477 :  1337 :   128 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
 2478 :  1338 :   129 :   sp->rt_data.debug_iact_hydro_inject = 0;
 2479 :  1339 :   130 :   sp->rt_data.debug_emission_rate_set = 0;
 2480 :  1340 :   153 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
 2481 :  1342 :   164 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
 2482 :  1343 :   165 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
 2483 :  1344 :   167 :     sp->rt_data.debug_iact_hydro_inject = 0;
 2484 :  1345 :   168 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
 2485 :  1347 :   878 :       for (int k = 0; k < csp->count; k++) {
 2486 :  1348 :   879 :         const int pid = csp->pairs[k].pid;
 2487 :  1349 :   880 :         const int pjd = csp->pairs[k].pjd;
 2488 :  1350 :  1027 :     for (int k = 0; k < csp->count; k++) {
 2489 :  1351 :  1028 :       const int pid = csp->pairs[k].pid;
 2490 :  1352 :  1029 :       const int pjd = csp->pairs[k].pjd;
 2491 :  1354 :  2670 :     for (int k = 0; k < csp->count; k++) {
 2492 :  1355 :  2671 :       const int pid = csp->pairs[k].pid;
 2493 :  1356 :  2672 :       const int pjd = csp->pairs[k].pjd;
 2494 :  1357 :  2776 :     for (int k = 0; k < csp->count; k++) {
 2495 :  1358 :  2777 :       const int pid = csp->pairs[k].pid;
 2496 :  1359 :  2778 :       const int pjd = csp->pairs[k].pjd;
 2497 :  1360 :  2907 :       for (int k = 0; k < csp->count; k++) {
 2498 :  1361 :  2908 :         const int pid = csp->pairs[k].pid;
 2499 :  1362 :  2909 :         const int pjd = csp->pairs[k].pjd;
 2500 :  1364 :   749 :     for (int k = 0; k < csp->count; k++) {
 2501 :  1365 :   750 :       const int pid = csp->pairs[k].pid;
 2502 :  1366 :   751 :       const int pjd = csp->pairs[k].pjd;
 2503 :  1368 :  1486 :       for (int k = 0; k < csp->count; k++) {
 2504 :  1369 :  1487 :         const int pid = csp->pairs[k].pid;
 2505 :  1370 :  1488 :         const int pjd = csp->pairs[k].pjd;
 2506 :  1371 :  1687 :     for (int k = 0; k < csp->count; k++) {
 2507 :  1372 :  1688 :       const int pid = csp->pairs[k].pid;
 2508 :  1373 :  1689 :       const int pjd = csp->pairs[k].pjd;
 2509 :  1375 :   168 :         const float h_old = sp->h;
 2510 :  1376 :   175 :         if (sp->density.wcount < 1.e-5 * kernel_root) { /* No neighbours case */
 2511 :  1377 :   191 :           const float n_sum = sp->density.wcount * h_old_dim;
 2512 :  1378 :   195 :               sp->density.wcount_dh * h_old_dim +
 2513 :  1379 :   196 :               hydro_dimension * sp->density.wcount * h_old_dim_minus_one;
 2514 :  1380 :   213 :           if (((sp->h >= stars_h_max) && (f < 0.f)) ||
 2515 :  1381 :   214 :               ((sp->h <= stars_h_min) && (f > 0.f))) {
 2516 :  1382 :   221 :               const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 2517 :  1383 :   223 :                   get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 2518 :  1384 :   231 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
 2519 :  1385 :   272 :                     get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 2520 :  1386 :   274 :                     get_integer_timestep(sp->time_bin);
 2521 :  1387 :   279 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
 2522 :  1388 :   307 :                 num_reruns, sp->id, h_init, h_old, h_new, f, f_prime, n_sum,
 2523 :  1389 :   331 :             sp->h = pow_inv_dimension(
 2524 :  1390 :   337 :             sp->h = h_new;
 2525 :  1391 :   341 :           if (sp->h < stars_h_max && sp->h > stars_h_min) {
 2526 :  1392 :   358 :           } else if (sp->h <= stars_h_min) {
 2527 :  1393 :   361 :             sp->h = stars_h_min;
 2528 :  1394 :   363 :           } else if (sp->h >= stars_h_max) {
 2529 :  1395 :   366 :             sp->h = stars_h_max;
 2530 :  1396 :   385 :         h_max = max(h_max, sp->h);
 2531 :  1397 :   386 :         h_max_active = max(h_max_active, sp->h);
 2532 :  1398 :   395 :           const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 2533 :  1399 :   397 :               get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 2534 :  1400 :   405 :             dt_star = get_timestep(sp->time_bin, e->time_base);
 2535 :  1401 :   446 :                 get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 2536 :  1402 :   447 :             const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 2537 :  1403 :   452 :             dt_star = get_timestep(sp->time_bin, e->time_base);
 2538 :  1404 :   526 :         warning("ID: %lld, h: %g, wcount: %g", sp->id, sp->h,
 2539 :  1405 :   527 :                 sp->density.wcount);
 2540 :  1406 :   551 :       error("Particle has h larger than h_max (id=%lld)", sp->id);
 2541 :  1407 :   553 :       error("Active particle has h larger than h_max_active (id=%lld)", sp->id);
 2542 :  1409 :   269 :           c->stars.h_max = max(c->stars.h_max, sp->h);
 2543 :  1410 :   270 :           c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
 2544 :  1411 :   481 :               /* message("We formed a star id=%lld cellID=%lld", sp->id,
 2545 :  1412 :   498 :               c->stars.h_max = max(c->stars.h_max, sp->h);
 2546 :  1413 :   499 :               c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
 2547 :  1414 :   522 :                 csds_part_data_init(&sp->csds_data);
 2548 :  1415 :   525 :                 sp->csds_data = xp->csds_data;
 2549 :  1416 :  1035 :         if (csds_should_write(&sp->csds_data, e->csds)) {
 2550 :  1417 :  1042 :           sp->csds_data.steps_since_last_output += 1;
 2551 :  1419 :   406 :     for (int k = 0; k < csp->count; k++) {
 2552 :  1420 :   407 :       const int pid = csp->pairs[k].pid;
 2553 :  1421 :   408 :       const int pjd = csp->pairs[k].pjd;
 2554 :  1422 :   588 :           if (sp->id == sink_id) {
 2555 :  1423 :   604 :               message("sink %lld removing gas particle %lld", sp->id, p->id);
 2556 :  1424 :   752 :           sink_get_sink_swallow_id(&cell_sp->merger_data);
 2557 :  1425 :   758 :         if (cell_sp->ti_drift != e->ti_current)
 2558 :  1426 :   774 :           if (sp->id == sink_id) {
 2559 :  1427 :   778 :             if (sink_get_sink_swallow_id(&sp->merger_data) != -1) {
 2560 :  1428 :   781 :               sink_mark_sink_as_not_swallowed(&cell_sp->merger_data);
 2561 :  1429 :   798 :             // message("sink %lld swallowing sink particle %lld", sp->id,
 2562 :  1430 :   799 :             // cell_sp->id);
 2563 :  1431 :   804 :               message("sink %lld removing sink particle %lld", sp->id,
 2564 :  1432 :   805 :                       cell_sp->id);
 2565 :  1433 :   814 :             sink_mark_sink_as_merged(&cell_sp->merger_data);
 2566 :  1434 :   830 :                 cell_sp->id, swallow_id);
 2567 :  1436 :   250 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 2568 :  1437 :   252 :             get_integer_time_begin(ti_current + 1, sp->time_bin);
 2569 :  1438 :   257 :             get_integer_time_end(ti_current + 1, sp->time_bin);
 2570 :  1439 :   263 :               ti_end_check, ti_begin, ti_step, sp->time_bin, ti_current);
 2571 :  1440 :   524 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 2572 :  1441 :   526 :             get_integer_time_begin(ti_current, sp->time_bin) + ti_step / 2;
 2573 :  1442 :   543 :         if (sp->ti_drift != sp->ti_kick)
 2574 :  1443 :   914 :             get_integer_time_end(ti_current, sp->time_bin);
 2575 :  1444 :   920 :         const integertime_t ti_old_step = get_integer_timestep(sp->time_bin);
 2576 :  1445 :   926 :           old_time_step_length = get_timestep(sp->time_bin, e->time_base);
 2577 :  1446 :   933 :         sp->time_bin = get_time_bin(ti_new_step);
 2578 :  1447 :   934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
 2579 :  1448 :   969 :               get_integer_time_end(ti_current, sp->time_bin);
 2580 :  1449 :   972 :               get_integer_time_begin(ti_current + 1, sp->time_bin);
 2581 :  1451 :  1340 :           t->ci = ci->progeny[csp->pairs[0].pid];
 2582 :  1452 :  1341 :           t->cj = cj->progeny[csp->pairs[0].pjd];
 2583 :  1453 :  1345 :           t->flags = csp->pairs[0].sid;
 2584 :  1454 :  1346 :           for (int k = 1; k < csp->count; k++) {
 2585 :  1455 :  1349 :                                   csp->pairs[k].sid, 0,
 2586 :  1456 :  1350 :                                   ci->progeny[csp->pairs[k].pid],
 2587 :  1457 :  1351 :                                   cj->progeny[csp->pairs[k].pjd]),
 2588 :  1458 :  1388 :   struct engine *e = sp->e;
 2589 :  1460 :    54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2590 :  1461 :    55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2591 :  1462 :    56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2592 :  1463 :    58 :     ret[0] = sp->x[0];
 2593 :  1464 :    59 :     ret[1] = sp->x[1];
 2594 :  1465 :    60 :     ret[2] = sp->x[2];
 2595 :  1466 :    72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2596 :  1467 :    73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2597 :  1468 :    86 :   const struct gpart* gp = sp->gpart;
 2598 :  1470 :    46 :   sp->cut_off_radius =
 2599 :  1472 :    54 :   sp->r_cut = sink_props->cut_off_radius;
 2600 :  1473 :    55 :   sp->time_bin = 0;
 2601 :  1474 :    57 :   sp->number_of_gas_swallows = 0;
 2602 :  1475 :    58 :   sp->number_of_direct_gas_swallows = 0;
 2603 :  1476 :    59 :   sp->number_of_sink_swallows = 0;
 2604 :  1477 :    60 :   sp->number_of_direct_sink_swallows = 0;
 2605 :  1478 :    61 :   sp->swallowed_angular_momentum[0] = 0.f;
 2606 :  1479 :    62 :   sp->swallowed_angular_momentum[1] = 0.f;
 2607 :  1480 :    63 :   sp->swallowed_angular_momentum[2] = 0.f;
 2608 :  1481 :    65 :   sink_mark_sink_as_not_swallowed(&sp->merger_data);
 2609 :  1482 :    92 :     sp->ids_ngbs_accretion[i] = -1;
 2610 :  1483 :    93 :   sp->num_ngb_accretion = 0;
 2611 :  1484 :    96 :     sp->ids_ngbs_merger[i] = -1;
 2612 :  1485 :    97 :   sp->num_ngb_merger = 0;
 2613 :  1486 :   100 :     sp->ids_ngbs_formation[i] = -1;
 2614 :  1487 :   101 :   sp->num_ngb_formation = 0;
 2615 :  1488 :   247 :   const float sink_mass = sp->mass;
 2616 :  1489 :   250 :   sp->mass += gas_mass;
 2617 :  1490 :   251 :   sp->gpart->mass += gas_mass;
 2618 :  1491 :   254 :   const float dv[3] = {(sp->v[0] - p->v[0]) * cosmo->a_inv,
 2619 :  1492 :   255 :                        (sp->v[1] - p->v[1]) * cosmo->a_inv,
 2620 :  1493 :   256 :                        (sp->v[2] - p->v[2]) * cosmo->a_inv};
 2621 :  1494 :   259 :   const float dx[3] = {(sp->x[0] - p->x[0]) * cosmo->a,
 2622 :  1495 :   260 :                        (sp->x[1] - p->x[1]) * cosmo->a,
 2623 :  1496 :   261 :                        (sp->x[2] - p->x[2]) * cosmo->a};
 2624 :  1497 :   264 :   sp->swallowed_angular_momentum[0] +=
 2625 :  1498 :   266 :   sp->swallowed_angular_momentum[1] +=
 2626 :  1499 :   268 :   sp->swallowed_angular_momentum[2] +=
 2627 :  1500 :   272 :   const float sink_mom[3] = {sink_mass * sp->v[0] + gas_mass * p->v[0],
 2628 :  1501 :   273 :                              sink_mass * sp->v[1] + gas_mass * p->v[1],
 2629 :  1502 :   274 :                              sink_mass * sp->v[2] + gas_mass * p->v[2]};
 2630 :  1503 :   276 :   sp->v[0] = sink_mom[0] / sp->mass;
 2631 :  1504 :   277 :   sp->v[1] = sink_mom[1] / sp->mass;
 2632 :  1505 :   278 :   sp->v[2] = sink_mom[2] / sp->mass;
 2633 :  1506 :   279 :   sp->gpart->v_full[0] = sp->v[0];
 2634 :  1507 :   280 :   sp->gpart->v_full[1] = sp->v[1];
 2635 :  1508 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 2636 :  1509 :   290 :       sp->id, p->id, -dv[0], -dv[1], -dv[2], -dx[0], -dx[1], -dx[2],
 2637 :  1510 :   295 :   struct chemistry_sink_data* sp_chem = &sp->chemistry_data;
 2638 :  1511 :   300 :   sp->number_of_gas_swallows++;
 2639 :  1512 :   301 :   sp->number_of_direct_gas_swallows++;
 2640 :  1513 :   407 :   sp->h = sink->r_cut;
 2641 :  1515 :    54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2642 :  1516 :    55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2643 :  1517 :    56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2644 :  1518 :    58 :     ret[0] = sp->x[0];
 2645 :  1519 :    59 :     ret[1] = sp->x[1];
 2646 :  1520 :    60 :     ret[2] = sp->x[2];
 2647 :  1521 :    72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2648 :  1522 :    73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2649 :  1523 :    86 :   const struct gpart* gp = sp->gpart;
 2650 :  1525 :    52 :   sp->cut_off_radius =
 2651 :  1526 :    55 :   sp->maximal_temperature =
 2652 :  1527 :    58 :   sp->density_threshold =
 2653 :  1528 :    62 :   sp->maximal_temperature /=
 2654 :  1529 :    65 :   sp->density_threshold /= units_cgs_conversion_factor(us, UNIT_CONV_DENSITY);
 2655 :  1530 :    67 :   message("maximal_temperature = %g", sp->maximal_temperature);
 2656 :  1531 :    68 :   message("density_threshold  = %g", sp->density_threshold);
 2657 :  1533 :   628 :     if (sp->time_bin == time_bin_not_created ||
 2658 :  1534 :   629 :         sp->time_bin == time_bin_inhibited)
 2659 :  1535 :   633 :     struct gpart *gp = sp->gpart;
 2660 :  1536 :   640 :     gp->x[0] = sp->x[0];
 2661 :  1537 :   641 :     gp->x[1] = sp->x[1];
 2662 :  1538 :   642 :     gp->x[2] = sp->x[2];
 2663 :  1539 :   644 :     gp->v_full[0] = sp->v[0];
 2664 :  1540 :   645 :     gp->v_full[1] = sp->v[1];
 2665 :  1541 :   646 :     gp->v_full[2] = sp->v[2];
 2666 :  1542 :   648 :     gp->mass = sp->mass;
 2667 :  1544 :   357 :     double old_pos_x = sp->x[0];
 2668 :  1545 :   358 :     double old_pos_y = sp->x[1];
 2669 :  1546 :   359 :     double old_pos_z = sp->x[2];
 2670 :  1547 :   362 :     if (!s->periodic && sp->time_bin != time_bin_inhibited) {
 2671 :  1548 :   400 :     if (sp->time_bin == time_bin_inhibited) {
 2672 :  1549 :   403 :     } else if (sp->time_bin == time_bin_not_created) {
 2673 :  1550 :   415 :       min_mass = min(min_mass, sp->mass);
 2674 :  1551 :   419 :           sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2];
 2675 :  1552 :   422 :       sp->x[0] = pos_x;
 2676 :  1553 :   423 :       sp->x[1] = pos_y;
 2677 :  1554 :   424 :       sp->x[2] = pos_z;
 2678 :  1556 :   581 :         cell_getid(cdim, sp->x[0] * ih[0], sp->x[1] * ih[1], sp->x[2] * ih[2]);
 2679 :  1557 :   655 :     if (sp->time_bin == time_bin_inhibited)
 2680 :  1558 :   660 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
 2681 :  1559 :   661 :                    sp->x[2] * s->iwidth[2]);
 2682 :  1560 :   669 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
 2683 :  1561 :   670 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
 2684 :  1562 :   671 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
 2685 :  1564 :   591 :   sp->mass = hydro_get_mass(p);
 2686 :  1565 :   594 :   sp->mass_init = hydro_get_mass(p);
 2687 :  1566 :   598 :     sp->birth_scale_factor = cosmo->a;
 2688 :  1567 :   600 :     sp->birth_time = e->time;
 2689 :  1568 :   604 :   sp->split_data = xp->split_data;
 2690 :  1569 :   607 :   sp->chemistry_data = p->chemistry_data;
 2691 :  1570 :   610 :   sp->tracers_data = xp->tracers_data;
 2692 :  1571 :   613 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
 2693 :  1572 :   616 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
 2694 :  1573 :   620 :   sp->f_E = -1.f;
 2695 :  1574 :   621 :   sp->number_of_SNII_events = 0;
 2696 :  1575 :   622 :   sp->last_enrichment_time = sp->birth_time;
 2697 :  1576 :   623 :   sp->count_since_last_enrichment = -1;
 2698 :  1577 :   624 :   sp->number_of_heating_events = 0.;
 2699 :  1579 :    43 :   sf->new_stellar_mass += sp->mass;
 2700 :  1581 :   244 :   if (p->x[0] != sp->x[0] || p->x[1] != sp->x[1] || p->x[2] != sp->x[2]) {
 2701 :  1582 :   248 :         p->x[0], p->x[1], p->x[2], sp->x[0], sp->x[1], sp->x[2]);
 2702 :  1583 :   269 :   sp->x[0] += delta_x * max_displacement * p->h;
 2703 :  1584 :   270 :   sp->x[1] += delta_y * max_displacement * p->h;
 2704 :  1585 :   271 :   sp->x[2] += delta_z * max_displacement * p->h;
 2705 :  1586 :   274 :   sp->gpart->x[0] = sp->x[0];
 2706 :  1587 :   275 :   sp->gpart->x[1] = sp->x[1];
 2707 :  1588 :   276 :   sp->gpart->x[2] = sp->x[2];
 2708 :  1589 :   279 :   const double mass_ratio = sp->mass / hydro_get_mass(p);
 2709 :  1590 :   338 :     sp->mass = mass_star;
 2710 :  1591 :   339 :     sp->gpart->mass = mass_star;
 2711 :  1592 :   347 :     sp->mass = mass_gas;
 2712 :  1593 :   349 :   sp->sf_data.birth_mass = sp->mass;
 2713 :  1594 :   353 :     sp->birth_scale_factor = cosmo->a;
 2714 :  1595 :   355 :     sp->birth_time = e->time;
 2715 :  1596 :   359 :   // sp->tracers_data = xp->tracers_data;
 2716 :  1597 :   362 :   sp->split_data = xp->split_data;
 2717 :  1598 :   365 :   sp->sf_data.birth_density = hydro_get_physical_density(p, cosmo);
 2718 :  1599 :   368 :   sp->sf_data.birth_temperature = cooling_get_temperature(
 2719 :  1600 :   375 :   sp->sf_data.progenitor_id = p->id;
 2720 :  1602 :    41 :   out[0] = sp->sf_data.birth_density;
 2721 :  1603 :    42 :   out[1] = sp->sf_data.birth_mass;
 2722 :  1604 :    44 :   *id = sp->sf_data.progenitor_id;
 2723 :  1606 :    44 :   sf->new_stellar_mass += sp->mass;
 2724 :  1608 :   425 :   sp->mass = hydro_get_mass(p);
 2725 :  1609 :   428 :   sp->mass_init = hydro_get_mass(p);
 2726 :  1610 :   432 :     sp->birth_scale_factor = cosmo->a;
 2727 :  1611 :   434 :     sp->birth_time = e->time;
 2728 :  1612 :   438 :   sp->split_data = xp->split_data;
 2729 :  1613 :   441 :   sp->chemistry_data = p->chemistry_data;
 2730 :  1614 :   444 :   sp->tracers_data = xp->tracers_data;
 2731 :  1615 :   447 :   sp->birth_density = cooling_get_subgrid_density(p, xp);
 2732 :  1616 :   450 :   sp->birth_temperature = cooling_get_subgrid_temperature(p, xp);
 2733 :  1617 :   453 :   sp->feedback_data.feedback_mass_to_launch = 0.f;
 2734 :  1618 :   454 :   sp->feedback_data.feedback_energy_reservoir = 0.f;
 2735 :  1619 :   455 :   sp->last_enrichment_time = sp->birth_time;
 2736 :  1620 :   456 :   sp->count_since_last_enrichment = -1;
 2737 :  1622 :    43 :   sf->new_stellar_mass += sp->mass;
 2738 :  1624 :   173 :   sp->mass = hydro_get_mass(p);
 2739 :  1625 :   176 :   sp->mass_init = hydro_get_mass(p);
 2740 :  1626 :   179 :   sp->split_data = xp->split_data;
 2741 :  1627 :   183 :     sp->birth_scale_factor = cosmo->a;
 2742 :  1628 :   185 :     sp->birth_time = e->time;
 2743 :  1630 :   663 :   sp->mass = hydro_get_mass(p);
 2744 :  1631 :   666 :   sp->mass_init = hydro_get_mass(p);
 2745 :  1632 :   670 :     sp->birth_scale_factor = cosmo->a;
 2746 :  1633 :   672 :     sp->birth_time = e->time;
 2747 :  1634 :   676 :   sp->split_data = xp->split_data;
 2748 :  1635 :   679 :   sp->chemistry_data = p->chemistry_data;
 2749 :  1636 :   682 :   sp->tracers_data = xp->tracers_data;
 2750 :  1637 :   685 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
 2751 :  1638 :   688 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
 2752 :  1639 :   692 :   sp->f_E = -1.f;
 2753 :  1640 :   693 :   sp->number_of_SNII_events = 0;
 2754 :  1641 :   694 :   sp->last_enrichment_time = sp->birth_time;
 2755 :  1642 :   695 :   sp->count_since_last_enrichment = -1;
 2756 :  1643 :   696 :   sp->number_of_heating_events = 0.;
 2757 :  1645 :    43 :   sf->new_stellar_mass += sp->mass;
 2758 :  1647 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2759 :  1648 :    61 :     return time - (double)sp->birth_time;
 2760 :  1649 :    81 :   sp->time_bin = 0;
 2761 :  1650 :    84 :   sp->group_data.mass = 0.f;
 2762 :  1651 :    85 :   sp->group_data.stellar_mass = 0.f;
 2763 :  1652 :    99 :     sp->ids_ngbs_density[i] = -1;
 2764 :  1653 :   100 :   sp->num_ngb_density = 0;
 2765 :  1654 :   103 :   sp->density.wcount = 0.f;
 2766 :  1655 :   104 :   sp->density.wcount_dh = 0.f;
 2767 :  1656 :   152 :   const float h = sp->h;
 2768 :  1657 :   158 :   sp->density.wcount *= h_inv_dim;
 2769 :  1658 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2770 :  1659 :   175 :       sp->id, sp->h, sp->density.wcount);
 2771 :  1660 :   178 :   const float h = sp->h;
 2772 :  1661 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 2773 :  1662 :   184 :   sp->density.wcount_dh = 0.f;
 2774 :  1664 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 2775 :  1665 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 2776 :  1666 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 2777 :  1668 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2778 :  1669 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2779 :  1670 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2780 :  1671 :    62 :     ret[0] = sp->x[0];
 2781 :  1672 :    63 :     ret[1] = sp->x[1];
 2782 :  1673 :    64 :     ret[2] = sp->x[2];
 2783 :  1674 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2784 :  1675 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2785 :  1676 :    92 :   const struct gpart *gp = sp->gpart;
 2786 :  1677 :   111 :   if (sp->gpart != NULL)
 2787 :  1678 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2788 :  1679 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 2789 :  1680 :   199 :   sp->h_tolerance =
 2790 :  1681 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2791 :  1682 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2792 :  1683 :   205 :   sp->delta_neighbours =
 2793 :  1684 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2794 :  1685 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2795 :  1686 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 2796 :  1687 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2797 :  1688 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 2798 :  1689 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 2799 :  1690 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2800 :  1691 :   242 :           sp->max_smoothing_iterations);
 2801 :  1692 :   252 :                        sp->target_neighbours);
 2802 :  1693 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2803 :  1694 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2804 :  1695 :   256 :                        sp->h_tolerance);
 2805 :  1696 :   258 :                        sp->log_max_h_change);
 2806 :  1697 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 2807 :  1698 :   262 :                        sp->max_smoothing_iterations);
 2808 :  1700 :    43 :   if (sp->birth_time == -1.) {
 2809 :  1701 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2810 :  1702 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2811 :  1703 :    59 :     star_age = time - sp->birth_time;
 2812 :  1704 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2813 :  1705 :    88 :     return time - (double)sp->birth_time;
 2814 :  1706 :   102 :     sp->ids_ngbs_density[i] = -1;
 2815 :  1707 :   103 :   sp->num_ngb_density = 0;
 2816 :  1708 :   106 :   sp->density.wcount = 0.f;
 2817 :  1709 :   107 :   sp->density.wcount_dh = 0.f;
 2818 :  1710 :   110 :   sp->N_density = 0;
 2819 :  1711 :   111 :   sp->N_density_exact = 0;
 2820 :  1712 :   112 :   sp->rho = 0.f;
 2821 :  1713 :   113 :   sp->rho_exact = 0.f;
 2822 :  1714 :   114 :   sp->n = 0.f;
 2823 :  1715 :   115 :   sp->n_exact = 0.f;
 2824 :  1716 :   116 :   sp->inhibited_exact = 0;
 2825 :  1717 :   137 :   sp->time_bin = 0;
 2826 :  1718 :   138 :   sp->f_E = -1.f;
 2827 :  1719 :   139 :   sp->count_since_last_enrichment = -1;
 2828 :  1720 :   140 :   sp->number_of_heating_events = 0.;
 2829 :  1721 :   141 :   sp->number_of_SNII_events = 0;
 2830 :  1722 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2831 :  1723 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2832 :  1724 :   148 :     sp->birth_temperature =
 2833 :  1725 :   152 :     sp->last_enrichment_time = scale_factor;
 2834 :  1726 :   154 :     sp->last_enrichment_time = time;
 2835 :  1727 :   159 :   sp->group_data.mass = 0.f;
 2836 :  1728 :   160 :   sp->group_data.stellar_mass = 0.f;
 2837 :  1729 :   211 :   const float h = sp->h;
 2838 :  1730 :   217 :   sp->density.wcount *= h_inv_dim;
 2839 :  1731 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2840 :  1732 :   221 :   sp->rho *= h_inv_dim;
 2841 :  1733 :   222 :   sp->n *= h_inv_dim;
 2842 :  1734 :   239 :       sp->id, sp->h, sp->density.wcount);
 2843 :  1735 :   242 :   sp->density.wcount = 0.f;
 2844 :  1736 :   243 :   sp->density.wcount_dh = 0.f;
 2845 :  1737 :   303 :   const float mass = sp->mass_init;
 2846 :  1738 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2847 :  1739 :   309 :     age = time - sp->birth_time;
 2848 :  1741 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2849 :  1742 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2850 :  1743 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2851 :  1744 :    71 :     ret[0] = sp->x[0];
 2852 :  1745 :    72 :     ret[1] = sp->x[1];
 2853 :  1746 :    73 :     ret[2] = sp->x[2];
 2854 :  1747 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2855 :  1748 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2856 :  1749 :   101 :   const struct gpart *gp = sp->gpart;
 2857 :  1750 :   128 :   if (sp->gpart != NULL)
 2858 :  1751 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2859 :  1752 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 2860 :  1753 :   253 :   sp->h_tolerance =
 2861 :  1754 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2862 :  1755 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2863 :  1756 :   259 :   sp->delta_neighbours =
 2864 :  1757 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2865 :  1758 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2866 :  1759 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 2867 :  1760 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2868 :  1761 :   276 :   sp->overwrite_birth_time =
 2869 :  1762 :   278 :   sp->overwrite_birth_density =
 2870 :  1763 :   280 :   sp->overwrite_birth_temperature =
 2871 :  1764 :   284 :   if (sp->overwrite_birth_time) {
 2872 :  1765 :   285 :     sp->spart_first_init_birth_time =
 2873 :  1766 :   290 :   if (sp->overwrite_birth_density) {
 2874 :  1767 :   291 :     sp->spart_first_init_birth_density =
 2875 :  1768 :   296 :   if (sp->overwrite_birth_temperature) {
 2876 :  1769 :   297 :     sp->spart_first_init_birth_temperature =
 2877 :  1770 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 2878 :  1771 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 2879 :  1772 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 2880 :  1773 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 2881 :  1774 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 2882 :  1775 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 2883 :  1776 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 2884 :  1777 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 2885 :  1778 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 2886 :  1779 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 2887 :  1780 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 2888 :  1781 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 2889 :  1782 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 2890 :  1783 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2891 :  1784 :   404 :           sp->max_smoothing_iterations);
 2892 :  1785 :   406 :   if (sp->overwrite_birth_time)
 2893 :  1786 :   408 :             sp->spart_first_init_birth_time);
 2894 :  1787 :   411 :           sp->age_threshold_unlimited);
 2895 :  1788 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 2896 :  1789 :   414 :           sp->max_time_step_young);
 2897 :  1790 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 2898 :  1791 :   424 :                        sp->target_neighbours);
 2899 :  1792 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2900 :  1793 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2901 :  1794 :   428 :                        sp->h_tolerance);
 2902 :  1795 :   430 :                        sp->log_max_h_change);
 2903 :  1796 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 2904 :  1797 :   434 :                        sp->max_smoothing_iterations);
 2905 :  1798 :   462 :     free(sp->lum_tables_Z[i]);
 2906 :  1799 :   463 :     free(sp->lum_tables_ages[i]);
 2907 :  1800 :   464 :     free(sp->lum_tables_luminosities[i]);
 2908 :  1802 :    58 :     const double birth = sp->birth_scale_factor;
 2909 :  1803 :    62 :     return time - (double)sp->birth_time;
 2910 :  1804 :    76 :     sp->ids_ngbs_density[i] = -1;
 2911 :  1805 :    77 :   sp->num_ngb_density = 0;
 2912 :  1806 :    80 :   sp->density.wcount = 0.f;
 2913 :  1807 :    81 :   sp->density.wcount_dh = 0.f;
 2914 :  1808 :   100 :   sp->time_bin = 0;
 2915 :  1809 :   105 :   sp->group_data.mass = 0.f;
 2916 :  1810 :   106 :   sp->group_data.stellar_mass = 0.f;
 2917 :  1811 :   157 :   const float h = sp->h;
 2918 :  1812 :   163 :   sp->density.wcount *= h_inv_dim;
 2919 :  1813 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2920 :  1814 :   180 :       sp->id, sp->h, sp->density.wcount);
 2921 :  1815 :   183 :   sp->density.wcount = 0.f;
 2922 :  1816 :   184 :   sp->density.wcount_dh = 0.f;
 2923 :  1818 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 2924 :  1819 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 2925 :  1820 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 2926 :  1822 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2927 :  1823 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2928 :  1824 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2929 :  1825 :    64 :     ret[0] = sp->x[0];
 2930 :  1826 :    65 :     ret[1] = sp->x[1];
 2931 :  1827 :    66 :     ret[2] = sp->x[2];
 2932 :  1828 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 2933 :  1829 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 2934 :  1830 :    94 :   const struct gpart *gp = sp->gpart;
 2935 :  1831 :   113 :   if (sp->gpart != NULL)
 2936 :  1832 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 2937 :  1833 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 2938 :  1834 :   211 :   sp->h_tolerance =
 2939 :  1835 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 2940 :  1836 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 2941 :  1837 :   217 :   sp->delta_neighbours =
 2942 :  1838 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 2943 :  1839 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 2944 :  1840 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 2945 :  1841 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 2946 :  1842 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 2947 :  1843 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 2948 :  1844 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 2949 :  1845 :   254 :           sp->max_smoothing_iterations);
 2950 :  1846 :   264 :                        sp->target_neighbours);
 2951 :  1847 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 2952 :  1848 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 2953 :  1849 :   268 :                        sp->h_tolerance);
 2954 :  1850 :   270 :                        sp->log_max_h_change);
 2955 :  1851 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 2956 :  1852 :   274 :                        sp->max_smoothing_iterations);
 2957 :  1854 :    72 :   sp->group_data.mass = 0.f;
 2958 :  1855 :    73 :   sp->group_data.stellar_mass = 0.f;
 2959 :  1857 :    43 :   if (sp->birth_time == -1.) {
 2960 :  1858 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 2961 :  1859 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 2962 :  1860 :    59 :     star_age = time - sp->birth_time;
 2963 :  1861 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 2964 :  1862 :    88 :     return time - (double)sp->birth_time;
 2965 :  1863 :   102 :     sp->ids_ngbs_density[i] = -1;
 2966 :  1864 :   103 :   sp->num_ngb_density = 0;
 2967 :  1865 :   106 :   sp->density.wcount = 0.f;
 2968 :  1866 :   107 :   sp->density.wcount_dh = 0.f;
 2969 :  1867 :   110 :   sp->N_density = 0;
 2970 :  1868 :   111 :   sp->N_density_exact = 0;
 2971 :  1869 :   112 :   sp->rho = 0.f;
 2972 :  1870 :   113 :   sp->rho_exact = 0.f;
 2973 :  1871 :   114 :   sp->n = 0.f;
 2974 :  1872 :   115 :   sp->n_exact = 0.f;
 2975 :  1873 :   116 :   sp->inhibited_exact = 0;
 2976 :  1874 :   137 :   sp->time_bin = 0;
 2977 :  1875 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 2978 :  1876 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 2979 :  1877 :   144 :     sp->birth_temperature =
 2980 :  1878 :   148 :     sp->last_enrichment_time = scale_factor;
 2981 :  1879 :   150 :     sp->last_enrichment_time = time;
 2982 :  1880 :   155 :   sp->group_data.mass = 0.f;
 2983 :  1881 :   156 :   sp->group_data.stellar_mass = 0.f;
 2984 :  1882 :   157 :   sp->group_data.ssfr = 0.f;
 2985 :  1883 :   208 :   const float h = sp->h;
 2986 :  1884 :   214 :   sp->density.wcount *= h_inv_dim;
 2987 :  1885 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 2988 :  1886 :   218 :   sp->rho *= h_inv_dim;
 2989 :  1887 :   219 :   sp->n *= h_inv_dim;
 2990 :  1888 :   236 :       sp->id, sp->h, sp->density.wcount);
 2991 :  1889 :   239 :   sp->density.wcount = 0.f;
 2992 :  1890 :   240 :   sp->density.wcount_dh = 0.f;
 2993 :  1891 :   300 :   const float mass = sp->mass_init;
 2994 :  1892 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 2995 :  1893 :   306 :     age = time - sp->birth_time;
 2996 :  1895 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 2997 :  1896 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 2998 :  1897 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 2999 :  1898 :    71 :     ret[0] = sp->x[0];
 3000 :  1899 :    72 :     ret[1] = sp->x[1];
 3001 :  1900 :    73 :     ret[2] = sp->x[2];
 3002 :  1901 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3003 :  1902 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3004 :  1903 :   101 :   const struct gpart *gp = sp->gpart;
 3005 :  1904 :   128 :   if (sp->gpart != NULL)
 3006 :  1905 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3007 :  1906 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 3008 :  1907 :   252 :   sp->h_tolerance =
 3009 :  1908 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3010 :  1909 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3011 :  1910 :   258 :   sp->delta_neighbours =
 3012 :  1911 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3013 :  1912 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3014 :  1913 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 3015 :  1914 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3016 :  1915 :   275 :   sp->overwrite_birth_time =
 3017 :  1916 :   277 :   sp->overwrite_birth_density =
 3018 :  1917 :   279 :   sp->overwrite_birth_temperature =
 3019 :  1918 :   283 :   if (sp->overwrite_birth_time) {
 3020 :  1919 :   284 :     sp->spart_first_init_birth_time =
 3021 :  1920 :   289 :   if (sp->overwrite_birth_density) {
 3022 :  1921 :   290 :     sp->spart_first_init_birth_density =
 3023 :  1922 :   295 :   if (sp->overwrite_birth_temperature) {
 3024 :  1923 :   296 :     sp->spart_first_init_birth_temperature =
 3025 :  1924 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3026 :  1925 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3027 :  1926 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3028 :  1927 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3029 :  1928 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3030 :  1929 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3031 :  1930 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3032 :  1931 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 3033 :  1932 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3034 :  1933 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3035 :  1934 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3036 :  1935 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 3037 :  1936 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 3038 :  1937 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3039 :  1938 :   403 :           sp->max_smoothing_iterations);
 3040 :  1939 :   405 :   if (sp->overwrite_birth_time)
 3041 :  1940 :   407 :             sp->spart_first_init_birth_time);
 3042 :  1941 :   410 :           sp->age_threshold_unlimited);
 3043 :  1942 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3044 :  1943 :   413 :           sp->max_time_step_young);
 3045 :  1944 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3046 :  1945 :   423 :                        sp->target_neighbours);
 3047 :  1946 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3048 :  1947 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3049 :  1948 :   427 :                        sp->h_tolerance);
 3050 :  1949 :   429 :                        sp->log_max_h_change);
 3051 :  1950 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 3052 :  1951 :   433 :                        sp->max_smoothing_iterations);
 3053 :  1952 :   461 :     free(sp->lum_tables_Z[i]);
 3054 :  1953 :   462 :     free(sp->lum_tables_ages[i]);
 3055 :  1954 :   463 :     free(sp->lum_tables_luminosities[i]);
 3056 :  1956 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3057 :  1957 :     3 :    61 :     return time - (double)sp->birth_time;
 3058 :  1958 :     4 :    81 :   sp->time_bin = 0;
 3059 :  1959 :     5 :    84 :   sp->group_data.mass = 0.f;
 3060 :  1960 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 3061 :  1961 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 3062 :  1962 :     8 :   100 :   sp->num_ngb_density = 0;
 3063 :  1963 :     9 :   103 :   sp->density.wcount = 0.f;
 3064 :  1964 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 3065 :  1965 :    11 :   152 :   const float h = sp->h;
 3066 :  1966 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 3067 :  1967 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3068 :  1968 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 3069 :  1969 :    15 :   178 :   const float h = sp->h;
 3070 :  1970 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 3071 :  1971 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 3072 :  1972 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3073 :  1973 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3074 :  1974 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3075 :  1975 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3076 :  1976 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3077 :  1977 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3078 :  1978 :    26 :    62 :     ret[0] = sp->x[0];
 3079 :  1979 :    27 :    63 :     ret[1] = sp->x[1];
 3080 :  1980 :    28 :    64 :     ret[2] = sp->x[2];
 3081 :  1981 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3082 :  1982 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3083 :  1983 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 3084 :  1984 :    32 :   111 :   if (sp->gpart != NULL)
 3085 :  1985 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3086 :  1986 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 3087 :  1987 :    35 :   199 :   sp->h_tolerance =
 3088 :  1988 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3089 :  1989 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3090 :  1990 :    38 :   205 :   sp->delta_neighbours =
 3091 :  1991 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3092 :  1992 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3093 :  1993 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 3094 :  1994 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3095 :  1995 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 3096 :  1996 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 3097 :  1997 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3098 :  1998 :    46 :   242 :           sp->max_smoothing_iterations);
 3099 :  1999 :    47 :   252 :                        sp->target_neighbours);
 3100 :  2000 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3101 :  2001 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3102 :  2002 :    50 :   256 :                        sp->h_tolerance);
 3103 :  2003 :    51 :   258 :                        sp->log_max_h_change);
 3104 :  2004 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 3105 :  2005 :    53 :   262 :                        sp->max_smoothing_iterations);
 3106 :  2006 :    55 :    43 :   if (sp->birth_time == -1.) {
 3107 :  2007 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 3108 :  2008 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 3109 :  2009 :    58 :    59 :     star_age = time - sp->birth_time;
 3110 :  2010 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3111 :  2011 :    60 :    88 :     return time - (double)sp->birth_time;
 3112 :  2012 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 3113 :  2013 :    62 :   103 :   sp->num_ngb_density = 0;
 3114 :  2014 :    63 :   106 :   sp->density.wcount = 0.f;
 3115 :  2015 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 3116 :  2016 :    65 :   110 :   sp->N_density = 0;
 3117 :  2017 :    66 :   111 :   sp->N_density_exact = 0;
 3118 :  2018 :    67 :   112 :   sp->rho = 0.f;
 3119 :  2019 :    68 :   113 :   sp->rho_exact = 0.f;
 3120 :  2020 :    69 :   114 :   sp->n = 0.f;
 3121 :  2021 :    70 :   115 :   sp->n_exact = 0.f;
 3122 :  2022 :    71 :   116 :   sp->inhibited_exact = 0;
 3123 :  2023 :    72 :   137 :   sp->time_bin = 0;
 3124 :  2024 :    73 :   138 :   sp->f_E = -1.f;
 3125 :  2025 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 3126 :  2026 :    75 :   140 :   sp->number_of_heating_events = 0.;
 3127 :  2027 :    76 :   141 :   sp->number_of_SNII_events = 0;
 3128 :  2028 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 3129 :  2029 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 3130 :  2030 :    79 :   148 :     sp->birth_temperature =
 3131 :  2031 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 3132 :  2032 :    81 :   154 :     sp->last_enrichment_time = time;
 3133 :  2033 :    82 :   159 :   sp->group_data.mass = 0.f;
 3134 :  2034 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 3135 :  2035 :    84 :   211 :   const float h = sp->h;
 3136 :  2036 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 3137 :  2037 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3138 :  2038 :    87 :   221 :   sp->rho *= h_inv_dim;
 3139 :  2039 :    88 :   222 :   sp->n *= h_inv_dim;
 3140 :  2040 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 3141 :  2041 :    90 :   242 :   sp->density.wcount = 0.f;
 3142 :  2042 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 3143 :  2043 :    92 :   303 :   const float mass = sp->mass_init;
 3144 :  2044 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 3145 :  2045 :    94 :   309 :     age = time - sp->birth_time;
 3146 :  2046 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3147 :  2047 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3148 :  2048 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3149 :  2049 :    99 :    71 :     ret[0] = sp->x[0];
 3150 :  2050 :   100 :    72 :     ret[1] = sp->x[1];
 3151 :  2051 :   101 :    73 :     ret[2] = sp->x[2];
 3152 :  2052 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3153 :  2053 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3154 :  2054 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 3155 :  2055 :   105 :   128 :   if (sp->gpart != NULL)
 3156 :  2056 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3157 :  2057 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 3158 :  2058 :   108 :   253 :   sp->h_tolerance =
 3159 :  2059 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3160 :  2060 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3161 :  2061 :   111 :   259 :   sp->delta_neighbours =
 3162 :  2062 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3163 :  2063 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3164 :  2064 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 3165 :  2065 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3166 :  2066 :   116 :   276 :   sp->overwrite_birth_time =
 3167 :  2067 :   117 :   278 :   sp->overwrite_birth_density =
 3168 :  2068 :   118 :   280 :   sp->overwrite_birth_temperature =
 3169 :  2069 :   119 :   284 :   if (sp->overwrite_birth_time) {
 3170 :  2070 :   120 :   285 :     sp->spart_first_init_birth_time =
 3171 :  2071 :   121 :   290 :   if (sp->overwrite_birth_density) {
 3172 :  2072 :   122 :   291 :     sp->spart_first_init_birth_density =
 3173 :  2073 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 3174 :  2074 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 3175 :  2075 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3176 :  2076 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3177 :  2077 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3178 :  2078 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3179 :  2079 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3180 :  2080 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3181 :  2081 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3182 :  2082 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 3183 :  2083 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3184 :  2084 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3185 :  2085 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3186 :  2086 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 3187 :  2087 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 3188 :  2088 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3189 :  2089 :   139 :   404 :           sp->max_smoothing_iterations);
 3190 :  2090 :   140 :   406 :   if (sp->overwrite_birth_time)
 3191 :  2091 :   141 :   408 :             sp->spart_first_init_birth_time);
 3192 :  2092 :   142 :   411 :           sp->age_threshold_unlimited);
 3193 :  2093 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3194 :  2094 :   144 :   414 :           sp->max_time_step_young);
 3195 :  2095 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3196 :  2096 :   146 :   424 :                        sp->target_neighbours);
 3197 :  2097 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3198 :  2098 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3199 :  2099 :   149 :   428 :                        sp->h_tolerance);
 3200 :  2100 :   150 :   430 :                        sp->log_max_h_change);
 3201 :  2101 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 3202 :  2102 :   152 :   434 :                        sp->max_smoothing_iterations);
 3203 :  2103 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 3204 :  2104 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 3205 :  2105 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 3206 :  2106 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 3207 :  2107 :   158 :    62 :     return time - (double)sp->birth_time;
 3208 :  2108 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 3209 :  2109 :   160 :    77 :   sp->num_ngb_density = 0;
 3210 :  2110 :   161 :    80 :   sp->density.wcount = 0.f;
 3211 :  2111 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 3212 :  2112 :   163 :   100 :   sp->time_bin = 0;
 3213 :  2113 :   164 :   105 :   sp->group_data.mass = 0.f;
 3214 :  2114 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 3215 :  2115 :   166 :   157 :   const float h = sp->h;
 3216 :  2116 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 3217 :  2117 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3218 :  2118 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 3219 :  2119 :   170 :   183 :   sp->density.wcount = 0.f;
 3220 :  2120 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 3221 :  2121 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3222 :  2122 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3223 :  2123 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3224 :  2124 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3225 :  2125 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3226 :  2126 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3227 :  2127 :   180 :    64 :     ret[0] = sp->x[0];
 3228 :  2128 :   181 :    65 :     ret[1] = sp->x[1];
 3229 :  2129 :   182 :    66 :     ret[2] = sp->x[2];
 3230 :  2130 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3231 :  2131 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3232 :  2132 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 3233 :  2133 :   186 :   113 :   if (sp->gpart != NULL)
 3234 :  2134 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3235 :  2135 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 3236 :  2136 :   189 :   211 :   sp->h_tolerance =
 3237 :  2137 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3238 :  2138 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3239 :  2139 :   192 :   217 :   sp->delta_neighbours =
 3240 :  2140 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3241 :  2141 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3242 :  2142 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 3243 :  2143 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3244 :  2144 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 3245 :  2145 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 3246 :  2146 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3247 :  2147 :   200 :   254 :           sp->max_smoothing_iterations);
 3248 :  2148 :   201 :   264 :                        sp->target_neighbours);
 3249 :  2149 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3250 :  2150 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3251 :  2151 :   204 :   268 :                        sp->h_tolerance);
 3252 :  2152 :   205 :   270 :                        sp->log_max_h_change);
 3253 :  2153 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 3254 :  2154 :   207 :   274 :                        sp->max_smoothing_iterations);
 3255 :  2155 :   209 :    72 :   sp->group_data.mass = 0.f;
 3256 :  2156 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 3257 :  2157 :   212 :    43 :   if (sp->birth_time == -1.) {
 3258 :  2158 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 3259 :  2159 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 3260 :  2160 :   215 :    59 :     star_age = time - sp->birth_time;
 3261 :  2161 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3262 :  2162 :   217 :    88 :     return time - (double)sp->birth_time;
 3263 :  2163 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 3264 :  2164 :   219 :   103 :   sp->num_ngb_density = 0;
 3265 :  2165 :   220 :   106 :   sp->density.wcount = 0.f;
 3266 :  2166 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 3267 :  2167 :   222 :   110 :   sp->N_density = 0;
 3268 :  2168 :   223 :   111 :   sp->N_density_exact = 0;
 3269 :  2169 :   224 :   112 :   sp->rho = 0.f;
 3270 :  2170 :   225 :   113 :   sp->rho_exact = 0.f;
 3271 :  2171 :   226 :   114 :   sp->n = 0.f;
 3272 :  2172 :   227 :   115 :   sp->n_exact = 0.f;
 3273 :  2173 :   228 :   116 :   sp->inhibited_exact = 0;
 3274 :  2174 :   229 :   137 :   sp->time_bin = 0;
 3275 :  2175 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 3276 :  2176 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 3277 :  2177 :   232 :   144 :     sp->birth_temperature =
 3278 :  2178 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 3279 :  2179 :   234 :   150 :     sp->last_enrichment_time = time;
 3280 :  2180 :   235 :   155 :   sp->group_data.mass = 0.f;
 3281 :  2181 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 3282 :  2182 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 3283 :  2183 :   238 :   208 :   const float h = sp->h;
 3284 :  2184 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 3285 :  2185 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3286 :  2186 :   241 :   218 :   sp->rho *= h_inv_dim;
 3287 :  2187 :   242 :   219 :   sp->n *= h_inv_dim;
 3288 :  2188 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 3289 :  2189 :   244 :   239 :   sp->density.wcount = 0.f;
 3290 :  2190 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 3291 :  2191 :   246 :   300 :   const float mass = sp->mass_init;
 3292 :  2192 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 3293 :  2193 :   248 :   306 :     age = time - sp->birth_time;
 3294 :  2194 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3295 :  2195 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3296 :  2196 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3297 :  2197 :   253 :    71 :     ret[0] = sp->x[0];
 3298 :  2198 :   254 :    72 :     ret[1] = sp->x[1];
 3299 :  2199 :   255 :    73 :     ret[2] = sp->x[2];
 3300 :  2200 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3301 :  2201 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3302 :  2202 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 3303 :  2203 :   259 :   128 :   if (sp->gpart != NULL)
 3304 :  2204 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3305 :  2205 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 3306 :  2206 :   262 :   252 :   sp->h_tolerance =
 3307 :  2207 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3308 :  2208 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3309 :  2209 :   265 :   258 :   sp->delta_neighbours =
 3310 :  2210 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3311 :  2211 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3312 :  2212 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 3313 :  2213 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3314 :  2214 :   270 :   275 :   sp->overwrite_birth_time =
 3315 :  2215 :   271 :   277 :   sp->overwrite_birth_density =
 3316 :  2216 :   272 :   279 :   sp->overwrite_birth_temperature =
 3317 :  2217 :   273 :   283 :   if (sp->overwrite_birth_time) {
 3318 :  2218 :   274 :   284 :     sp->spart_first_init_birth_time =
 3319 :  2219 :   275 :   289 :   if (sp->overwrite_birth_density) {
 3320 :  2220 :   276 :   290 :     sp->spart_first_init_birth_density =
 3321 :  2221 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 3322 :  2222 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 3323 :  2223 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3324 :  2224 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3325 :  2225 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3326 :  2226 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3327 :  2227 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3328 :  2228 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3329 :  2229 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3330 :  2230 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 3331 :  2231 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3332 :  2232 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3333 :  2233 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3334 :  2234 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 3335 :  2235 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 3336 :  2236 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3337 :  2237 :   293 :   403 :           sp->max_smoothing_iterations);
 3338 :  2238 :   294 :   405 :   if (sp->overwrite_birth_time)
 3339 :  2239 :   295 :   407 :             sp->spart_first_init_birth_time);
 3340 :  2240 :   296 :   410 :           sp->age_threshold_unlimited);
 3341 :  2241 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3342 :  2242 :   298 :   413 :           sp->max_time_step_young);
 3343 :  2243 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3344 :  2244 :   300 :   423 :                        sp->target_neighbours);
 3345 :  2245 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3346 :  2246 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3347 :  2247 :   303 :   427 :                        sp->h_tolerance);
 3348 :  2248 :   304 :   429 :                        sp->log_max_h_change);
 3349 :  2249 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 3350 :  2250 :   306 :   433 :                        sp->max_smoothing_iterations);
 3351 :  2251 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 3352 :  2252 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 3353 :  2253 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 3354 :  2254 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3355 :  2255 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 3356 :  2256 :   313 :     4 :    81 :   sp->time_bin = 0;
 3357 :  2257 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 3358 :  2258 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 3359 :  2259 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 3360 :  2260 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 3361 :  2261 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 3362 :  2262 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 3363 :  2263 :   320 :    11 :   152 :   const float h = sp->h;
 3364 :  2264 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 3365 :  2265 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3366 :  2266 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 3367 :  2267 :   324 :    15 :   178 :   const float h = sp->h;
 3368 :  2268 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 3369 :  2269 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 3370 :  2270 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3371 :  2271 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3372 :  2272 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3373 :  2273 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3374 :  2274 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3375 :  2275 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3376 :  2276 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 3377 :  2277 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 3378 :  2278 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 3379 :  2279 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3380 :  2280 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3381 :  2281 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 3382 :  2282 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 3383 :  2283 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3384 :  2284 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 3385 :  2285 :   342 :    35 :   199 :   sp->h_tolerance =
 3386 :  2286 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3387 :  2287 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3388 :  2288 :   345 :    38 :   205 :   sp->delta_neighbours =
 3389 :  2289 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3390 :  2290 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3391 :  2291 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 3392 :  2292 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3393 :  2293 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 3394 :  2294 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 3395 :  2295 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3396 :  2296 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 3397 :  2297 :   354 :    47 :   252 :                        sp->target_neighbours);
 3398 :  2298 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3399 :  2299 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3400 :  2300 :   357 :    50 :   256 :                        sp->h_tolerance);
 3401 :  2301 :   358 :    51 :   258 :                        sp->log_max_h_change);
 3402 :  2302 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 3403 :  2303 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 3404 :  2304 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 3405 :  2305 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 3406 :  2306 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 3407 :  2307 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 3408 :  2308 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3409 :  2309 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 3410 :  2310 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 3411 :  2311 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 3412 :  2312 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 3413 :  2313 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 3414 :  2314 :   371 :    65 :   110 :   sp->N_density = 0;
 3415 :  2315 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 3416 :  2316 :   373 :    67 :   112 :   sp->rho = 0.f;
 3417 :  2317 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 3418 :  2318 :   375 :    69 :   114 :   sp->n = 0.f;
 3419 :  2319 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 3420 :  2320 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 3421 :  2321 :   378 :    72 :   137 :   sp->time_bin = 0;
 3422 :  2322 :   379 :    73 :   138 :   sp->f_E = -1.f;
 3423 :  2323 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 3424 :  2324 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 3425 :  2325 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 3426 :  2326 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 3427 :  2327 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 3428 :  2328 :   385 :    79 :   148 :     sp->birth_temperature =
 3429 :  2329 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 3430 :  2330 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 3431 :  2331 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 3432 :  2332 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 3433 :  2333 :   390 :    84 :   211 :   const float h = sp->h;
 3434 :  2334 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 3435 :  2335 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3436 :  2336 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 3437 :  2337 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 3438 :  2338 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 3439 :  2339 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 3440 :  2340 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 3441 :  2341 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 3442 :  2342 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 3443 :  2343 :   400 :    94 :   309 :     age = time - sp->birth_time;
 3444 :  2344 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3445 :  2345 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3446 :  2346 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3447 :  2347 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 3448 :  2348 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 3449 :  2349 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 3450 :  2350 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3451 :  2351 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3452 :  2352 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 3453 :  2353 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 3454 :  2354 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3455 :  2355 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 3456 :  2356 :   413 :   108 :   253 :   sp->h_tolerance =
 3457 :  2357 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3458 :  2358 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3459 :  2359 :   416 :   111 :   259 :   sp->delta_neighbours =
 3460 :  2360 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3461 :  2361 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3462 :  2362 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 3463 :  2363 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3464 :  2364 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 3465 :  2365 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 3466 :  2366 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 3467 :  2367 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 3468 :  2368 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 3469 :  2369 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 3470 :  2370 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 3471 :  2371 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 3472 :  2372 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 3473 :  2373 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3474 :  2374 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3475 :  2375 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3476 :  2376 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3477 :  2377 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3478 :  2378 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3479 :  2379 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3480 :  2380 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 3481 :  2381 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3482 :  2382 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3483 :  2383 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3484 :  2384 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 3485 :  2385 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 3486 :  2386 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3487 :  2387 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 3488 :  2388 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 3489 :  2389 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 3490 :  2390 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 3491 :  2391 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3492 :  2392 :   449 :   144 :   414 :           sp->max_time_step_young);
 3493 :  2393 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3494 :  2394 :   451 :   146 :   424 :                        sp->target_neighbours);
 3495 :  2395 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3496 :  2396 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3497 :  2397 :   454 :   149 :   428 :                        sp->h_tolerance);
 3498 :  2398 :   455 :   150 :   430 :                        sp->log_max_h_change);
 3499 :  2399 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 3500 :  2400 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 3501 :  2401 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 3502 :  2402 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 3503 :  2403 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 3504 :  2404 :   462 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3505 :  2405 :   463 :     3 :    61 :     return time - (double)sp->birth_time;
 3506 :  2406 :   464 :     4 :    81 :   sp->time_bin = 0;
 3507 :  2407 :   465 :     5 :    84 :   sp->group_data.mass = 0.f;
 3508 :  2408 :   466 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 3509 :  2409 :   467 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 3510 :  2410 :   468 :     8 :   100 :   sp->num_ngb_density = 0;
 3511 :  2411 :   469 :     9 :   103 :   sp->density.wcount = 0.f;
 3512 :  2412 :   470 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 3513 :  2413 :   471 :    11 :   152 :   const float h = sp->h;
 3514 :  2414 :   472 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 3515 :  2415 :   473 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3516 :  2416 :   474 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 3517 :  2417 :   475 :    15 :   178 :   const float h = sp->h;
 3518 :  2418 :   476 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 3519 :  2419 :   477 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 3520 :  2420 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3521 :  2421 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3522 :  2422 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3523 :  2423 :   481 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3524 :  2424 :   482 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3525 :  2425 :   483 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3526 :  2426 :   484 :    26 :    62 :     ret[0] = sp->x[0];
 3527 :  2427 :   485 :    27 :    63 :     ret[1] = sp->x[1];
 3528 :  2428 :   486 :    28 :    64 :     ret[2] = sp->x[2];
 3529 :  2429 :   487 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3530 :  2430 :   488 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3531 :  2431 :   489 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 3532 :  2432 :   490 :    32 :   111 :   if (sp->gpart != NULL)
 3533 :  2433 :   491 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3534 :  2434 :   492 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 3535 :  2435 :   493 :    35 :   199 :   sp->h_tolerance =
 3536 :  2436 :   494 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3537 :  2437 :   495 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3538 :  2438 :   496 :    38 :   205 :   sp->delta_neighbours =
 3539 :  2439 :   497 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3540 :  2440 :   498 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3541 :  2441 :   499 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 3542 :  2442 :   500 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3543 :  2443 :   501 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 3544 :  2444 :   502 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 3545 :  2445 :   503 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3546 :  2446 :   504 :    46 :   242 :           sp->max_smoothing_iterations);
 3547 :  2447 :   505 :    47 :   252 :                        sp->target_neighbours);
 3548 :  2448 :   506 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3549 :  2449 :   507 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3550 :  2450 :   508 :    50 :   256 :                        sp->h_tolerance);
 3551 :  2451 :   509 :    51 :   258 :                        sp->log_max_h_change);
 3552 :  2452 :   510 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 3553 :  2453 :   511 :    53 :   262 :                        sp->max_smoothing_iterations);
 3554 :  2454 :   512 :    55 :    43 :   if (sp->birth_time == -1.) {
 3555 :  2455 :   513 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 3556 :  2456 :   514 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 3557 :  2457 :   515 :    58 :    59 :     star_age = time - sp->birth_time;
 3558 :  2458 :   516 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3559 :  2459 :   517 :    60 :    88 :     return time - (double)sp->birth_time;
 3560 :  2460 :   518 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 3561 :  2461 :   519 :    62 :   103 :   sp->num_ngb_density = 0;
 3562 :  2462 :   520 :    63 :   106 :   sp->density.wcount = 0.f;
 3563 :  2463 :   521 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 3564 :  2464 :   522 :    65 :   110 :   sp->N_density = 0;
 3565 :  2465 :   523 :    66 :   111 :   sp->N_density_exact = 0;
 3566 :  2466 :   524 :    67 :   112 :   sp->rho = 0.f;
 3567 :  2467 :   525 :    68 :   113 :   sp->rho_exact = 0.f;
 3568 :  2468 :   526 :    69 :   114 :   sp->n = 0.f;
 3569 :  2469 :   527 :    70 :   115 :   sp->n_exact = 0.f;
 3570 :  2470 :   528 :    71 :   116 :   sp->inhibited_exact = 0;
 3571 :  2471 :   529 :    72 :   137 :   sp->time_bin = 0;
 3572 :  2472 :   530 :    73 :   138 :   sp->f_E = -1.f;
 3573 :  2473 :   531 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 3574 :  2474 :   532 :    75 :   140 :   sp->number_of_heating_events = 0.;
 3575 :  2475 :   533 :    76 :   141 :   sp->number_of_SNII_events = 0;
 3576 :  2476 :   534 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 3577 :  2477 :   535 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 3578 :  2478 :   536 :    79 :   148 :     sp->birth_temperature =
 3579 :  2479 :   537 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 3580 :  2480 :   538 :    81 :   154 :     sp->last_enrichment_time = time;
 3581 :  2481 :   539 :    82 :   159 :   sp->group_data.mass = 0.f;
 3582 :  2482 :   540 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 3583 :  2483 :   541 :    84 :   211 :   const float h = sp->h;
 3584 :  2484 :   542 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 3585 :  2485 :   543 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3586 :  2486 :   544 :    87 :   221 :   sp->rho *= h_inv_dim;
 3587 :  2487 :   545 :    88 :   222 :   sp->n *= h_inv_dim;
 3588 :  2488 :   546 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 3589 :  2489 :   547 :    90 :   242 :   sp->density.wcount = 0.f;
 3590 :  2490 :   548 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 3591 :  2491 :   549 :    92 :   303 :   const float mass = sp->mass_init;
 3592 :  2492 :   550 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 3593 :  2493 :   551 :    94 :   309 :     age = time - sp->birth_time;
 3594 :  2494 :   552 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3595 :  2495 :   553 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3596 :  2496 :   554 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3597 :  2497 :   555 :    99 :    71 :     ret[0] = sp->x[0];
 3598 :  2498 :   556 :   100 :    72 :     ret[1] = sp->x[1];
 3599 :  2499 :   557 :   101 :    73 :     ret[2] = sp->x[2];
 3600 :  2500 :   558 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3601 :  2501 :   559 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3602 :  2502 :   560 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 3603 :  2503 :   561 :   105 :   128 :   if (sp->gpart != NULL)
 3604 :  2504 :   562 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3605 :  2505 :   563 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 3606 :  2506 :   564 :   108 :   253 :   sp->h_tolerance =
 3607 :  2507 :   565 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3608 :  2508 :   566 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3609 :  2509 :   567 :   111 :   259 :   sp->delta_neighbours =
 3610 :  2510 :   568 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3611 :  2511 :   569 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3612 :  2512 :   570 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 3613 :  2513 :   571 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3614 :  2514 :   572 :   116 :   276 :   sp->overwrite_birth_time =
 3615 :  2515 :   573 :   117 :   278 :   sp->overwrite_birth_density =
 3616 :  2516 :   574 :   118 :   280 :   sp->overwrite_birth_temperature =
 3617 :  2517 :   575 :   119 :   284 :   if (sp->overwrite_birth_time) {
 3618 :  2518 :   576 :   120 :   285 :     sp->spart_first_init_birth_time =
 3619 :  2519 :   577 :   121 :   290 :   if (sp->overwrite_birth_density) {
 3620 :  2520 :   578 :   122 :   291 :     sp->spart_first_init_birth_density =
 3621 :  2521 :   579 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 3622 :  2522 :   580 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 3623 :  2523 :   581 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3624 :  2524 :   582 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3625 :  2525 :   583 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3626 :  2526 :   584 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3627 :  2527 :   585 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3628 :  2528 :   586 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3629 :  2529 :   587 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3630 :  2530 :   588 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 3631 :  2531 :   589 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3632 :  2532 :   590 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3633 :  2533 :   591 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3634 :  2534 :   592 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 3635 :  2535 :   593 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 3636 :  2536 :   594 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3637 :  2537 :   595 :   139 :   404 :           sp->max_smoothing_iterations);
 3638 :  2538 :   596 :   140 :   406 :   if (sp->overwrite_birth_time)
 3639 :  2539 :   597 :   141 :   408 :             sp->spart_first_init_birth_time);
 3640 :  2540 :   598 :   142 :   411 :           sp->age_threshold_unlimited);
 3641 :  2541 :   599 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3642 :  2542 :   600 :   144 :   414 :           sp->max_time_step_young);
 3643 :  2543 :   601 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3644 :  2544 :   602 :   146 :   424 :                        sp->target_neighbours);
 3645 :  2545 :   603 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3646 :  2546 :   604 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3647 :  2547 :   605 :   149 :   428 :                        sp->h_tolerance);
 3648 :  2548 :   606 :   150 :   430 :                        sp->log_max_h_change);
 3649 :  2549 :   607 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 3650 :  2550 :   608 :   152 :   434 :                        sp->max_smoothing_iterations);
 3651 :  2551 :   609 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 3652 :  2552 :   610 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 3653 :  2553 :   611 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 3654 :  2554 :   612 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 3655 :  2555 :   613 :   158 :    62 :     return time - (double)sp->birth_time;
 3656 :  2556 :   614 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 3657 :  2557 :   615 :   160 :    77 :   sp->num_ngb_density = 0;
 3658 :  2558 :   616 :   161 :    80 :   sp->density.wcount = 0.f;
 3659 :  2559 :   617 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 3660 :  2560 :   618 :   163 :   100 :   sp->time_bin = 0;
 3661 :  2561 :   619 :   164 :   105 :   sp->group_data.mass = 0.f;
 3662 :  2562 :   620 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 3663 :  2563 :   621 :   166 :   157 :   const float h = sp->h;
 3664 :  2564 :   622 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 3665 :  2565 :   623 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3666 :  2566 :   624 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 3667 :  2567 :   625 :   170 :   183 :   sp->density.wcount = 0.f;
 3668 :  2568 :   626 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 3669 :  2569 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3670 :  2570 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3671 :  2571 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3672 :  2572 :   630 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3673 :  2573 :   631 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3674 :  2574 :   632 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3675 :  2575 :   633 :   180 :    64 :     ret[0] = sp->x[0];
 3676 :  2576 :   634 :   181 :    65 :     ret[1] = sp->x[1];
 3677 :  2577 :   635 :   182 :    66 :     ret[2] = sp->x[2];
 3678 :  2578 :   636 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3679 :  2579 :   637 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3680 :  2580 :   638 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 3681 :  2581 :   639 :   186 :   113 :   if (sp->gpart != NULL)
 3682 :  2582 :   640 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3683 :  2583 :   641 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 3684 :  2584 :   642 :   189 :   211 :   sp->h_tolerance =
 3685 :  2585 :   643 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3686 :  2586 :   644 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3687 :  2587 :   645 :   192 :   217 :   sp->delta_neighbours =
 3688 :  2588 :   646 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3689 :  2589 :   647 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3690 :  2590 :   648 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 3691 :  2591 :   649 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3692 :  2592 :   650 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 3693 :  2593 :   651 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 3694 :  2594 :   652 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3695 :  2595 :   653 :   200 :   254 :           sp->max_smoothing_iterations);
 3696 :  2596 :   654 :   201 :   264 :                        sp->target_neighbours);
 3697 :  2597 :   655 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3698 :  2598 :   656 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3699 :  2599 :   657 :   204 :   268 :                        sp->h_tolerance);
 3700 :  2600 :   658 :   205 :   270 :                        sp->log_max_h_change);
 3701 :  2601 :   659 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 3702 :  2602 :   660 :   207 :   274 :                        sp->max_smoothing_iterations);
 3703 :  2603 :   661 :   209 :    72 :   sp->group_data.mass = 0.f;
 3704 :  2604 :   662 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 3705 :  2605 :   663 :   212 :    43 :   if (sp->birth_time == -1.) {
 3706 :  2606 :   664 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 3707 :  2607 :   665 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 3708 :  2608 :   666 :   215 :    59 :     star_age = time - sp->birth_time;
 3709 :  2609 :   667 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3710 :  2610 :   668 :   217 :    88 :     return time - (double)sp->birth_time;
 3711 :  2611 :   669 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 3712 :  2612 :   670 :   219 :   103 :   sp->num_ngb_density = 0;
 3713 :  2613 :   671 :   220 :   106 :   sp->density.wcount = 0.f;
 3714 :  2614 :   672 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 3715 :  2615 :   673 :   222 :   110 :   sp->N_density = 0;
 3716 :  2616 :   674 :   223 :   111 :   sp->N_density_exact = 0;
 3717 :  2617 :   675 :   224 :   112 :   sp->rho = 0.f;
 3718 :  2618 :   676 :   225 :   113 :   sp->rho_exact = 0.f;
 3719 :  2619 :   677 :   226 :   114 :   sp->n = 0.f;
 3720 :  2620 :   678 :   227 :   115 :   sp->n_exact = 0.f;
 3721 :  2621 :   679 :   228 :   116 :   sp->inhibited_exact = 0;
 3722 :  2622 :   680 :   229 :   137 :   sp->time_bin = 0;
 3723 :  2623 :   681 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 3724 :  2624 :   682 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 3725 :  2625 :   683 :   232 :   144 :     sp->birth_temperature =
 3726 :  2626 :   684 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 3727 :  2627 :   685 :   234 :   150 :     sp->last_enrichment_time = time;
 3728 :  2628 :   686 :   235 :   155 :   sp->group_data.mass = 0.f;
 3729 :  2629 :   687 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 3730 :  2630 :   688 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 3731 :  2631 :   689 :   238 :   208 :   const float h = sp->h;
 3732 :  2632 :   690 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 3733 :  2633 :   691 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3734 :  2634 :   692 :   241 :   218 :   sp->rho *= h_inv_dim;
 3735 :  2635 :   693 :   242 :   219 :   sp->n *= h_inv_dim;
 3736 :  2636 :   694 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 3737 :  2637 :   695 :   244 :   239 :   sp->density.wcount = 0.f;
 3738 :  2638 :   696 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 3739 :  2639 :   697 :   246 :   300 :   const float mass = sp->mass_init;
 3740 :  2640 :   698 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 3741 :  2641 :   699 :   248 :   306 :     age = time - sp->birth_time;
 3742 :  2642 :   700 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3743 :  2643 :   701 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3744 :  2644 :   702 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3745 :  2645 :   703 :   253 :    71 :     ret[0] = sp->x[0];
 3746 :  2646 :   704 :   254 :    72 :     ret[1] = sp->x[1];
 3747 :  2647 :   705 :   255 :    73 :     ret[2] = sp->x[2];
 3748 :  2648 :   706 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3749 :  2649 :   707 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3750 :  2650 :   708 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 3751 :  2651 :   709 :   259 :   128 :   if (sp->gpart != NULL)
 3752 :  2652 :   710 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3753 :  2653 :   711 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 3754 :  2654 :   712 :   262 :   252 :   sp->h_tolerance =
 3755 :  2655 :   713 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3756 :  2656 :   714 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3757 :  2657 :   715 :   265 :   258 :   sp->delta_neighbours =
 3758 :  2658 :   716 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3759 :  2659 :   717 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3760 :  2660 :   718 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 3761 :  2661 :   719 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3762 :  2662 :   720 :   270 :   275 :   sp->overwrite_birth_time =
 3763 :  2663 :   721 :   271 :   277 :   sp->overwrite_birth_density =
 3764 :  2664 :   722 :   272 :   279 :   sp->overwrite_birth_temperature =
 3765 :  2665 :   723 :   273 :   283 :   if (sp->overwrite_birth_time) {
 3766 :  2666 :   724 :   274 :   284 :     sp->spart_first_init_birth_time =
 3767 :  2667 :   725 :   275 :   289 :   if (sp->overwrite_birth_density) {
 3768 :  2668 :   726 :   276 :   290 :     sp->spart_first_init_birth_density =
 3769 :  2669 :   727 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 3770 :  2670 :   728 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 3771 :  2671 :   729 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3772 :  2672 :   730 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3773 :  2673 :   731 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3774 :  2674 :   732 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3775 :  2675 :   733 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3776 :  2676 :   734 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3777 :  2677 :   735 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3778 :  2678 :   736 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 3779 :  2679 :   737 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3780 :  2680 :   738 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3781 :  2681 :   739 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3782 :  2682 :   740 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 3783 :  2683 :   741 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 3784 :  2684 :   742 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3785 :  2685 :   743 :   293 :   403 :           sp->max_smoothing_iterations);
 3786 :  2686 :   744 :   294 :   405 :   if (sp->overwrite_birth_time)
 3787 :  2687 :   745 :   295 :   407 :             sp->spart_first_init_birth_time);
 3788 :  2688 :   746 :   296 :   410 :           sp->age_threshold_unlimited);
 3789 :  2689 :   747 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3790 :  2690 :   748 :   298 :   413 :           sp->max_time_step_young);
 3791 :  2691 :   749 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3792 :  2692 :   750 :   300 :   423 :                        sp->target_neighbours);
 3793 :  2693 :   751 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3794 :  2694 :   752 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3795 :  2695 :   753 :   303 :   427 :                        sp->h_tolerance);
 3796 :  2696 :   754 :   304 :   429 :                        sp->log_max_h_change);
 3797 :  2697 :   755 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 3798 :  2698 :   756 :   306 :   433 :                        sp->max_smoothing_iterations);
 3799 :  2699 :   757 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 3800 :  2700 :   758 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 3801 :  2701 :   759 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 3802 :  2702 :   760 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3803 :  2703 :   761 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 3804 :  2704 :   762 :   313 :     4 :    81 :   sp->time_bin = 0;
 3805 :  2705 :   763 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 3806 :  2706 :   764 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 3807 :  2707 :   765 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 3808 :  2708 :   766 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 3809 :  2709 :   767 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 3810 :  2710 :   768 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 3811 :  2711 :   769 :   320 :    11 :   152 :   const float h = sp->h;
 3812 :  2712 :   770 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 3813 :  2713 :   771 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3814 :  2714 :   772 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 3815 :  2715 :   773 :   324 :    15 :   178 :   const float h = sp->h;
 3816 :  2716 :   774 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 3817 :  2717 :   775 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 3818 :  2718 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3819 :  2719 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3820 :  2720 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3821 :  2721 :   779 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3822 :  2722 :   780 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3823 :  2723 :   781 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3824 :  2724 :   782 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 3825 :  2725 :   783 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 3826 :  2726 :   784 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 3827 :  2727 :   785 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3828 :  2728 :   786 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3829 :  2729 :   787 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 3830 :  2730 :   788 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 3831 :  2731 :   789 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3832 :  2732 :   790 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 3833 :  2733 :   791 :   342 :    35 :   199 :   sp->h_tolerance =
 3834 :  2734 :   792 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3835 :  2735 :   793 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3836 :  2736 :   794 :   345 :    38 :   205 :   sp->delta_neighbours =
 3837 :  2737 :   795 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3838 :  2738 :   796 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3839 :  2739 :   797 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 3840 :  2740 :   798 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3841 :  2741 :   799 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 3842 :  2742 :   800 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 3843 :  2743 :   801 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3844 :  2744 :   802 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 3845 :  2745 :   803 :   354 :    47 :   252 :                        sp->target_neighbours);
 3846 :  2746 :   804 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3847 :  2747 :   805 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3848 :  2748 :   806 :   357 :    50 :   256 :                        sp->h_tolerance);
 3849 :  2749 :   807 :   358 :    51 :   258 :                        sp->log_max_h_change);
 3850 :  2750 :   808 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 3851 :  2751 :   809 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 3852 :  2752 :   810 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 3853 :  2753 :   811 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 3854 :  2754 :   812 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 3855 :  2755 :   813 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 3856 :  2756 :   814 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3857 :  2757 :   815 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 3858 :  2758 :   816 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 3859 :  2759 :   817 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 3860 :  2760 :   818 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 3861 :  2761 :   819 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 3862 :  2762 :   820 :   371 :    65 :   110 :   sp->N_density = 0;
 3863 :  2763 :   821 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 3864 :  2764 :   822 :   373 :    67 :   112 :   sp->rho = 0.f;
 3865 :  2765 :   823 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 3866 :  2766 :   824 :   375 :    69 :   114 :   sp->n = 0.f;
 3867 :  2767 :   825 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 3868 :  2768 :   826 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 3869 :  2769 :   827 :   378 :    72 :   137 :   sp->time_bin = 0;
 3870 :  2770 :   828 :   379 :    73 :   138 :   sp->f_E = -1.f;
 3871 :  2771 :   829 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 3872 :  2772 :   830 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 3873 :  2773 :   831 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 3874 :  2774 :   832 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 3875 :  2775 :   833 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 3876 :  2776 :   834 :   385 :    79 :   148 :     sp->birth_temperature =
 3877 :  2777 :   835 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 3878 :  2778 :   836 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 3879 :  2779 :   837 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 3880 :  2780 :   838 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 3881 :  2781 :   839 :   390 :    84 :   211 :   const float h = sp->h;
 3882 :  2782 :   840 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 3883 :  2783 :   841 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3884 :  2784 :   842 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 3885 :  2785 :   843 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 3886 :  2786 :   844 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 3887 :  2787 :   845 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 3888 :  2788 :   846 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 3889 :  2789 :   847 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 3890 :  2790 :   848 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 3891 :  2791 :   849 :   400 :    94 :   309 :     age = time - sp->birth_time;
 3892 :  2792 :   850 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3893 :  2793 :   851 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3894 :  2794 :   852 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3895 :  2795 :   853 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 3896 :  2796 :   854 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 3897 :  2797 :   855 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 3898 :  2798 :   856 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3899 :  2799 :   857 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3900 :  2800 :   858 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 3901 :  2801 :   859 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 3902 :  2802 :   860 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3903 :  2803 :   861 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 3904 :  2804 :   862 :   413 :   108 :   253 :   sp->h_tolerance =
 3905 :  2805 :   863 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3906 :  2806 :   864 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3907 :  2807 :   865 :   416 :   111 :   259 :   sp->delta_neighbours =
 3908 :  2808 :   866 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3909 :  2809 :   867 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3910 :  2810 :   868 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 3911 :  2811 :   869 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3912 :  2812 :   870 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 3913 :  2813 :   871 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 3914 :  2814 :   872 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 3915 :  2815 :   873 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 3916 :  2816 :   874 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 3917 :  2817 :   875 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 3918 :  2818 :   876 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 3919 :  2819 :   877 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 3920 :  2820 :   878 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 3921 :  2821 :   879 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 3922 :  2822 :   880 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 3923 :  2823 :   881 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 3924 :  2824 :   882 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 3925 :  2825 :   883 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 3926 :  2826 :   884 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 3927 :  2827 :   885 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 3928 :  2828 :   886 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 3929 :  2829 :   887 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 3930 :  2830 :   888 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 3931 :  2831 :   889 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 3932 :  2832 :   890 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 3933 :  2833 :   891 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 3934 :  2834 :   892 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3935 :  2835 :   893 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 3936 :  2836 :   894 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 3937 :  2837 :   895 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 3938 :  2838 :   896 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 3939 :  2839 :   897 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 3940 :  2840 :   898 :   449 :   144 :   414 :           sp->max_time_step_young);
 3941 :  2841 :   899 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 3942 :  2842 :   900 :   451 :   146 :   424 :                        sp->target_neighbours);
 3943 :  2843 :   901 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3944 :  2844 :   902 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3945 :  2845 :   903 :   454 :   149 :   428 :                        sp->h_tolerance);
 3946 :  2846 :   904 :   455 :   150 :   430 :                        sp->log_max_h_change);
 3947 :  2847 :   905 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 3948 :  2848 :   906 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 3949 :  2849 :   907 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 3950 :  2850 :   908 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 3951 :  2851 :   909 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 3952 :  2853 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 3953 :  2854 :     3 :    61 :     return time - (double)sp->birth_time;
 3954 :  2855 :     4 :    81 :   sp->time_bin = 0;
 3955 :  2856 :     5 :    84 :   sp->group_data.mass = 0.f;
 3956 :  2857 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 3957 :  2858 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 3958 :  2859 :     8 :   100 :   sp->num_ngb_density = 0;
 3959 :  2860 :     9 :   103 :   sp->density.wcount = 0.f;
 3960 :  2861 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 3961 :  2862 :    11 :   152 :   const float h = sp->h;
 3962 :  2863 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 3963 :  2864 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 3964 :  2865 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 3965 :  2866 :    15 :   178 :   const float h = sp->h;
 3966 :  2867 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 3967 :  2868 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 3968 :  2869 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 3969 :  2870 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 3970 :  2871 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 3971 :  2872 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 3972 :  2873 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 3973 :  2874 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 3974 :  2875 :    26 :    62 :     ret[0] = sp->x[0];
 3975 :  2876 :    27 :    63 :     ret[1] = sp->x[1];
 3976 :  2877 :    28 :    64 :     ret[2] = sp->x[2];
 3977 :  2878 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 3978 :  2879 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 3979 :  2880 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 3980 :  2881 :    32 :   111 :   if (sp->gpart != NULL)
 3981 :  2882 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 3982 :  2883 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 3983 :  2884 :    35 :   199 :   sp->h_tolerance =
 3984 :  2885 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 3985 :  2886 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 3986 :  2887 :    38 :   205 :   sp->delta_neighbours =
 3987 :  2888 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 3988 :  2889 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 3989 :  2890 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 3990 :  2891 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 3991 :  2892 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 3992 :  2893 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 3993 :  2894 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 3994 :  2895 :    46 :   242 :           sp->max_smoothing_iterations);
 3995 :  2896 :    47 :   252 :                        sp->target_neighbours);
 3996 :  2897 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 3997 :  2898 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 3998 :  2899 :    50 :   256 :                        sp->h_tolerance);
 3999 :  2900 :    51 :   258 :                        sp->log_max_h_change);
 4000 :  2901 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 4001 :  2902 :    53 :   262 :                        sp->max_smoothing_iterations);
 4002 :  2903 :    55 :    43 :   if (sp->birth_time == -1.) {
 4003 :  2904 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 4004 :  2905 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 4005 :  2906 :    58 :    59 :     star_age = time - sp->birth_time;
 4006 :  2907 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 4007 :  2908 :    60 :    88 :     return time - (double)sp->birth_time;
 4008 :  2909 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 4009 :  2910 :    62 :   103 :   sp->num_ngb_density = 0;
 4010 :  2911 :    63 :   106 :   sp->density.wcount = 0.f;
 4011 :  2912 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 4012 :  2913 :    65 :   110 :   sp->N_density = 0;
 4013 :  2914 :    66 :   111 :   sp->N_density_exact = 0;
 4014 :  2915 :    67 :   112 :   sp->rho = 0.f;
 4015 :  2916 :    68 :   113 :   sp->rho_exact = 0.f;
 4016 :  2917 :    69 :   114 :   sp->n = 0.f;
 4017 :  2918 :    70 :   115 :   sp->n_exact = 0.f;
 4018 :  2919 :    71 :   116 :   sp->inhibited_exact = 0;
 4019 :  2920 :    72 :   137 :   sp->time_bin = 0;
 4020 :  2921 :    73 :   138 :   sp->f_E = -1.f;
 4021 :  2922 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 4022 :  2923 :    75 :   140 :   sp->number_of_heating_events = 0.;
 4023 :  2924 :    76 :   141 :   sp->number_of_SNII_events = 0;
 4024 :  2925 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 4025 :  2926 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 4026 :  2927 :    79 :   148 :     sp->birth_temperature =
 4027 :  2928 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 4028 :  2929 :    81 :   154 :     sp->last_enrichment_time = time;
 4029 :  2930 :    82 :   159 :   sp->group_data.mass = 0.f;
 4030 :  2931 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 4031 :  2932 :    84 :   211 :   const float h = sp->h;
 4032 :  2933 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 4033 :  2934 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 4034 :  2935 :    87 :   221 :   sp->rho *= h_inv_dim;
 4035 :  2936 :    88 :   222 :   sp->n *= h_inv_dim;
 4036 :  2937 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 4037 :  2938 :    90 :   242 :   sp->density.wcount = 0.f;
 4038 :  2939 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 4039 :  2940 :    92 :   303 :   const float mass = sp->mass_init;
 4040 :  2941 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 4041 :  2942 :    94 :   309 :     age = time - sp->birth_time;
 4042 :  2943 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4043 :  2944 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4044 :  2945 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4045 :  2946 :    99 :    71 :     ret[0] = sp->x[0];
 4046 :  2947 :   100 :    72 :     ret[1] = sp->x[1];
 4047 :  2948 :   101 :    73 :     ret[2] = sp->x[2];
 4048 :  2949 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4049 :  2950 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4050 :  2951 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 4051 :  2952 :   105 :   128 :   if (sp->gpart != NULL)
 4052 :  2953 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 4053 :  2954 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 4054 :  2955 :   108 :   253 :   sp->h_tolerance =
 4055 :  2956 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 4056 :  2957 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 4057 :  2958 :   111 :   259 :   sp->delta_neighbours =
 4058 :  2959 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 4059 :  2960 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 4060 :  2961 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 4061 :  2962 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 4062 :  2963 :   116 :   276 :   sp->overwrite_birth_time =
 4063 :  2964 :   117 :   278 :   sp->overwrite_birth_density =
 4064 :  2965 :   118 :   280 :   sp->overwrite_birth_temperature =
 4065 :  2966 :   119 :   284 :   if (sp->overwrite_birth_time) {
 4066 :  2967 :   120 :   285 :     sp->spart_first_init_birth_time =
 4067 :  2968 :   121 :   290 :   if (sp->overwrite_birth_density) {
 4068 :  2969 :   122 :   291 :     sp->spart_first_init_birth_density =
 4069 :  2970 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 4070 :  2971 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 4071 :  2972 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 4072 :  2973 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 4073 :  2974 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 4074 :  2975 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 4075 :  2976 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 4076 :  2977 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 4077 :  2978 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 4078 :  2979 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 4079 :  2980 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 4080 :  2981 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 4081 :  2982 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 4082 :  2983 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 4083 :  2984 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 4084 :  2985 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 4085 :  2986 :   139 :   404 :           sp->max_smoothing_iterations);
 4086 :  2987 :   140 :   406 :   if (sp->overwrite_birth_time)
 4087 :  2988 :   141 :   408 :             sp->spart_first_init_birth_time);
 4088 :  2989 :   142 :   411 :           sp->age_threshold_unlimited);
 4089 :  2990 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 4090 :  2991 :   144 :   414 :           sp->max_time_step_young);
 4091 :  2992 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 4092 :  2993 :   146 :   424 :                        sp->target_neighbours);
 4093 :  2994 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 4094 :  2995 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 4095 :  2996 :   149 :   428 :                        sp->h_tolerance);
 4096 :  2997 :   150 :   430 :                        sp->log_max_h_change);
 4097 :  2998 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 4098 :  2999 :   152 :   434 :                        sp->max_smoothing_iterations);
 4099 :  3000 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 4100 :  3001 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 4101 :  3002 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 4102 :  3003 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 4103 :  3004 :   158 :    62 :     return time - (double)sp->birth_time;
 4104 :  3005 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 4105 :  3006 :   160 :    77 :   sp->num_ngb_density = 0;
 4106 :  3007 :   161 :    80 :   sp->density.wcount = 0.f;
 4107 :  3008 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 4108 :  3009 :   163 :   100 :   sp->time_bin = 0;
 4109 :  3010 :   164 :   105 :   sp->group_data.mass = 0.f;
 4110 :  3011 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 4111 :  3012 :   166 :   157 :   const float h = sp->h;
 4112 :  3013 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 4113 :  3014 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 4114 :  3015 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 4115 :  3016 :   170 :   183 :   sp->density.wcount = 0.f;
 4116 :  3017 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 4117 :  3018 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 4118 :  3019 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 4119 :  3020 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 4120 :  3021 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4121 :  3022 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4122 :  3023 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4123 :  3024 :   180 :    64 :     ret[0] = sp->x[0];
 4124 :  3025 :   181 :    65 :     ret[1] = sp->x[1];
 4125 :  3026 :   182 :    66 :     ret[2] = sp->x[2];
 4126 :  3027 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4127 :  3028 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4128 :  3029 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 4129 :  3030 :   186 :   113 :   if (sp->gpart != NULL)
 4130 :  3031 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 4131 :  3032 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 4132 :  3033 :   189 :   211 :   sp->h_tolerance =
 4133 :  3034 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 4134 :  3035 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 4135 :  3036 :   192 :   217 :   sp->delta_neighbours =
 4136 :  3037 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 4137 :  3038 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 4138 :  3039 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 4139 :  3040 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 4140 :  3041 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 4141 :  3042 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 4142 :  3043 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 4143 :  3044 :   200 :   254 :           sp->max_smoothing_iterations);
 4144 :  3045 :   201 :   264 :                        sp->target_neighbours);
 4145 :  3046 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 4146 :  3047 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 4147 :  3048 :   204 :   268 :                        sp->h_tolerance);
 4148 :  3049 :   205 :   270 :                        sp->log_max_h_change);
 4149 :  3050 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 4150 :  3051 :   207 :   274 :                        sp->max_smoothing_iterations);
 4151 :  3052 :   209 :    72 :   sp->group_data.mass = 0.f;
 4152 :  3053 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 4153 :  3054 :   212 :    43 :   if (sp->birth_time == -1.) {
 4154 :  3055 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 4155 :  3056 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 4156 :  3057 :   215 :    59 :     star_age = time - sp->birth_time;
 4157 :  3058 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 4158 :  3059 :   217 :    88 :     return time - (double)sp->birth_time;
 4159 :  3060 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 4160 :  3061 :   219 :   103 :   sp->num_ngb_density = 0;
 4161 :  3062 :   220 :   106 :   sp->density.wcount = 0.f;
 4162 :  3063 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 4163 :  3064 :   222 :   110 :   sp->N_density = 0;
 4164 :  3065 :   223 :   111 :   sp->N_density_exact = 0;
 4165 :  3066 :   224 :   112 :   sp->rho = 0.f;
 4166 :  3067 :   225 :   113 :   sp->rho_exact = 0.f;
 4167 :  3068 :   226 :   114 :   sp->n = 0.f;
 4168 :  3069 :   227 :   115 :   sp->n_exact = 0.f;
 4169 :  3070 :   228 :   116 :   sp->inhibited_exact = 0;
 4170 :  3071 :   229 :   137 :   sp->time_bin = 0;
 4171 :  3072 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 4172 :  3073 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 4173 :  3074 :   232 :   144 :     sp->birth_temperature =
 4174 :  3075 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 4175 :  3076 :   234 :   150 :     sp->last_enrichment_time = time;
 4176 :  3077 :   235 :   155 :   sp->group_data.mass = 0.f;
 4177 :  3078 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 4178 :  3079 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 4179 :  3080 :   238 :   208 :   const float h = sp->h;
 4180 :  3081 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 4181 :  3082 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 4182 :  3083 :   241 :   218 :   sp->rho *= h_inv_dim;
 4183 :  3084 :   242 :   219 :   sp->n *= h_inv_dim;
 4184 :  3085 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 4185 :  3086 :   244 :   239 :   sp->density.wcount = 0.f;
 4186 :  3087 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 4187 :  3088 :   246 :   300 :   const float mass = sp->mass_init;
 4188 :  3089 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 4189 :  3090 :   248 :   306 :     age = time - sp->birth_time;
 4190 :  3091 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4191 :  3092 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4192 :  3093 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4193 :  3094 :   253 :    71 :     ret[0] = sp->x[0];
 4194 :  3095 :   254 :    72 :     ret[1] = sp->x[1];
 4195 :  3096 :   255 :    73 :     ret[2] = sp->x[2];
 4196 :  3097 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4197 :  3098 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4198 :  3099 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 4199 :  3100 :   259 :   128 :   if (sp->gpart != NULL)
 4200 :  3101 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 4201 :  3102 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 4202 :  3103 :   262 :   252 :   sp->h_tolerance =
 4203 :  3104 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 4204 :  3105 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 4205 :  3106 :   265 :   258 :   sp->delta_neighbours =
 4206 :  3107 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 4207 :  3108 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 4208 :  3109 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 4209 :  3110 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 4210 :  3111 :   270 :   275 :   sp->overwrite_birth_time =
 4211 :  3112 :   271 :   277 :   sp->overwrite_birth_density =
 4212 :  3113 :   272 :   279 :   sp->overwrite_birth_temperature =
 4213 :  3114 :   273 :   283 :   if (sp->overwrite_birth_time) {
 4214 :  3115 :   274 :   284 :     sp->spart_first_init_birth_time =
 4215 :  3116 :   275 :   289 :   if (sp->overwrite_birth_density) {
 4216 :  3117 :   276 :   290 :     sp->spart_first_init_birth_density =
 4217 :  3118 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 4218 :  3119 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 4219 :  3120 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 4220 :  3121 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 4221 :  3122 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 4222 :  3123 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 4223 :  3124 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 4224 :  3125 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 4225 :  3126 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 4226 :  3127 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 4227 :  3128 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 4228 :  3129 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 4229 :  3130 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 4230 :  3131 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 4231 :  3132 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 4232 :  3133 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 4233 :  3134 :   293 :   403 :           sp->max_smoothing_iterations);
 4234 :  3135 :   294 :   405 :   if (sp->overwrite_birth_time)
 4235 :  3136 :   295 :   407 :             sp->spart_first_init_birth_time);
 4236 :  3137 :   296 :   410 :           sp->age_threshold_unlimited);
 4237 :  3138 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 4238 :  3139 :   298 :   413 :           sp->max_time_step_young);
 4239 :  3140 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 4240 :  3141 :   300 :   423 :                        sp->target_neighbours);
 4241 :  3142 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 4242 :  3143 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 4243 :  3144 :   303 :   427 :                        sp->h_tolerance);
 4244 :  3145 :   304 :   429 :                        sp->log_max_h_change);
 4245 :  3146 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 4246 :  3147 :   306 :   433 :                        sp->max_smoothing_iterations);
 4247 :  3148 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 4248 :  3149 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 4249 :  3150 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 4250 :  3151 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 4251 :  3152 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 4252 :  3153 :   313 :     4 :    81 :   sp->time_bin = 0;
 4253 :  3154 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 4254 :  3155 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 4255 :  3156 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 4256 :  3157 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 4257 :  3158 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 4258 :  3159 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 4259 :  3160 :   320 :    11 :   152 :   const float h = sp->h;
 4260 :  3161 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 4261 :  3162 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 4262 :  3163 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 4263 :  3164 :   324 :    15 :   178 :   const float h = sp->h;
 4264 :  3165 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 4265 :  3166 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 4266 :  3167 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 4267 :  3168 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 4268 :  3169 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 4269 :  3170 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4270 :  3171 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4271 :  3172 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4272 :  3173 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 4273 :  3174 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 4274 :  3175 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 4275 :  3176 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4276 :  3177 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4277 :  3178 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 4278 :  3179 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 4279 :  3180 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 4280 :  3181 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 4281 :  3182 :   342 :    35 :   199 :   sp->h_tolerance =
 4282 :  3183 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 4283 :  3184 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 4284 :  3185 :   345 :    38 :   205 :   sp->delta_neighbours =
 4285 :  3186 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 4286 :  3187 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 4287 :  3188 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 4288 :  3189 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 4289 :  3190 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 4290 :  3191 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 4291 :  3192 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 4292 :  3193 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 4293 :  3194 :   354 :    47 :   252 :                        sp->target_neighbours);
 4294 :  3195 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 4295 :  3196 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 4296 :  3197 :   357 :    50 :   256 :                        sp->h_tolerance);
 4297 :  3198 :   358 :    51 :   258 :                        sp->log_max_h_change);
 4298 :  3199 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 4299 :  3200 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 4300 :  3201 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 4301 :  3202 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 4302 :  3203 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 4303 :  3204 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 4304 :  3205 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 4305 :  3206 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 4306 :  3207 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 4307 :  3208 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 4308 :  3209 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 4309 :  3210 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 4310 :  3211 :   371 :    65 :   110 :   sp->N_density = 0;
 4311 :  3212 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 4312 :  3213 :   373 :    67 :   112 :   sp->rho = 0.f;
 4313 :  3214 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 4314 :  3215 :   375 :    69 :   114 :   sp->n = 0.f;
 4315 :  3216 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 4316 :  3217 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 4317 :  3218 :   378 :    72 :   137 :   sp->time_bin = 0;
 4318 :  3219 :   379 :    73 :   138 :   sp->f_E = -1.f;
 4319 :  3220 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 4320 :  3221 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 4321 :  3222 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 4322 :  3223 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 4323 :  3224 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 4324 :  3225 :   385 :    79 :   148 :     sp->birth_temperature =
 4325 :  3226 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 4326 :  3227 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 4327 :  3228 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 4328 :  3229 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 4329 :  3230 :   390 :    84 :   211 :   const float h = sp->h;
 4330 :  3231 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 4331 :  3232 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 4332 :  3233 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 4333 :  3234 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 4334 :  3235 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 4335 :  3236 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 4336 :  3237 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 4337 :  3238 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 4338 :  3239 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 4339 :  3240 :   400 :    94 :   309 :     age = time - sp->birth_time;
 4340 :  3241 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4341 :  3242 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4342 :  3243 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4343 :  3244 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 4344 :  3245 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 4345 :  3246 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 4346 :  3247 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4347 :  3248 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4348 :  3249 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 4349 :  3250 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 4350 :  3251 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 4351 :  3252 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 4352 :  3253 :   413 :   108 :   253 :   sp->h_tolerance =
 4353 :  3254 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 4354 :  3255 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 4355 :  3256 :   416 :   111 :   259 :   sp->delta_neighbours =
 4356 :  3257 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 4357 :  3258 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 4358 :  3259 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 4359 :  3260 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 4360 :  3261 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 4361 :  3262 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 4362 :  3263 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 4363 :  3264 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 4364 :  3265 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 4365 :  3266 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 4366 :  3267 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 4367 :  3268 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 4368 :  3269 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 4369 :  3270 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 4370 :  3271 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 4371 :  3272 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 4372 :  3273 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 4373 :  3274 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 4374 :  3275 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 4375 :  3276 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 4376 :  3277 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 4377 :  3278 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 4378 :  3279 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 4379 :  3280 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 4380 :  3281 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 4381 :  3282 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 4382 :  3283 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 4383 :  3284 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 4384 :  3285 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 4385 :  3286 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 4386 :  3287 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 4387 :  3288 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 4388 :  3289 :   449 :   144 :   414 :           sp->max_time_step_young);
 4389 :  3290 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 4390 :  3291 :   451 :   146 :   424 :                        sp->target_neighbours);
 4391 :  3292 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 4392 :  3293 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 4393 :  3294 :   454 :   149 :   428 :                        sp->h_tolerance);
 4394 :  3295 :   455 :   150 :   430 :                        sp->log_max_h_change);
 4395 :  3296 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 4396 :  3297 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 4397 :  3298 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 4398 :  3299 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 4399 :  3300 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 4400 :  3302 :   300 :     const struct gpart *gp = sp->gpart;
 4401 :  3303 :   303 :     if (sp->time_bin == time_bin_inhibited ||
 4402 :  3304 :   304 :         sp->time_bin == time_bin_not_created)
 4403 :  3305 :   313 :     const float m = sp->mass;
 4404 :  3306 :   388 :     const struct gpart *gp = sp->gpart;
 4405 :  3307 :   391 :     if (sp->time_bin == time_bin_inhibited ||
 4406 :  3308 :   392 :         sp->time_bin == time_bin_not_created)
 4407 :  3309 :   401 :     const float m = sp->mass;
 4408 :  3311 :   298 :                                            e->physical_constants, sp->gpart);
 4409 :  3312 :   303 :         sp->gpart, a_hydro, e->gravity_properties, e->cosmology);
 4410 :  3313 :   321 :     error("spart (id=%lld) wants a time-step (%e) below dt_min (%e)", sp->id,
 4411 :  3314 :   327 :       new_dt, sp->time_bin, num_time_bins, e->ti_current, e->time_base_inv);
 4412 :  3316 :   359 :     sp->tracers_data.averaged_SFR[i] = 0.f;
 4413 :  3318 :    67 :       ret[i] = sp->tracers_data.averaged_SFR[i] /
 4414 :  3320 :    40 :   if (sp->gpart == NULL)
 4415 :  3321 :    43 :     const ptrdiff_t offset = sp->gpart - e->s->gparts;
 4417 :    37 :   ret[0] = sp->gpart->fof_data.group_id;
 4419 :   168 :   const float hi = sp->h;
 4421 :   308 :   if (sp->ti_kick != ti_start)
 4422 :   310 :         "s-particle has not been kicked to the current time sp->ti_kick=%lld, "
 4423 :   312 :         sp->ti_kick, ti_start, ti_end, sp->id);
 4424 :   314 :   sp->ti_kick = ti_end;
 4425 :   326 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
 4426 :   327 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
 4427 :   328 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
 4428 :   331 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
 4429 :   332 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
 4430 :   333 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
 4431 :   336 :   sp->gpart->v_full[0] = sp->v[0];
 4432 :   337 :   sp->gpart->v_full[1] = sp->v[1];
 4433 :   338 :   sp->gpart->v_full[2] = sp->v[2];
 4435 :   104 :       return sp->mass;
 4436 :   267 :       return sp->mass;
 4438 :   499 :   data->id = sp->id;
 4439 :   504 :       sp->v[0] / a_cross;  // TODO: extrapolate velocities to a_cross?
 4440 :   505 :   data->vel[1] = sp->v[1] / a_cross;
 4441 :   506 :   data->vel[2] = sp->v[2] / a_cross;
 4442 :   507 :   data->mass = sp->mass;
 4443 :   515 :   data->mass_init = sp->mass_init;
 4444 :   516 :   data->birth_scale_factor = sp->birth_scale_factor;
 4445 :   517 :   data->birth_density = sp->birth_density;
 4446 :   526 :         sp->chemistry_data.smoothed_metal_mass_fraction[i];
 4447 :   528 :       sp->chemistry_data.metal_mass_fraction_total;
 4448 :   530 :       sp->chemistry_data.smoothed_metal_mass_fraction_total;
 4449 :   535 :       sp->tracers_data.last_AGN_injection_scale_factor;
 4451 :   340 :             "gp->x=[%e %e %e] sp->x=[%e %e %e] diff=[%e %e %e]",
 4452 :   349 :             "gp->m=%e sp->m=%e",
 4453 :   383 :             "gp->m=%e sp->m=%e",
 4455 :    60 :   sp->rt_data.debug_emission_rate_set += 1;
 4456 :    89 :         emission_this_step, sp->mass, dt, rt_props->photon_number_integral,
 4457 :    97 :     sp->rt_data.emission_this_step[g] = emission_this_step[g];
 4458 :   187 :     sp->rt_data.octant_weights[i] = 0.f;
 4459 :   193 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
 4460 :   194 :   sp->rt_data.debug_iact_hydro_inject = 0;
 4461 :   195 :   sp->rt_data.debug_emission_rate_set = 0;
 4462 :   198 :     sp->rt_data.debug_injected_energy[g] = 0.f;
 4463 :   201 :     sp->rt_data.emission_this_step[g] = 0.f;
 4464 :   203 :   sp->rt_data.debug_psi_sum = 0.f;
 4465 :   218 :     sp->rt_data.emission_this_step[g] = 0.f;
 4466 :   233 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
 4467 :   235 :     sp->rt_data.debug_injected_energy_tot[g] = 0.f;
 4468 :   272 :     sp->rt_data.emission_this_step[g] = 0.f;
 4470 :   134 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
 4471 :   135 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
 4472 :   137 :     sp->rt_data.debug_iact_hydro_inject = 0;
 4473 :   138 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
 4474 :   146 :        * sp->rt_data.emission_this_step: energy we should distribute
 4475 :   148 :        * sp->rt_data.debug_injected_energy: energy we actually did
 4476 :   150 :       if (sp->rt_data.debug_injected_energy[g] != 0.f) {
 4477 :   151 :         float diff = 1.f - sp->rt_data.emission_this_step[g] /
 4478 :   152 :                                sp->rt_data.debug_injected_energy[g];
 4479 :   162 :             psi_sum_now += sp->rt_data.octant_weights[i];
 4480 :   163 :           float diff_weights = 1.f - sp->rt_data.debug_psi_sum / psi_sum_now;
 4481 :   168 :                 sp->id, g, sp->rt_data.emission_this_step[g],
 4482 :   169 :                 sp->rt_data.debug_injected_energy[g], diff, diff_weights);
 4483 :   176 :       sp->rt_data.debug_injected_energy[g] = 0.f;
 4484 :   179 :       sp->rt_data.emission_this_step[g] = 0.f;
 4486 :   149 :   sp->rt_data.injection_weight = 0.f;
 4487 :   151 :     sp->rt_data.emission_reinject[g] = 0.f;
 4488 :   165 :     sp->rt_data.emission_this_step[g] = 0.f;
 4490 :    50 :       sp->rt_data.emission_this_step[g] +=
 4492 :    51 :   sp->rt_data.debug_emission_rate_set += 1;
 4493 :   128 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
 4494 :   129 :   sp->rt_data.debug_iact_hydro_inject = 0;
 4495 :   130 :   sp->rt_data.debug_emission_rate_set = 0;
 4496 :   153 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
 4498 :   164 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
 4499 :   165 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
 4500 :   167 :     sp->rt_data.debug_iact_hydro_inject = 0;
 4501 :   168 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
 4503 :   878 :       for (int k = 0; k < csp->count; k++) {
 4504 :   879 :         const int pid = csp->pairs[k].pid;
 4505 :   880 :         const int pjd = csp->pairs[k].pjd;
 4506 :  1027 :     for (int k = 0; k < csp->count; k++) {
 4507 :  1028 :       const int pid = csp->pairs[k].pid;
 4508 :  1029 :       const int pjd = csp->pairs[k].pjd;
 4510 :  2698 :     for (int k = 0; k < csp->count; k++) {
 4511 :  2699 :       const int pid = csp->pairs[k].pid;
 4512 :  2700 :       const int pjd = csp->pairs[k].pjd;
 4513 :  2804 :     for (int k = 0; k < csp->count; k++) {
 4514 :  2805 :       const int pid = csp->pairs[k].pid;
 4515 :  2806 :       const int pjd = csp->pairs[k].pjd;
 4516 :  2935 :       for (int k = 0; k < csp->count; k++) {
 4517 :  2936 :         const int pid = csp->pairs[k].pid;
 4518 :  2937 :         const int pjd = csp->pairs[k].pjd;
 4520 :   749 :     for (int k = 0; k < csp->count; k++) {
 4521 :   750 :       const int pid = csp->pairs[k].pid;
 4522 :   751 :       const int pjd = csp->pairs[k].pjd;
 4524 :  1486 :       for (int k = 0; k < csp->count; k++) {
 4525 :  1487 :         const int pid = csp->pairs[k].pid;
 4526 :  1488 :         const int pjd = csp->pairs[k].pjd;
 4527 :  1687 :     for (int k = 0; k < csp->count; k++) {
 4528 :  1688 :       const int pid = csp->pairs[k].pid;
 4529 :  1689 :       const int pjd = csp->pairs[k].pjd;
 4531 :   168 :         const float h_old = sp->h;
 4532 :   175 :         if (sp->density.wcount < 1.e-5 * kernel_root) { /* No neighbours case */
 4533 :   191 :           const float n_sum = sp->density.wcount * h_old_dim;
 4534 :   195 :               sp->density.wcount_dh * h_old_dim +
 4535 :   196 :               hydro_dimension * sp->density.wcount * h_old_dim_minus_one;
 4536 :   213 :           if (((sp->h >= stars_h_max) && (f < 0.f)) ||
 4537 :   214 :               ((sp->h <= stars_h_min) && (f > 0.f))) {
 4538 :   221 :               const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 4539 :   223 :                   get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 4540 :   231 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
 4541 :   272 :                     get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 4542 :   274 :                     get_integer_timestep(sp->time_bin);
 4543 :   279 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
 4544 :   307 :                 num_reruns, sp->id, h_init, h_old, h_new, f, f_prime, n_sum,
 4545 :   331 :             sp->h = pow_inv_dimension(
 4546 :   337 :             sp->h = h_new;
 4547 :   341 :           if (sp->h < stars_h_max && sp->h > stars_h_min) {
 4548 :   358 :           } else if (sp->h <= stars_h_min) {
 4549 :   361 :             sp->h = stars_h_min;
 4550 :   363 :           } else if (sp->h >= stars_h_max) {
 4551 :   366 :             sp->h = stars_h_max;
 4552 :   385 :         h_max = max(h_max, sp->h);
 4553 :   386 :         h_max_active = max(h_max_active, sp->h);
 4554 :   395 :           const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 4555 :   397 :               get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 4556 :   405 :             dt_star = get_timestep(sp->time_bin, e->time_base);
 4557 :   446 :                 get_integer_time_begin(e->ti_current - 1, sp->time_bin);
 4558 :   447 :             const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 4559 :   452 :             dt_star = get_timestep(sp->time_bin, e->time_base);
 4560 :   526 :         warning("ID: %lld, h: %g, wcount: %g", sp->id, sp->h,
 4561 :   527 :                 sp->density.wcount);
 4562 :   551 :       error("Particle has h larger than h_max (id=%lld)", sp->id);
 4563 :   553 :       error("Active particle has h larger than h_max_active (id=%lld)", sp->id);
 4565 :   275 :           c->stars.h_max = max(c->stars.h_max, sp->h);
 4566 :   276 :           c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
 4567 :   487 :               /* message("We formed a star id=%lld cellID=%lld", sp->id,
 4568 :   504 :               c->stars.h_max = max(c->stars.h_max, sp->h);
 4569 :   505 :               c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
 4570 :   528 :                 csds_part_data_init(&sp->csds_data);
 4571 :   531 :                 sp->csds_data = xp->csds_data;
 4572 :  1042 :         if (csds_should_write(&sp->csds_data, e->csds)) {
 4573 :  1049 :           sp->csds_data.steps_since_last_output += 1;
 4575 :   406 :     for (int k = 0; k < csp->count; k++) {
 4576 :   407 :       const int pid = csp->pairs[k].pid;
 4577 :   408 :       const int pjd = csp->pairs[k].pjd;
 4578 :   588 :           if (sp->id == sink_id) {
 4579 :   604 :               message("sink %lld removing gas particle %lld", sp->id, p->id);
 4580 :   752 :           sink_get_sink_swallow_id(&cell_sp->merger_data);
 4581 :   758 :         if (cell_sp->ti_drift != e->ti_current)
 4582 :   774 :           if (sp->id == sink_id) {
 4583 :   778 :             if (sink_get_sink_swallow_id(&sp->merger_data) != -1) {
 4584 :   781 :               sink_mark_sink_as_not_swallowed(&cell_sp->merger_data);
 4585 :   798 :             // message("sink %lld swallowing sink particle %lld", sp->id,
 4586 :   799 :             // cell_sp->id);
 4587 :   804 :               message("sink %lld removing sink particle %lld", sp->id,
 4588 :   805 :                       cell_sp->id);
 4589 :   814 :             sink_mark_sink_as_merged(&cell_sp->merger_data);
 4590 :   830 :                 cell_sp->id, swallow_id);
 4592 :   250 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 4593 :   252 :             get_integer_time_begin(ti_current + 1, sp->time_bin);
 4594 :   257 :             get_integer_time_end(ti_current + 1, sp->time_bin);
 4595 :   263 :               ti_end_check, ti_begin, ti_step, sp->time_bin, ti_current);
 4596 :   524 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
 4597 :   526 :             get_integer_time_begin(ti_current, sp->time_bin) + ti_step / 2;
 4598 :   543 :         if (sp->ti_drift != sp->ti_kick)
 4599 :   918 :             get_integer_time_end(ti_current, sp->time_bin);
 4600 :   924 :         const integertime_t ti_old_step = get_integer_timestep(sp->time_bin);
 4601 :   930 :           old_time_step_length = get_timestep(sp->time_bin, e->time_base);
 4602 :   937 :         sp->time_bin = get_time_bin(ti_new_step);
 4603 :   938 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
 4604 :   973 :               get_integer_time_end(ti_current, sp->time_bin);
 4605 :   976 :               get_integer_time_begin(ti_current + 1, sp->time_bin);
 4607 :  1340 :           t->ci = ci->progeny[csp->pairs[0].pid];
 4608 :  1341 :           t->cj = cj->progeny[csp->pairs[0].pjd];
 4609 :  1345 :           t->flags = csp->pairs[0].sid;
 4610 :  1346 :           for (int k = 1; k < csp->count; k++) {
 4611 :  1349 :                                   csp->pairs[k].sid, 0,
 4612 :  1350 :                                   ci->progeny[csp->pairs[k].pid],
 4613 :  1351 :                                   cj->progeny[csp->pairs[k].pjd]),
 4614 :  1388 :   struct engine *e = sp->e;
 4616 :    54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4617 :    55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4618 :    56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4619 :    58 :     ret[0] = sp->x[0];
 4620 :    59 :     ret[1] = sp->x[1];
 4621 :    60 :     ret[2] = sp->x[2];
 4622 :    72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4623 :    73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4624 :    86 :   const struct gpart* gp = sp->gpart;
 4626 :    46 :   sp->cut_off_radius =
 4628 :    54 :   sp->r_cut = sink_props->cut_off_radius;
 4629 :    55 :   sp->time_bin = 0;
 4630 :    57 :   sp->number_of_gas_swallows = 0;
 4631 :    58 :   sp->number_of_direct_gas_swallows = 0;
 4632 :    59 :   sp->number_of_sink_swallows = 0;
 4633 :    60 :   sp->number_of_direct_sink_swallows = 0;
 4634 :    61 :   sp->swallowed_angular_momentum[0] = 0.f;
 4635 :    62 :   sp->swallowed_angular_momentum[1] = 0.f;
 4636 :    63 :   sp->swallowed_angular_momentum[2] = 0.f;
 4637 :    65 :   sink_mark_sink_as_not_swallowed(&sp->merger_data);
 4638 :    92 :     sp->ids_ngbs_accretion[i] = -1;
 4639 :    93 :   sp->num_ngb_accretion = 0;
 4640 :    96 :     sp->ids_ngbs_merger[i] = -1;
 4641 :    97 :   sp->num_ngb_merger = 0;
 4642 :   100 :     sp->ids_ngbs_formation[i] = -1;
 4643 :   101 :   sp->num_ngb_formation = 0;
 4644 :   247 :   const float sink_mass = sp->mass;
 4645 :   250 :   sp->mass += gas_mass;
 4646 :   251 :   sp->gpart->mass += gas_mass;
 4647 :   254 :   const float dv[3] = {(sp->v[0] - p->v[0]) * cosmo->a_inv,
 4648 :   255 :                        (sp->v[1] - p->v[1]) * cosmo->a_inv,
 4649 :   256 :                        (sp->v[2] - p->v[2]) * cosmo->a_inv};
 4650 :   259 :   const float dx[3] = {(sp->x[0] - p->x[0]) * cosmo->a,
 4651 :   260 :                        (sp->x[1] - p->x[1]) * cosmo->a,
 4652 :   261 :                        (sp->x[2] - p->x[2]) * cosmo->a};
 4653 :   264 :   sp->swallowed_angular_momentum[0] +=
 4654 :   266 :   sp->swallowed_angular_momentum[1] +=
 4655 :   268 :   sp->swallowed_angular_momentum[2] +=
 4656 :   272 :   const float sink_mom[3] = {sink_mass * sp->v[0] + gas_mass * p->v[0],
 4657 :   273 :                              sink_mass * sp->v[1] + gas_mass * p->v[1],
 4658 :   274 :                              sink_mass * sp->v[2] + gas_mass * p->v[2]};
 4659 :   276 :   sp->v[0] = sink_mom[0] / sp->mass;
 4660 :   277 :   sp->v[1] = sink_mom[1] / sp->mass;
 4661 :   278 :   sp->v[2] = sink_mom[2] / sp->mass;
 4662 :   279 :   sp->gpart->v_full[0] = sp->v[0];
 4663 :   280 :   sp->gpart->v_full[1] = sp->v[1];
 4664 :   281 :   sp->gpart->v_full[2] = sp->v[2];
 4665 :   290 :       sp->id, p->id, -dv[0], -dv[1], -dv[2], -dx[0], -dx[1], -dx[2],
 4666 :   295 :   struct chemistry_sink_data* sp_chem = &sp->chemistry_data;
 4667 :   300 :   sp->number_of_gas_swallows++;
 4668 :   301 :   sp->number_of_direct_gas_swallows++;
 4669 :   407 :   sp->h = sink->r_cut;
 4671 :    54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4672 :    55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4673 :    56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4674 :    58 :     ret[0] = sp->x[0];
 4675 :    59 :     ret[1] = sp->x[1];
 4676 :    60 :     ret[2] = sp->x[2];
 4677 :    72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4678 :    73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4679 :    86 :   const struct gpart* gp = sp->gpart;
 4681 :    52 :   sp->cut_off_radius =
 4682 :    55 :   sp->maximal_temperature =
 4683 :    58 :   sp->density_threshold =
 4684 :    62 :   sp->maximal_temperature /=
 4685 :    65 :   sp->density_threshold /= units_cgs_conversion_factor(us, UNIT_CONV_DENSITY);
 4686 :    67 :   message("maximal_temperature = %g", sp->maximal_temperature);
 4687 :    68 :   message("density_threshold  = %g", sp->density_threshold);
 4689 :   628 :     if (sp->time_bin == time_bin_not_created ||
 4690 :   629 :         sp->time_bin == time_bin_inhibited)
 4691 :   633 :     struct gpart *gp = sp->gpart;
 4692 :   640 :     gp->x[0] = sp->x[0];
 4693 :   641 :     gp->x[1] = sp->x[1];
 4694 :   642 :     gp->x[2] = sp->x[2];
 4695 :   644 :     gp->v_full[0] = sp->v[0];
 4696 :   645 :     gp->v_full[1] = sp->v[1];
 4697 :   646 :     gp->v_full[2] = sp->v[2];
 4698 :   648 :     gp->mass = sp->mass;
 4700 :   357 :     double old_pos_x = sp->x[0];
 4701 :   358 :     double old_pos_y = sp->x[1];
 4702 :   359 :     double old_pos_z = sp->x[2];
 4703 :   362 :     if (!s->periodic && sp->time_bin != time_bin_inhibited) {
 4704 :   400 :     if (sp->time_bin == time_bin_inhibited) {
 4705 :   403 :     } else if (sp->time_bin == time_bin_not_created) {
 4706 :   415 :       min_mass = min(min_mass, sp->mass);
 4707 :   419 :           sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2];
 4708 :   422 :       sp->x[0] = pos_x;
 4709 :   423 :       sp->x[1] = pos_y;
 4710 :   424 :       sp->x[2] = pos_z;
 4712 :   581 :         cell_getid(cdim, sp->x[0] * ih[0], sp->x[1] * ih[1], sp->x[2] * ih[2]);
 4713 :   655 :     if (sp->time_bin == time_bin_inhibited)
 4714 :   660 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
 4715 :   661 :                    sp->x[2] * s->iwidth[2]);
 4716 :   669 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
 4717 :   670 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
 4718 :   671 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
 4720 :   591 :   sp->mass = hydro_get_mass(p);
 4721 :   594 :   sp->mass_init = hydro_get_mass(p);
 4722 :   598 :     sp->birth_scale_factor = cosmo->a;
 4723 :   600 :     sp->birth_time = e->time;
 4724 :   604 :   sp->split_data = xp->split_data;
 4725 :   607 :   sp->chemistry_data = p->chemistry_data;
 4726 :   610 :   sp->tracers_data = xp->tracers_data;
 4727 :   613 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
 4728 :   616 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
 4729 :   620 :   sp->f_E = -1.f;
 4730 :   621 :   sp->number_of_SNII_events = 0;
 4731 :   622 :   sp->last_enrichment_time = sp->birth_time;
 4732 :   623 :   sp->count_since_last_enrichment = -1;
 4733 :   624 :   sp->number_of_heating_events = 0.;
 4735 :    43 :   sf->new_stellar_mass += sp->mass;
 4737 :   244 :   if (p->x[0] != sp->x[0] || p->x[1] != sp->x[1] || p->x[2] != sp->x[2]) {
 4738 :   248 :         p->x[0], p->x[1], p->x[2], sp->x[0], sp->x[1], sp->x[2]);
 4739 :   269 :   sp->x[0] += delta_x * max_displacement * p->h;
 4740 :   270 :   sp->x[1] += delta_y * max_displacement * p->h;
 4741 :   271 :   sp->x[2] += delta_z * max_displacement * p->h;
 4742 :   274 :   sp->gpart->x[0] = sp->x[0];
 4743 :   275 :   sp->gpart->x[1] = sp->x[1];
 4744 :   276 :   sp->gpart->x[2] = sp->x[2];
 4745 :   279 :   const double mass_ratio = sp->mass / hydro_get_mass(p);
 4746 :   338 :     sp->mass = mass_star;
 4747 :   339 :     sp->gpart->mass = mass_star;
 4748 :   347 :     sp->mass = mass_gas;
 4749 :   349 :   sp->sf_data.birth_mass = sp->mass;
 4750 :   353 :     sp->birth_scale_factor = cosmo->a;
 4751 :   355 :     sp->birth_time = e->time;
 4752 :   359 :   // sp->tracers_data = xp->tracers_data;
 4753 :   362 :   sp->split_data = xp->split_data;
 4754 :   365 :   sp->sf_data.birth_density = hydro_get_physical_density(p, cosmo);
 4755 :   368 :   sp->sf_data.birth_temperature = cooling_get_temperature(
 4756 :   375 :   sp->sf_data.progenitor_id = p->id;
 4758 :    41 :   out[0] = sp->sf_data.birth_density;
 4759 :    42 :   out[1] = sp->sf_data.birth_mass;
 4760 :    44 :   *id = sp->sf_data.progenitor_id;
 4762 :    44 :   sf->new_stellar_mass += sp->mass;
 4764 :   554 :   sp->mass = hydro_get_mass(p);
 4765 :   557 :   sp->mass_init = hydro_get_mass(p);
 4766 :   561 :     sp->birth_scale_factor = cosmo->a;
 4767 :   563 :     sp->birth_time = e->time;
 4768 :   567 :   sp->split_data = xp->split_data;
 4769 :   570 :   sp->chemistry_data = p->chemistry_data;
 4770 :   573 :   sp->tracers_data = xp->tracers_data;
 4771 :   576 :   sp->birth_density = cooling_get_subgrid_density(p, xp);
 4772 :   579 :   sp->birth_temperature = cooling_get_subgrid_temperature(p, xp);
 4773 :   582 :   sp->feedback_data.feedback_mass_to_launch = 0.f;
 4774 :   583 :   sp->feedback_data.feedback_energy_reservoir = 0.f;
 4775 :   584 :   sp->last_enrichment_time = sp->birth_time;
 4776 :   585 :   sp->count_since_last_enrichment = -1;
 4778 :    43 :   sf->new_stellar_mass += sp->mass;
 4780 :   173 :   sp->mass = hydro_get_mass(p);
 4781 :   176 :   sp->mass_init = hydro_get_mass(p);
 4782 :   179 :   sp->split_data = xp->split_data;
 4783 :   183 :     sp->birth_scale_factor = cosmo->a;
 4784 :   185 :     sp->birth_time = e->time;
 4786 :   663 :   sp->mass = hydro_get_mass(p);
 4787 :   666 :   sp->mass_init = hydro_get_mass(p);
 4788 :   670 :     sp->birth_scale_factor = cosmo->a;
 4789 :   672 :     sp->birth_time = e->time;
 4790 :   676 :   sp->split_data = xp->split_data;
 4791 :   679 :   sp->chemistry_data = p->chemistry_data;
 4792 :   682 :   sp->tracers_data = xp->tracers_data;
 4793 :   685 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
 4794 :   688 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
 4795 :   692 :   sp->f_E = -1.f;
 4796 :   693 :   sp->number_of_SNII_events = 0;
 4797 :   694 :   sp->last_enrichment_time = sp->birth_time;
 4798 :   695 :   sp->count_since_last_enrichment = -1;
 4800 :    43 :   sf->new_stellar_mass += sp->mass;
 4802 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 4803 :    61 :     return time - (double)sp->birth_time;
 4804 :    81 :   sp->time_bin = 0;
 4805 :    84 :   sp->group_data.mass = 0.f;
 4806 :    85 :   sp->group_data.stellar_mass = 0.f;
 4807 :    99 :     sp->ids_ngbs_density[i] = -1;
 4808 :   100 :   sp->num_ngb_density = 0;
 4809 :   103 :   sp->density.wcount = 0.f;
 4810 :   104 :   sp->density.wcount_dh = 0.f;
 4811 :   152 :   const float h = sp->h;
 4812 :   158 :   sp->density.wcount *= h_inv_dim;
 4813 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 4814 :   175 :       sp->id, sp->h, sp->density.wcount);
 4815 :   178 :   const float h = sp->h;
 4816 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 4817 :   184 :   sp->density.wcount_dh = 0.f;
 4819 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 4820 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 4821 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 4823 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4824 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4825 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4826 :    62 :     ret[0] = sp->x[0];
 4827 :    63 :     ret[1] = sp->x[1];
 4828 :    64 :     ret[2] = sp->x[2];
 4829 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4830 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4831 :    92 :   const struct gpart *gp = sp->gpart;
 4832 :   111 :   if (sp->gpart != NULL)
 4833 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 4834 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 4835 :   199 :   sp->h_tolerance =
 4836 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 4837 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 4838 :   205 :   sp->delta_neighbours =
 4839 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 4840 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 4841 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 4842 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 4843 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 4844 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 4845 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 4846 :   242 :           sp->max_smoothing_iterations);
 4847 :   252 :                        sp->target_neighbours);
 4848 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 4849 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 4850 :   256 :                        sp->h_tolerance);
 4851 :   258 :                        sp->log_max_h_change);
 4852 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 4853 :   262 :                        sp->max_smoothing_iterations);
 4855 :    43 :   if (sp->birth_time == -1.) {
 4856 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 4857 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 4858 :    59 :     star_age = time - sp->birth_time;
 4859 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 4860 :    88 :     return time - (double)sp->birth_time;
 4861 :   102 :     sp->ids_ngbs_density[i] = -1;
 4862 :   103 :   sp->num_ngb_density = 0;
 4863 :   106 :   sp->density.wcount = 0.f;
 4864 :   107 :   sp->density.wcount_dh = 0.f;
 4865 :   110 :   sp->N_density = 0;
 4866 :   111 :   sp->N_density_exact = 0;
 4867 :   112 :   sp->rho = 0.f;
 4868 :   113 :   sp->rho_exact = 0.f;
 4869 :   114 :   sp->n = 0.f;
 4870 :   115 :   sp->n_exact = 0.f;
 4871 :   116 :   sp->inhibited_exact = 0;
 4872 :   137 :   sp->time_bin = 0;
 4873 :   138 :   sp->f_E = -1.f;
 4874 :   139 :   sp->count_since_last_enrichment = -1;
 4875 :   140 :   sp->number_of_heating_events = 0.;
 4876 :   141 :   sp->number_of_SNII_events = 0;
 4877 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 4878 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 4879 :   148 :     sp->birth_temperature =
 4880 :   152 :     sp->last_enrichment_time = scale_factor;
 4881 :   154 :     sp->last_enrichment_time = time;
 4882 :   159 :   sp->group_data.mass = 0.f;
 4883 :   160 :   sp->group_data.stellar_mass = 0.f;
 4884 :   211 :   const float h = sp->h;
 4885 :   217 :   sp->density.wcount *= h_inv_dim;
 4886 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 4887 :   221 :   sp->rho *= h_inv_dim;
 4888 :   222 :   sp->n *= h_inv_dim;
 4889 :   239 :       sp->id, sp->h, sp->density.wcount);
 4890 :   242 :   sp->density.wcount = 0.f;
 4891 :   243 :   sp->density.wcount_dh = 0.f;
 4892 :   303 :   const float mass = sp->mass_init;
 4893 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 4894 :   309 :     age = time - sp->birth_time;
 4896 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4897 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4898 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4899 :    71 :     ret[0] = sp->x[0];
 4900 :    72 :     ret[1] = sp->x[1];
 4901 :    73 :     ret[2] = sp->x[2];
 4902 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4903 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4904 :   101 :   const struct gpart *gp = sp->gpart;
 4905 :   128 :   if (sp->gpart != NULL)
 4906 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 4907 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 4908 :   253 :   sp->h_tolerance =
 4909 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 4910 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 4911 :   259 :   sp->delta_neighbours =
 4912 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 4913 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 4914 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 4915 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 4916 :   276 :   sp->overwrite_birth_time =
 4917 :   278 :   sp->overwrite_birth_density =
 4918 :   280 :   sp->overwrite_birth_temperature =
 4919 :   284 :   if (sp->overwrite_birth_time) {
 4920 :   285 :     sp->spart_first_init_birth_time =
 4921 :   290 :   if (sp->overwrite_birth_density) {
 4922 :   291 :     sp->spart_first_init_birth_density =
 4923 :   296 :   if (sp->overwrite_birth_temperature) {
 4924 :   297 :     sp->spart_first_init_birth_temperature =
 4925 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 4926 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 4927 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 4928 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 4929 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 4930 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 4931 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 4932 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 4933 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 4934 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 4935 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 4936 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 4937 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 4938 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 4939 :   404 :           sp->max_smoothing_iterations);
 4940 :   406 :   if (sp->overwrite_birth_time)
 4941 :   408 :             sp->spart_first_init_birth_time);
 4942 :   411 :           sp->age_threshold_unlimited);
 4943 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 4944 :   414 :           sp->max_time_step_young);
 4945 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 4946 :   424 :                        sp->target_neighbours);
 4947 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 4948 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 4949 :   428 :                        sp->h_tolerance);
 4950 :   430 :                        sp->log_max_h_change);
 4951 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 4952 :   434 :                        sp->max_smoothing_iterations);
 4953 :   462 :     free(sp->lum_tables_Z[i]);
 4954 :   463 :     free(sp->lum_tables_ages[i]);
 4955 :   464 :     free(sp->lum_tables_luminosities[i]);
 4957 :    58 :     const double birth = sp->birth_scale_factor;
 4958 :    62 :     return time - (double)sp->birth_time;
 4959 :    76 :     sp->ids_ngbs_density[i] = -1;
 4960 :    77 :   sp->num_ngb_density = 0;
 4961 :    80 :   sp->density.wcount = 0.f;
 4962 :    81 :   sp->density.wcount_dh = 0.f;
 4963 :   100 :   sp->time_bin = 0;
 4964 :   105 :   sp->group_data.mass = 0.f;
 4965 :   106 :   sp->group_data.stellar_mass = 0.f;
 4966 :   157 :   const float h = sp->h;
 4967 :   163 :   sp->density.wcount *= h_inv_dim;
 4968 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 4969 :   180 :       sp->id, sp->h, sp->density.wcount);
 4970 :   183 :   sp->density.wcount = 0.f;
 4971 :   184 :   sp->density.wcount_dh = 0.f;
 4973 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 4974 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 4975 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 4977 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 4978 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 4979 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 4980 :    64 :     ret[0] = sp->x[0];
 4981 :    65 :     ret[1] = sp->x[1];
 4982 :    66 :     ret[2] = sp->x[2];
 4983 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 4984 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 4985 :    94 :   const struct gpart *gp = sp->gpart;
 4986 :   113 :   if (sp->gpart != NULL)
 4987 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 4988 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 4989 :   211 :   sp->h_tolerance =
 4990 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 4991 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 4992 :   217 :   sp->delta_neighbours =
 4993 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 4994 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 4995 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 4996 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 4997 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 4998 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 4999 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5000 :   254 :           sp->max_smoothing_iterations);
 5001 :   264 :                        sp->target_neighbours);
 5002 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5003 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5004 :   268 :                        sp->h_tolerance);
 5005 :   270 :                        sp->log_max_h_change);
 5006 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 5007 :   274 :                        sp->max_smoothing_iterations);
 5009 :    72 :   sp->group_data.mass = 0.f;
 5010 :    73 :   sp->group_data.stellar_mass = 0.f;
 5012 :    43 :   if (sp->birth_time == -1.) {
 5013 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 5014 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 5015 :    59 :     star_age = time - sp->birth_time;
 5016 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5017 :    88 :     return time - (double)sp->birth_time;
 5018 :   102 :     sp->ids_ngbs_density[i] = -1;
 5019 :   103 :   sp->num_ngb_density = 0;
 5020 :   106 :   sp->density.wcount = 0.f;
 5021 :   107 :   sp->density.wcount_dh = 0.f;
 5022 :   110 :   sp->N_density = 0;
 5023 :   111 :   sp->N_density_exact = 0;
 5024 :   112 :   sp->rho = 0.f;
 5025 :   113 :   sp->rho_exact = 0.f;
 5026 :   114 :   sp->n = 0.f;
 5027 :   115 :   sp->n_exact = 0.f;
 5028 :   116 :   sp->inhibited_exact = 0;
 5029 :   137 :   sp->time_bin = 0;
 5030 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 5031 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 5032 :   144 :     sp->birth_temperature =
 5033 :   148 :     sp->last_enrichment_time = scale_factor;
 5034 :   150 :     sp->last_enrichment_time = time;
 5035 :   155 :   sp->group_data.mass = 0.f;
 5036 :   156 :   sp->group_data.stellar_mass = 0.f;
 5037 :   157 :   sp->group_data.ssfr = 0.f;
 5038 :   208 :   const float h = sp->h;
 5039 :   214 :   sp->density.wcount *= h_inv_dim;
 5040 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5041 :   218 :   sp->rho *= h_inv_dim;
 5042 :   219 :   sp->n *= h_inv_dim;
 5043 :   236 :       sp->id, sp->h, sp->density.wcount);
 5044 :   239 :   sp->density.wcount = 0.f;
 5045 :   240 :   sp->density.wcount_dh = 0.f;
 5046 :   300 :   const float mass = sp->mass_init;
 5047 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 5048 :   306 :     age = time - sp->birth_time;
 5050 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5051 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5052 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5053 :    71 :     ret[0] = sp->x[0];
 5054 :    72 :     ret[1] = sp->x[1];
 5055 :    73 :     ret[2] = sp->x[2];
 5056 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5057 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5058 :   101 :   const struct gpart *gp = sp->gpart;
 5059 :   128 :   if (sp->gpart != NULL)
 5060 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5061 :   243 :   sp->eta_neighbours = parser_get_opt_param_float(
 5062 :   247 :   sp->h_tolerance =
 5063 :   251 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5064 :   252 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5065 :   253 :   sp->delta_neighbours =
 5066 :   254 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5067 :   258 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5068 :   265 :     sp->log_max_h_change = p->log_max_h_change;
 5069 :   267 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5070 :   270 :   sp->overwrite_birth_time =
 5071 :   272 :   sp->overwrite_birth_density =
 5072 :   274 :   sp->overwrite_birth_temperature =
 5073 :   278 :   if (sp->overwrite_birth_time) {
 5074 :   279 :     sp->spart_first_init_birth_time =
 5075 :   284 :   if (sp->overwrite_birth_density) {
 5076 :   285 :     sp->spart_first_init_birth_density =
 5077 :   290 :   if (sp->overwrite_birth_temperature) {
 5078 :   291 :     sp->spart_first_init_birth_temperature =
 5079 :   319 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 5080 :   320 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 5081 :   321 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 5082 :   322 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 5083 :   337 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 5084 :   338 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 5085 :   339 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 5086 :   353 :           sp->lum_tables_Z[i][k++] = log10(z);
 5087 :   357 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 5088 :   360 :         sp->lum_tables_luminosities[i][j] = log10(L);
 5089 :   377 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 5090 :   387 :           sp->eta_neighbours, sp->target_neighbours);
 5091 :   390 :           sp->h_tolerance, sp->delta_neighbours);
 5092 :   395 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5093 :   398 :           sp->max_smoothing_iterations);
 5094 :   400 :   if (sp->overwrite_birth_time)
 5095 :   402 :             sp->spart_first_init_birth_time);
 5096 :   405 :           sp->age_threshold_unlimited);
 5097 :   406 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 5098 :   408 :           sp->max_time_step_young);
 5099 :   409 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 5100 :   418 :                        sp->target_neighbours);
 5101 :   419 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5102 :   420 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5103 :   422 :                        sp->h_tolerance);
 5104 :   424 :                        sp->log_max_h_change);
 5105 :   426 :                        pow_dimension(expf(sp->log_max_h_change)));
 5106 :   428 :                        sp->max_smoothing_iterations);
 5107 :   456 :     free(sp->lum_tables_Z[i]);
 5108 :   457 :     free(sp->lum_tables_ages[i]);
 5109 :   458 :     free(sp->lum_tables_luminosities[i]);
 5111 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5112 :     3 :    61 :     return time - (double)sp->birth_time;
 5113 :     4 :    81 :   sp->time_bin = 0;
 5114 :     5 :    84 :   sp->group_data.mass = 0.f;
 5115 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 5116 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 5117 :     8 :   100 :   sp->num_ngb_density = 0;
 5118 :     9 :   103 :   sp->density.wcount = 0.f;
 5119 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 5120 :    11 :   152 :   const float h = sp->h;
 5121 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 5122 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5123 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 5124 :    15 :   178 :   const float h = sp->h;
 5125 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 5126 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 5127 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 5128 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 5129 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 5130 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5131 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5132 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5133 :    26 :    62 :     ret[0] = sp->x[0];
 5134 :    27 :    63 :     ret[1] = sp->x[1];
 5135 :    28 :    64 :     ret[2] = sp->x[2];
 5136 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5137 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5138 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 5139 :    32 :   111 :   if (sp->gpart != NULL)
 5140 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5141 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 5142 :    35 :   199 :   sp->h_tolerance =
 5143 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5144 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5145 :    38 :   205 :   sp->delta_neighbours =
 5146 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5147 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5148 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 5149 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5150 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 5151 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 5152 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5153 :    46 :   242 :           sp->max_smoothing_iterations);
 5154 :    47 :   252 :                        sp->target_neighbours);
 5155 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5156 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5157 :    50 :   256 :                        sp->h_tolerance);
 5158 :    51 :   258 :                        sp->log_max_h_change);
 5159 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 5160 :    53 :   262 :                        sp->max_smoothing_iterations);
 5161 :    55 :    43 :   if (sp->birth_time == -1.) {
 5162 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 5163 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 5164 :    58 :    59 :     star_age = time - sp->birth_time;
 5165 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5166 :    60 :    88 :     return time - (double)sp->birth_time;
 5167 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 5168 :    62 :   103 :   sp->num_ngb_density = 0;
 5169 :    63 :   106 :   sp->density.wcount = 0.f;
 5170 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 5171 :    65 :   110 :   sp->N_density = 0;
 5172 :    66 :   111 :   sp->N_density_exact = 0;
 5173 :    67 :   112 :   sp->rho = 0.f;
 5174 :    68 :   113 :   sp->rho_exact = 0.f;
 5175 :    69 :   114 :   sp->n = 0.f;
 5176 :    70 :   115 :   sp->n_exact = 0.f;
 5177 :    71 :   116 :   sp->inhibited_exact = 0;
 5178 :    72 :   137 :   sp->time_bin = 0;
 5179 :    73 :   138 :   sp->f_E = -1.f;
 5180 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 5181 :    75 :   140 :   sp->number_of_heating_events = 0.;
 5182 :    76 :   141 :   sp->number_of_SNII_events = 0;
 5183 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 5184 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 5185 :    79 :   148 :     sp->birth_temperature =
 5186 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 5187 :    81 :   154 :     sp->last_enrichment_time = time;
 5188 :    82 :   159 :   sp->group_data.mass = 0.f;
 5189 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 5190 :    84 :   211 :   const float h = sp->h;
 5191 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 5192 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5193 :    87 :   221 :   sp->rho *= h_inv_dim;
 5194 :    88 :   222 :   sp->n *= h_inv_dim;
 5195 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 5196 :    90 :   242 :   sp->density.wcount = 0.f;
 5197 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 5198 :    92 :   303 :   const float mass = sp->mass_init;
 5199 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 5200 :    94 :   309 :     age = time - sp->birth_time;
 5201 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5202 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5203 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5204 :    99 :    71 :     ret[0] = sp->x[0];
 5205 :   100 :    72 :     ret[1] = sp->x[1];
 5206 :   101 :    73 :     ret[2] = sp->x[2];
 5207 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5208 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5209 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 5210 :   105 :   128 :   if (sp->gpart != NULL)
 5211 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5212 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 5213 :   108 :   253 :   sp->h_tolerance =
 5214 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5215 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5216 :   111 :   259 :   sp->delta_neighbours =
 5217 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5218 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5219 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 5220 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5221 :   116 :   276 :   sp->overwrite_birth_time =
 5222 :   117 :   278 :   sp->overwrite_birth_density =
 5223 :   118 :   280 :   sp->overwrite_birth_temperature =
 5224 :   119 :   284 :   if (sp->overwrite_birth_time) {
 5225 :   120 :   285 :     sp->spart_first_init_birth_time =
 5226 :   121 :   290 :   if (sp->overwrite_birth_density) {
 5227 :   122 :   291 :     sp->spart_first_init_birth_density =
 5228 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 5229 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 5230 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 5231 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 5232 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 5233 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 5234 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 5235 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 5236 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 5237 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 5238 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 5239 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 5240 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 5241 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 5242 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 5243 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5244 :   139 :   404 :           sp->max_smoothing_iterations);
 5245 :   140 :   406 :   if (sp->overwrite_birth_time)
 5246 :   141 :   408 :             sp->spart_first_init_birth_time);
 5247 :   142 :   411 :           sp->age_threshold_unlimited);
 5248 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 5249 :   144 :   414 :           sp->max_time_step_young);
 5250 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 5251 :   146 :   424 :                        sp->target_neighbours);
 5252 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5253 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5254 :   149 :   428 :                        sp->h_tolerance);
 5255 :   150 :   430 :                        sp->log_max_h_change);
 5256 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 5257 :   152 :   434 :                        sp->max_smoothing_iterations);
 5258 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 5259 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 5260 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 5261 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 5262 :   158 :    62 :     return time - (double)sp->birth_time;
 5263 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 5264 :   160 :    77 :   sp->num_ngb_density = 0;
 5265 :   161 :    80 :   sp->density.wcount = 0.f;
 5266 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 5267 :   163 :   100 :   sp->time_bin = 0;
 5268 :   164 :   105 :   sp->group_data.mass = 0.f;
 5269 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 5270 :   166 :   157 :   const float h = sp->h;
 5271 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 5272 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5273 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 5274 :   170 :   183 :   sp->density.wcount = 0.f;
 5275 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 5276 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 5277 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 5278 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 5279 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5280 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5281 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5282 :   180 :    64 :     ret[0] = sp->x[0];
 5283 :   181 :    65 :     ret[1] = sp->x[1];
 5284 :   182 :    66 :     ret[2] = sp->x[2];
 5285 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5286 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5287 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 5288 :   186 :   113 :   if (sp->gpart != NULL)
 5289 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5290 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 5291 :   189 :   211 :   sp->h_tolerance =
 5292 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5293 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5294 :   192 :   217 :   sp->delta_neighbours =
 5295 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5296 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5297 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 5298 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5299 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 5300 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 5301 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5302 :   200 :   254 :           sp->max_smoothing_iterations);
 5303 :   201 :   264 :                        sp->target_neighbours);
 5304 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5305 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5306 :   204 :   268 :                        sp->h_tolerance);
 5307 :   205 :   270 :                        sp->log_max_h_change);
 5308 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 5309 :   207 :   274 :                        sp->max_smoothing_iterations);
 5310 :   209 :    72 :   sp->group_data.mass = 0.f;
 5311 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 5312 :   212 :    43 :   if (sp->birth_time == -1.) {
 5313 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 5314 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 5315 :   215 :    59 :     star_age = time - sp->birth_time;
 5316 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5317 :   217 :    88 :     return time - (double)sp->birth_time;
 5318 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 5319 :   219 :   103 :   sp->num_ngb_density = 0;
 5320 :   220 :   106 :   sp->density.wcount = 0.f;
 5321 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 5322 :   222 :   110 :   sp->N_density = 0;
 5323 :   223 :   111 :   sp->N_density_exact = 0;
 5324 :   224 :   112 :   sp->rho = 0.f;
 5325 :   225 :   113 :   sp->rho_exact = 0.f;
 5326 :   226 :   114 :   sp->n = 0.f;
 5327 :   227 :   115 :   sp->n_exact = 0.f;
 5328 :   228 :   116 :   sp->inhibited_exact = 0;
 5329 :   229 :   137 :   sp->time_bin = 0;
 5330 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 5331 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 5332 :   232 :   144 :     sp->birth_temperature =
 5333 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 5334 :   234 :   150 :     sp->last_enrichment_time = time;
 5335 :   235 :   155 :   sp->group_data.mass = 0.f;
 5336 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 5337 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 5338 :   238 :   208 :   const float h = sp->h;
 5339 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 5340 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5341 :   241 :   218 :   sp->rho *= h_inv_dim;
 5342 :   242 :   219 :   sp->n *= h_inv_dim;
 5343 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 5344 :   244 :   239 :   sp->density.wcount = 0.f;
 5345 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 5346 :   246 :   300 :   const float mass = sp->mass_init;
 5347 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 5348 :   248 :   306 :     age = time - sp->birth_time;
 5349 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5350 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5351 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5352 :   253 :    71 :     ret[0] = sp->x[0];
 5353 :   254 :    72 :     ret[1] = sp->x[1];
 5354 :   255 :    73 :     ret[2] = sp->x[2];
 5355 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5356 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5357 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 5358 :   259 :   128 :   if (sp->gpart != NULL)
 5359 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5360 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 5361 :   262 :   252 :   sp->h_tolerance =
 5362 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5363 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5364 :   265 :   258 :   sp->delta_neighbours =
 5365 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5366 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5367 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 5368 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5369 :   270 :   275 :   sp->overwrite_birth_time =
 5370 :   271 :   277 :   sp->overwrite_birth_density =
 5371 :   272 :   279 :   sp->overwrite_birth_temperature =
 5372 :   273 :   283 :   if (sp->overwrite_birth_time) {
 5373 :   274 :   284 :     sp->spart_first_init_birth_time =
 5374 :   275 :   289 :   if (sp->overwrite_birth_density) {
 5375 :   276 :   290 :     sp->spart_first_init_birth_density =
 5376 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 5377 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 5378 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 5379 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 5380 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 5381 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 5382 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 5383 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 5384 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 5385 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 5386 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 5387 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 5388 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 5389 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 5390 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 5391 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5392 :   293 :   403 :           sp->max_smoothing_iterations);
 5393 :   294 :   405 :   if (sp->overwrite_birth_time)
 5394 :   295 :   407 :             sp->spart_first_init_birth_time);
 5395 :   296 :   410 :           sp->age_threshold_unlimited);
 5396 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 5397 :   298 :   413 :           sp->max_time_step_young);
 5398 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 5399 :   300 :   423 :                        sp->target_neighbours);
 5400 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5401 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5402 :   303 :   427 :                        sp->h_tolerance);
 5403 :   304 :   429 :                        sp->log_max_h_change);
 5404 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 5405 :   306 :   433 :                        sp->max_smoothing_iterations);
 5406 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 5407 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 5408 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 5409 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5410 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 5411 :   313 :     4 :    81 :   sp->time_bin = 0;
 5412 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 5413 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 5414 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 5415 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 5416 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 5417 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 5418 :   320 :    11 :   152 :   const float h = sp->h;
 5419 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 5420 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5421 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 5422 :   324 :    15 :   178 :   const float h = sp->h;
 5423 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 5424 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 5425 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 5426 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 5427 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 5428 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5429 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5430 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5431 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 5432 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 5433 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 5434 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5435 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5436 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 5437 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 5438 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5439 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 5440 :   342 :    35 :   199 :   sp->h_tolerance =
 5441 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5442 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5443 :   345 :    38 :   205 :   sp->delta_neighbours =
 5444 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5445 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5446 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 5447 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5448 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 5449 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 5450 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5451 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 5452 :   354 :    47 :   252 :                        sp->target_neighbours);
 5453 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5454 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5455 :   357 :    50 :   256 :                        sp->h_tolerance);
 5456 :   358 :    51 :   258 :                        sp->log_max_h_change);
 5457 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 5458 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 5459 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 5460 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 5461 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 5462 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 5463 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5464 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 5465 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 5466 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 5467 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 5468 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 5469 :   371 :    65 :   110 :   sp->N_density = 0;
 5470 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 5471 :   373 :    67 :   112 :   sp->rho = 0.f;
 5472 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 5473 :   375 :    69 :   114 :   sp->n = 0.f;
 5474 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 5475 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 5476 :   378 :    72 :   137 :   sp->time_bin = 0;
 5477 :   379 :    73 :   138 :   sp->f_E = -1.f;
 5478 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 5479 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 5480 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 5481 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 5482 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 5483 :   385 :    79 :   148 :     sp->birth_temperature =
 5484 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 5485 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 5486 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 5487 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 5488 :   390 :    84 :   211 :   const float h = sp->h;
 5489 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 5490 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5491 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 5492 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 5493 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 5494 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 5495 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 5496 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 5497 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 5498 :   400 :    94 :   309 :     age = time - sp->birth_time;
 5499 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5500 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5501 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5502 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 5503 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 5504 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 5505 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5506 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5507 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 5508 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 5509 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5510 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 5511 :   413 :   108 :   253 :   sp->h_tolerance =
 5512 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5513 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5514 :   416 :   111 :   259 :   sp->delta_neighbours =
 5515 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5516 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5517 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 5518 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5519 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 5520 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 5521 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 5522 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 5523 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 5524 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 5525 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 5526 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 5527 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 5528 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 5529 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 5530 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 5531 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 5532 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 5533 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 5534 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 5535 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 5536 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 5537 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 5538 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 5539 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 5540 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 5541 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5542 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 5543 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 5544 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 5545 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 5546 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 5547 :   449 :   144 :   414 :           sp->max_time_step_young);
 5548 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 5549 :   451 :   146 :   424 :                        sp->target_neighbours);
 5550 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5551 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5552 :   454 :   149 :   428 :                        sp->h_tolerance);
 5553 :   455 :   150 :   430 :                        sp->log_max_h_change);
 5554 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 5555 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 5556 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 5557 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 5558 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 5559 :   462 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5560 :   463 :     3 :    61 :     return time - (double)sp->birth_time;
 5561 :   464 :     4 :    81 :   sp->time_bin = 0;
 5562 :   465 :     5 :    84 :   sp->group_data.mass = 0.f;
 5563 :   466 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 5564 :   467 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 5565 :   468 :     8 :   100 :   sp->num_ngb_density = 0;
 5566 :   469 :     9 :   103 :   sp->density.wcount = 0.f;
 5567 :   470 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 5568 :   471 :    11 :   152 :   const float h = sp->h;
 5569 :   472 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 5570 :   473 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5571 :   474 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 5572 :   475 :    15 :   178 :   const float h = sp->h;
 5573 :   476 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 5574 :   477 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 5575 :   478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 5576 :   479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 5577 :   480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 5578 :   481 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5579 :   482 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5580 :   483 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5581 :   484 :    26 :    62 :     ret[0] = sp->x[0];
 5582 :   485 :    27 :    63 :     ret[1] = sp->x[1];
 5583 :   486 :    28 :    64 :     ret[2] = sp->x[2];
 5584 :   487 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5585 :   488 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5586 :   489 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 5587 :   490 :    32 :   111 :   if (sp->gpart != NULL)
 5588 :   491 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5589 :   492 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 5590 :   493 :    35 :   199 :   sp->h_tolerance =
 5591 :   494 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5592 :   495 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5593 :   496 :    38 :   205 :   sp->delta_neighbours =
 5594 :   497 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5595 :   498 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5596 :   499 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 5597 :   500 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5598 :   501 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 5599 :   502 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 5600 :   503 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5601 :   504 :    46 :   242 :           sp->max_smoothing_iterations);
 5602 :   505 :    47 :   252 :                        sp->target_neighbours);
 5603 :   506 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5604 :   507 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5605 :   508 :    50 :   256 :                        sp->h_tolerance);
 5606 :   509 :    51 :   258 :                        sp->log_max_h_change);
 5607 :   510 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 5608 :   511 :    53 :   262 :                        sp->max_smoothing_iterations);
 5609 :   512 :    55 :    43 :   if (sp->birth_time == -1.) {
 5610 :   513 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 5611 :   514 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 5612 :   515 :    58 :    59 :     star_age = time - sp->birth_time;
 5613 :   516 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5614 :   517 :    60 :    88 :     return time - (double)sp->birth_time;
 5615 :   518 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 5616 :   519 :    62 :   103 :   sp->num_ngb_density = 0;
 5617 :   520 :    63 :   106 :   sp->density.wcount = 0.f;
 5618 :   521 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 5619 :   522 :    65 :   110 :   sp->N_density = 0;
 5620 :   523 :    66 :   111 :   sp->N_density_exact = 0;
 5621 :   524 :    67 :   112 :   sp->rho = 0.f;
 5622 :   525 :    68 :   113 :   sp->rho_exact = 0.f;
 5623 :   526 :    69 :   114 :   sp->n = 0.f;
 5624 :   527 :    70 :   115 :   sp->n_exact = 0.f;
 5625 :   528 :    71 :   116 :   sp->inhibited_exact = 0;
 5626 :   529 :    72 :   137 :   sp->time_bin = 0;
 5627 :   530 :    73 :   138 :   sp->f_E = -1.f;
 5628 :   531 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 5629 :   532 :    75 :   140 :   sp->number_of_heating_events = 0.;
 5630 :   533 :    76 :   141 :   sp->number_of_SNII_events = 0;
 5631 :   534 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 5632 :   535 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 5633 :   536 :    79 :   148 :     sp->birth_temperature =
 5634 :   537 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 5635 :   538 :    81 :   154 :     sp->last_enrichment_time = time;
 5636 :   539 :    82 :   159 :   sp->group_data.mass = 0.f;
 5637 :   540 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 5638 :   541 :    84 :   211 :   const float h = sp->h;
 5639 :   542 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 5640 :   543 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5641 :   544 :    87 :   221 :   sp->rho *= h_inv_dim;
 5642 :   545 :    88 :   222 :   sp->n *= h_inv_dim;
 5643 :   546 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 5644 :   547 :    90 :   242 :   sp->density.wcount = 0.f;
 5645 :   548 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 5646 :   549 :    92 :   303 :   const float mass = sp->mass_init;
 5647 :   550 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 5648 :   551 :    94 :   309 :     age = time - sp->birth_time;
 5649 :   552 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5650 :   553 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5651 :   554 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5652 :   555 :    99 :    71 :     ret[0] = sp->x[0];
 5653 :   556 :   100 :    72 :     ret[1] = sp->x[1];
 5654 :   557 :   101 :    73 :     ret[2] = sp->x[2];
 5655 :   558 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5656 :   559 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5657 :   560 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 5658 :   561 :   105 :   128 :   if (sp->gpart != NULL)
 5659 :   562 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5660 :   563 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 5661 :   564 :   108 :   253 :   sp->h_tolerance =
 5662 :   565 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5663 :   566 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5664 :   567 :   111 :   259 :   sp->delta_neighbours =
 5665 :   568 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5666 :   569 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5667 :   570 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 5668 :   571 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5669 :   572 :   116 :   276 :   sp->overwrite_birth_time =
 5670 :   573 :   117 :   278 :   sp->overwrite_birth_density =
 5671 :   574 :   118 :   280 :   sp->overwrite_birth_temperature =
 5672 :   575 :   119 :   284 :   if (sp->overwrite_birth_time) {
 5673 :   576 :   120 :   285 :     sp->spart_first_init_birth_time =
 5674 :   577 :   121 :   290 :   if (sp->overwrite_birth_density) {
 5675 :   578 :   122 :   291 :     sp->spart_first_init_birth_density =
 5676 :   579 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 5677 :   580 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 5678 :   581 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 5679 :   582 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 5680 :   583 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 5681 :   584 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 5682 :   585 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 5683 :   586 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 5684 :   587 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 5685 :   588 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 5686 :   589 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 5687 :   590 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 5688 :   591 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 5689 :   592 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 5690 :   593 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 5691 :   594 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5692 :   595 :   139 :   404 :           sp->max_smoothing_iterations);
 5693 :   596 :   140 :   406 :   if (sp->overwrite_birth_time)
 5694 :   597 :   141 :   408 :             sp->spart_first_init_birth_time);
 5695 :   598 :   142 :   411 :           sp->age_threshold_unlimited);
 5696 :   599 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 5697 :   600 :   144 :   414 :           sp->max_time_step_young);
 5698 :   601 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 5699 :   602 :   146 :   424 :                        sp->target_neighbours);
 5700 :   603 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5701 :   604 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5702 :   605 :   149 :   428 :                        sp->h_tolerance);
 5703 :   606 :   150 :   430 :                        sp->log_max_h_change);
 5704 :   607 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 5705 :   608 :   152 :   434 :                        sp->max_smoothing_iterations);
 5706 :   609 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 5707 :   610 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 5708 :   611 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 5709 :   612 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 5710 :   613 :   158 :    62 :     return time - (double)sp->birth_time;
 5711 :   614 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 5712 :   615 :   160 :    77 :   sp->num_ngb_density = 0;
 5713 :   616 :   161 :    80 :   sp->density.wcount = 0.f;
 5714 :   617 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 5715 :   618 :   163 :   100 :   sp->time_bin = 0;
 5716 :   619 :   164 :   105 :   sp->group_data.mass = 0.f;
 5717 :   620 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 5718 :   621 :   166 :   157 :   const float h = sp->h;
 5719 :   622 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 5720 :   623 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5721 :   624 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 5722 :   625 :   170 :   183 :   sp->density.wcount = 0.f;
 5723 :   626 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 5724 :   627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 5725 :   628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 5726 :   629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 5727 :   630 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5728 :   631 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5729 :   632 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5730 :   633 :   180 :    64 :     ret[0] = sp->x[0];
 5731 :   634 :   181 :    65 :     ret[1] = sp->x[1];
 5732 :   635 :   182 :    66 :     ret[2] = sp->x[2];
 5733 :   636 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5734 :   637 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5735 :   638 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 5736 :   639 :   186 :   113 :   if (sp->gpart != NULL)
 5737 :   640 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5738 :   641 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 5739 :   642 :   189 :   211 :   sp->h_tolerance =
 5740 :   643 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5741 :   644 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5742 :   645 :   192 :   217 :   sp->delta_neighbours =
 5743 :   646 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5744 :   647 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5745 :   648 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 5746 :   649 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5747 :   650 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 5748 :   651 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 5749 :   652 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5750 :   653 :   200 :   254 :           sp->max_smoothing_iterations);
 5751 :   654 :   201 :   264 :                        sp->target_neighbours);
 5752 :   655 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5753 :   656 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5754 :   657 :   204 :   268 :                        sp->h_tolerance);
 5755 :   658 :   205 :   270 :                        sp->log_max_h_change);
 5756 :   659 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 5757 :   660 :   207 :   274 :                        sp->max_smoothing_iterations);
 5758 :   661 :   209 :    72 :   sp->group_data.mass = 0.f;
 5759 :   662 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 5760 :   663 :   212 :    43 :   if (sp->birth_time == -1.) {
 5761 :   664 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 5762 :   665 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 5763 :   666 :   215 :    59 :     star_age = time - sp->birth_time;
 5764 :   667 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5765 :   668 :   217 :    88 :     return time - (double)sp->birth_time;
 5766 :   669 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 5767 :   670 :   219 :   103 :   sp->num_ngb_density = 0;
 5768 :   671 :   220 :   106 :   sp->density.wcount = 0.f;
 5769 :   672 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 5770 :   673 :   222 :   110 :   sp->N_density = 0;
 5771 :   674 :   223 :   111 :   sp->N_density_exact = 0;
 5772 :   675 :   224 :   112 :   sp->rho = 0.f;
 5773 :   676 :   225 :   113 :   sp->rho_exact = 0.f;
 5774 :   677 :   226 :   114 :   sp->n = 0.f;
 5775 :   678 :   227 :   115 :   sp->n_exact = 0.f;
 5776 :   679 :   228 :   116 :   sp->inhibited_exact = 0;
 5777 :   680 :   229 :   137 :   sp->time_bin = 0;
 5778 :   681 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 5779 :   682 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 5780 :   683 :   232 :   144 :     sp->birth_temperature =
 5781 :   684 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 5782 :   685 :   234 :   150 :     sp->last_enrichment_time = time;
 5783 :   686 :   235 :   155 :   sp->group_data.mass = 0.f;
 5784 :   687 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 5785 :   688 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 5786 :   689 :   238 :   208 :   const float h = sp->h;
 5787 :   690 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 5788 :   691 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5789 :   692 :   241 :   218 :   sp->rho *= h_inv_dim;
 5790 :   693 :   242 :   219 :   sp->n *= h_inv_dim;
 5791 :   694 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 5792 :   695 :   244 :   239 :   sp->density.wcount = 0.f;
 5793 :   696 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 5794 :   697 :   246 :   300 :   const float mass = sp->mass_init;
 5795 :   698 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 5796 :   699 :   248 :   306 :     age = time - sp->birth_time;
 5797 :   700 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5798 :   701 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5799 :   702 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5800 :   703 :   253 :    71 :     ret[0] = sp->x[0];
 5801 :   704 :   254 :    72 :     ret[1] = sp->x[1];
 5802 :   705 :   255 :    73 :     ret[2] = sp->x[2];
 5803 :   706 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5804 :   707 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5805 :   708 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 5806 :   709 :   259 :   128 :   if (sp->gpart != NULL)
 5807 :   710 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5808 :   711 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 5809 :   712 :   262 :   252 :   sp->h_tolerance =
 5810 :   713 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5811 :   714 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5812 :   715 :   265 :   258 :   sp->delta_neighbours =
 5813 :   716 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5814 :   717 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5815 :   718 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 5816 :   719 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5817 :   720 :   270 :   275 :   sp->overwrite_birth_time =
 5818 :   721 :   271 :   277 :   sp->overwrite_birth_density =
 5819 :   722 :   272 :   279 :   sp->overwrite_birth_temperature =
 5820 :   723 :   273 :   283 :   if (sp->overwrite_birth_time) {
 5821 :   724 :   274 :   284 :     sp->spart_first_init_birth_time =
 5822 :   725 :   275 :   289 :   if (sp->overwrite_birth_density) {
 5823 :   726 :   276 :   290 :     sp->spart_first_init_birth_density =
 5824 :   727 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 5825 :   728 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 5826 :   729 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 5827 :   730 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 5828 :   731 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 5829 :   732 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 5830 :   733 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 5831 :   734 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 5832 :   735 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 5833 :   736 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 5834 :   737 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 5835 :   738 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 5836 :   739 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 5837 :   740 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 5838 :   741 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 5839 :   742 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5840 :   743 :   293 :   403 :           sp->max_smoothing_iterations);
 5841 :   744 :   294 :   405 :   if (sp->overwrite_birth_time)
 5842 :   745 :   295 :   407 :             sp->spart_first_init_birth_time);
 5843 :   746 :   296 :   410 :           sp->age_threshold_unlimited);
 5844 :   747 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 5845 :   748 :   298 :   413 :           sp->max_time_step_young);
 5846 :   749 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 5847 :   750 :   300 :   423 :                        sp->target_neighbours);
 5848 :   751 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5849 :   752 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5850 :   753 :   303 :   427 :                        sp->h_tolerance);
 5851 :   754 :   304 :   429 :                        sp->log_max_h_change);
 5852 :   755 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 5853 :   756 :   306 :   433 :                        sp->max_smoothing_iterations);
 5854 :   757 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 5855 :   758 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 5856 :   759 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 5857 :   760 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5858 :   761 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 5859 :   762 :   313 :     4 :    81 :   sp->time_bin = 0;
 5860 :   763 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 5861 :   764 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 5862 :   765 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 5863 :   766 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 5864 :   767 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 5865 :   768 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 5866 :   769 :   320 :    11 :   152 :   const float h = sp->h;
 5867 :   770 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 5868 :   771 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5869 :   772 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 5870 :   773 :   324 :    15 :   178 :   const float h = sp->h;
 5871 :   774 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 5872 :   775 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 5873 :   776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 5874 :   777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 5875 :   778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 5876 :   779 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5877 :   780 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5878 :   781 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5879 :   782 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 5880 :   783 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 5881 :   784 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 5882 :   785 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5883 :   786 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5884 :   787 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 5885 :   788 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 5886 :   789 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5887 :   790 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 5888 :   791 :   342 :    35 :   199 :   sp->h_tolerance =
 5889 :   792 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5890 :   793 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5891 :   794 :   345 :    38 :   205 :   sp->delta_neighbours =
 5892 :   795 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5893 :   796 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5894 :   797 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 5895 :   798 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5896 :   799 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 5897 :   800 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 5898 :   801 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5899 :   802 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 5900 :   803 :   354 :    47 :   252 :                        sp->target_neighbours);
 5901 :   804 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5902 :   805 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 5903 :   806 :   357 :    50 :   256 :                        sp->h_tolerance);
 5904 :   807 :   358 :    51 :   258 :                        sp->log_max_h_change);
 5905 :   808 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 5906 :   809 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 5907 :   810 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 5908 :   811 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 5909 :   812 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 5910 :   813 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 5911 :   814 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 5912 :   815 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 5913 :   816 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 5914 :   817 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 5915 :   818 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 5916 :   819 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 5917 :   820 :   371 :    65 :   110 :   sp->N_density = 0;
 5918 :   821 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 5919 :   822 :   373 :    67 :   112 :   sp->rho = 0.f;
 5920 :   823 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 5921 :   824 :   375 :    69 :   114 :   sp->n = 0.f;
 5922 :   825 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 5923 :   826 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 5924 :   827 :   378 :    72 :   137 :   sp->time_bin = 0;
 5925 :   828 :   379 :    73 :   138 :   sp->f_E = -1.f;
 5926 :   829 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 5927 :   830 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 5928 :   831 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 5929 :   832 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 5930 :   833 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 5931 :   834 :   385 :    79 :   148 :     sp->birth_temperature =
 5932 :   835 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 5933 :   836 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 5934 :   837 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 5935 :   838 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 5936 :   839 :   390 :    84 :   211 :   const float h = sp->h;
 5937 :   840 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 5938 :   841 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 5939 :   842 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 5940 :   843 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 5941 :   844 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 5942 :   845 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 5943 :   846 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 5944 :   847 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 5945 :   848 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 5946 :   849 :   400 :    94 :   309 :     age = time - sp->birth_time;
 5947 :   850 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 5948 :   851 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 5949 :   852 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 5950 :   853 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 5951 :   854 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 5952 :   855 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 5953 :   856 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 5954 :   857 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 5955 :   858 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 5956 :   859 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 5957 :   860 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 5958 :   861 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 5959 :   862 :   413 :   108 :   253 :   sp->h_tolerance =
 5960 :   863 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 5961 :   864 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 5962 :   865 :   416 :   111 :   259 :   sp->delta_neighbours =
 5963 :   866 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 5964 :   867 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 5965 :   868 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 5966 :   869 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 5967 :   870 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 5968 :   871 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 5969 :   872 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 5970 :   873 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 5971 :   874 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 5972 :   875 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 5973 :   876 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 5974 :   877 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 5975 :   878 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 5976 :   879 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 5977 :   880 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 5978 :   881 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 5979 :   882 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 5980 :   883 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 5981 :   884 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 5982 :   885 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 5983 :   886 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 5984 :   887 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 5985 :   888 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 5986 :   889 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 5987 :   890 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 5988 :   891 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 5989 :   892 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 5990 :   893 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 5991 :   894 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 5992 :   895 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 5993 :   896 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 5994 :   897 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 5995 :   898 :   449 :   144 :   414 :           sp->max_time_step_young);
 5996 :   899 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 5997 :   900 :   451 :   146 :   424 :                        sp->target_neighbours);
 5998 :   901 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 5999 :   902 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 6000 :   903 :   454 :   149 :   428 :                        sp->h_tolerance);
 6001 :   904 :   455 :   150 :   430 :                        sp->log_max_h_change);
 6002 :   905 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 6003 :   906 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 6004 :   907 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 6005 :   908 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 6006 :   909 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 6008 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 6009 :     3 :    61 :     return time - (double)sp->birth_time;
 6010 :     4 :    81 :   sp->time_bin = 0;
 6011 :     5 :    84 :   sp->group_data.mass = 0.f;
 6012 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 6013 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 6014 :     8 :   100 :   sp->num_ngb_density = 0;
 6015 :     9 :   103 :   sp->density.wcount = 0.f;
 6016 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 6017 :    11 :   152 :   const float h = sp->h;
 6018 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 6019 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 6020 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 6021 :    15 :   178 :   const float h = sp->h;
 6022 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 6023 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 6024 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 6025 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 6026 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 6027 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 6028 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 6029 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 6030 :    26 :    62 :     ret[0] = sp->x[0];
 6031 :    27 :    63 :     ret[1] = sp->x[1];
 6032 :    28 :    64 :     ret[2] = sp->x[2];
 6033 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 6034 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 6035 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 6036 :    32 :   111 :   if (sp->gpart != NULL)
 6037 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 6038 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 6039 :    35 :   199 :   sp->h_tolerance =
 6040 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 6041 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 6042 :    38 :   205 :   sp->delta_neighbours =
 6043 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 6044 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 6045 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 6046 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 6047 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 6048 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 6049 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 6050 :    46 :   242 :           sp->max_smoothing_iterations);
 6051 :    47 :   252 :                        sp->target_neighbours);
 6052 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 6053 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 6054 :    50 :   256 :                        sp->h_tolerance);
 6055 :    51 :   258 :                        sp->log_max_h_change);
 6056 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 6057 :    53 :   262 :                        sp->max_smoothing_iterations);
 6058 :    55 :    43 :   if (sp->birth_time == -1.) {
 6059 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 6060 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 6061 :    58 :    59 :     star_age = time - sp->birth_time;
 6062 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 6063 :    60 :    88 :     return time - (double)sp->birth_time;
 6064 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 6065 :    62 :   103 :   sp->num_ngb_density = 0;
 6066 :    63 :   106 :   sp->density.wcount = 0.f;
 6067 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 6068 :    65 :   110 :   sp->N_density = 0;
 6069 :    66 :   111 :   sp->N_density_exact = 0;
 6070 :    67 :   112 :   sp->rho = 0.f;
 6071 :    68 :   113 :   sp->rho_exact = 0.f;
 6072 :    69 :   114 :   sp->n = 0.f;
 6073 :    70 :   115 :   sp->n_exact = 0.f;
 6074 :    71 :   116 :   sp->inhibited_exact = 0;
 6075 :    72 :   137 :   sp->time_bin = 0;
 6076 :    73 :   138 :   sp->f_E = -1.f;
 6077 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 6078 :    75 :   140 :   sp->number_of_heating_events = 0.;
 6079 :    76 :   141 :   sp->number_of_SNII_events = 0;
 6080 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 6081 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 6082 :    79 :   148 :     sp->birth_temperature =
 6083 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 6084 :    81 :   154 :     sp->last_enrichment_time = time;
 6085 :    82 :   159 :   sp->group_data.mass = 0.f;
 6086 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 6087 :    84 :   211 :   const float h = sp->h;
 6088 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 6089 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 6090 :    87 :   221 :   sp->rho *= h_inv_dim;
 6091 :    88 :   222 :   sp->n *= h_inv_dim;
 6092 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 6093 :    90 :   242 :   sp->density.wcount = 0.f;
 6094 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 6095 :    92 :   303 :   const float mass = sp->mass_init;
 6096 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 6097 :    94 :   309 :     age = time - sp->birth_time;
 6098 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 6099 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 6100 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 6101 :    99 :    71 :     ret[0] = sp->x[0];
 6102 :   100 :    72 :     ret[1] = sp->x[1];
 6103 :   101 :    73 :     ret[2] = sp->x[2];
 6104 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 6105 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 6106 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 6107 :   105 :   128 :   if (sp->gpart != NULL)
 6108 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 6109 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 6110 :   108 :   253 :   sp->h_tolerance =
 6111 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 6112 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 6113 :   111 :   259 :   sp->delta_neighbours =
 6114 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 6115 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 6116 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 6117 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 6118 :   116 :   276 :   sp->overwrite_birth_time =
 6119 :   117 :   278 :   sp->overwrite_birth_density =
 6120 :   118 :   280 :   sp->overwrite_birth_temperature =
 6121 :   119 :   284 :   if (sp->overwrite_birth_time) {
 6122 :   120 :   285 :     sp->spart_first_init_birth_time =
 6123 :   121 :   290 :   if (sp->overwrite_birth_density) {
 6124 :   122 :   291 :     sp->spart_first_init_birth_density =
 6125 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 6126 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 6127 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 6128 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 6129 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 6130 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 6131 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 6132 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 6133 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 6134 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 6135 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 6136 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 6137 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 6138 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 6139 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 6140 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 6141 :   139 :   404 :           sp->max_smoothing_iterations);
 6142 :   140 :   406 :   if (sp->overwrite_birth_time)
 6143 :   141 :   408 :             sp->spart_first_init_birth_time);
 6144 :   142 :   411 :           sp->age_threshold_unlimited);
 6145 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 6146 :   144 :   414 :           sp->max_time_step_young);
 6147 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 6148 :   146 :   424 :                        sp->target_neighbours);
 6149 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 6150 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 6151 :   149 :   428 :                        sp->h_tolerance);
 6152 :   150 :   430 :                        sp->log_max_h_change);
 6153 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 6154 :   152 :   434 :                        sp->max_smoothing_iterations);
 6155 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 6156 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 6157 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
 6158 :   157 :    58 :     const double birth = sp->birth_scale_factor;
 6159 :   158 :    62 :     return time - (double)sp->birth_time;
 6160 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
 6161 :   160 :    77 :   sp->num_ngb_density = 0;
 6162 :   161 :    80 :   sp->density.wcount = 0.f;
 6163 :   162 :    81 :   sp->density.wcount_dh = 0.f;
 6164 :   163 :   100 :   sp->time_bin = 0;
 6165 :   164 :   105 :   sp->group_data.mass = 0.f;
 6166 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
 6167 :   166 :   157 :   const float h = sp->h;
 6168 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
 6169 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 6170 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
 6171 :   170 :   183 :   sp->density.wcount = 0.f;
 6172 :   171 :   184 :   sp->density.wcount_dh = 0.f;
 6173 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 6174 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 6175 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 6176 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 6177 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 6178 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 6179 :   180 :    64 :     ret[0] = sp->x[0];
 6180 :   181 :    65 :     ret[1] = sp->x[1];
 6181 :   182 :    66 :     ret[2] = sp->x[2];
 6182 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 6183 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 6184 :   185 :    94 :   const struct gpart *gp = sp->gpart;
 6185 :   186 :   113 :   if (sp->gpart != NULL)
 6186 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 6187 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
 6188 :   189 :   211 :   sp->h_tolerance =
 6189 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 6190 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 6191 :   192 :   217 :   sp->delta_neighbours =
 6192 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 6193 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 6194 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
 6195 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 6196 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
 6197 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
 6198 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 6199 :   200 :   254 :           sp->max_smoothing_iterations);
 6200 :   201 :   264 :                        sp->target_neighbours);
 6201 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 6202 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 6203 :   204 :   268 :                        sp->h_tolerance);
 6204 :   205 :   270 :                        sp->log_max_h_change);
 6205 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
 6206 :   207 :   274 :                        sp->max_smoothing_iterations);
 6207 :   209 :    72 :   sp->group_data.mass = 0.f;
 6208 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
 6209 :   212 :    43 :   if (sp->birth_time == -1.) {
 6210 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 6211 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 6212 :   215 :    59 :     star_age = time - sp->birth_time;
 6213 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 6214 :   217 :    88 :     return time - (double)sp->birth_time;
 6215 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
 6216 :   219 :   103 :   sp->num_ngb_density = 0;
 6217 :   220 :   106 :   sp->density.wcount = 0.f;
 6218 :   221 :   107 :   sp->density.wcount_dh = 0.f;
 6219 :   222 :   110 :   sp->N_density = 0;
 6220 :   223 :   111 :   sp->N_density_exact = 0;
 6221 :   224 :   112 :   sp->rho = 0.f;
 6222 :   225 :   113 :   sp->rho_exact = 0.f;
 6223 :   226 :   114 :   sp->n = 0.f;
 6224 :   227 :   115 :   sp->n_exact = 0.f;
 6225 :   228 :   116 :   sp->inhibited_exact = 0;
 6226 :   229 :   137 :   sp->time_bin = 0;
 6227 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 6228 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 6229 :   232 :   144 :     sp->birth_temperature =
 6230 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
 6231 :   234 :   150 :     sp->last_enrichment_time = time;
 6232 :   235 :   155 :   sp->group_data.mass = 0.f;
 6233 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
 6234 :   237 :   157 :   sp->group_data.ssfr = 0.f;
 6235 :   238 :   208 :   const float h = sp->h;
 6236 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
 6237 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 6238 :   241 :   218 :   sp->rho *= h_inv_dim;
 6239 :   242 :   219 :   sp->n *= h_inv_dim;
 6240 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
 6241 :   244 :   239 :   sp->density.wcount = 0.f;
 6242 :   245 :   240 :   sp->density.wcount_dh = 0.f;
 6243 :   246 :   300 :   const float mass = sp->mass_init;
 6244 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
 6245 :   248 :   306 :     age = time - sp->birth_time;
 6246 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 6247 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 6248 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 6249 :   253 :    71 :     ret[0] = sp->x[0];
 6250 :   254 :    72 :     ret[1] = sp->x[1];
 6251 :   255 :    73 :     ret[2] = sp->x[2];
 6252 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 6253 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 6254 :   258 :   101 :   const struct gpart *gp = sp->gpart;
 6255 :   259 :   128 :   if (sp->gpart != NULL)
 6256 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 6257 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
 6258 :   262 :   252 :   sp->h_tolerance =
 6259 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 6260 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 6261 :   265 :   258 :   sp->delta_neighbours =
 6262 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 6263 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 6264 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
 6265 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 6266 :   270 :   275 :   sp->overwrite_birth_time =
 6267 :   271 :   277 :   sp->overwrite_birth_density =
 6268 :   272 :   279 :   sp->overwrite_birth_temperature =
 6269 :   273 :   283 :   if (sp->overwrite_birth_time) {
 6270 :   274 :   284 :     sp->spart_first_init_birth_time =
 6271 :   275 :   289 :   if (sp->overwrite_birth_density) {
 6272 :   276 :   290 :     sp->spart_first_init_birth_density =
 6273 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
 6274 :   278 :   296 :     sp->spart_first_init_birth_temperature =
 6275 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 6276 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 6277 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 6278 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 6279 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 6280 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 6281 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 6282 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
 6283 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 6284 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
 6285 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 6286 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
 6287 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
 6288 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 6289 :   293 :   403 :           sp->max_smoothing_iterations);
 6290 :   294 :   405 :   if (sp->overwrite_birth_time)
 6291 :   295 :   407 :             sp->spart_first_init_birth_time);
 6292 :   296 :   410 :           sp->age_threshold_unlimited);
 6293 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 6294 :   298 :   413 :           sp->max_time_step_young);
 6295 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 6296 :   300 :   423 :                        sp->target_neighbours);
 6297 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 6298 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 6299 :   303 :   427 :                        sp->h_tolerance);
 6300 :   304 :   429 :                        sp->log_max_h_change);
 6301 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
 6302 :   306 :   433 :                        sp->max_smoothing_iterations);
 6303 :   307 :   461 :     free(sp->lum_tables_Z[i]);
 6304 :   308 :   462 :     free(sp->lum_tables_ages[i]);
 6305 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
 6306 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 6307 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
 6308 :   313 :     4 :    81 :   sp->time_bin = 0;
 6309 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
 6310 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
 6311 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
 6312 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
 6313 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
 6314 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
 6315 :   320 :    11 :   152 :   const float h = sp->h;
 6316 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
 6317 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 6318 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
 6319 :   324 :    15 :   178 :   const float h = sp->h;
 6320 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
 6321 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
 6322 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
 6323 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
 6324 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
 6325 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 6326 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 6327 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 6328 :   333 :    26 :    62 :     ret[0] = sp->x[0];
 6329 :   334 :    27 :    63 :     ret[1] = sp->x[1];
 6330 :   335 :    28 :    64 :     ret[2] = sp->x[2];
 6331 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 6332 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 6333 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
 6334 :   339 :    32 :   111 :   if (sp->gpart != NULL)
 6335 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 6336 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
 6337 :   342 :    35 :   199 :   sp->h_tolerance =
 6338 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 6339 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 6340 :   345 :    38 :   205 :   sp->delta_neighbours =
 6341 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 6342 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 6343 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
 6344 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 6345 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
 6346 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
 6347 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 6348 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
 6349 :   354 :    47 :   252 :                        sp->target_neighbours);
 6350 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 6351 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 6352 :   357 :    50 :   256 :                        sp->h_tolerance);
 6353 :   358 :    51 :   258 :                        sp->log_max_h_change);
 6354 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
 6355 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
 6356 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
 6357 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
 6358 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
 6359 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
 6360 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
 6361 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
 6362 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
 6363 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
 6364 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
 6365 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
 6366 :   371 :    65 :   110 :   sp->N_density = 0;
 6367 :   372 :    66 :   111 :   sp->N_density_exact = 0;
 6368 :   373 :    67 :   112 :   sp->rho = 0.f;
 6369 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
 6370 :   375 :    69 :   114 :   sp->n = 0.f;
 6371 :   376 :    70 :   115 :   sp->n_exact = 0.f;
 6372 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
 6373 :   378 :    72 :   137 :   sp->time_bin = 0;
 6374 :   379 :    73 :   138 :   sp->f_E = -1.f;
 6375 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
 6376 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
 6377 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
 6378 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
 6379 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
 6380 :   385 :    79 :   148 :     sp->birth_temperature =
 6381 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
 6382 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
 6383 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
 6384 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
 6385 :   390 :    84 :   211 :   const float h = sp->h;
 6386 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
 6387 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
 6388 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
 6389 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
 6390 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
 6391 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
 6392 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
 6393 :   398 :    92 :   303 :   const float mass = sp->mass_init;
 6394 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
 6395 :   400 :    94 :   309 :     age = time - sp->birth_time;
 6396 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
 6397 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
 6398 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
 6399 :   404 :    99 :    71 :     ret[0] = sp->x[0];
 6400 :   405 :   100 :    72 :     ret[1] = sp->x[1];
 6401 :   406 :   101 :    73 :     ret[2] = sp->x[2];
 6402 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
 6403 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
 6404 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
 6405 :   410 :   105 :   128 :   if (sp->gpart != NULL)
 6406 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
 6407 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
 6408 :   413 :   108 :   253 :   sp->h_tolerance =
 6409 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
 6410 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
 6411 :   416 :   111 :   259 :   sp->delta_neighbours =
 6412 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
 6413 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
 6414 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
 6415 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
 6416 :   421 :   116 :   276 :   sp->overwrite_birth_time =
 6417 :   422 :   117 :   278 :   sp->overwrite_birth_density =
 6418 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
 6419 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
 6420 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
 6421 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
 6422 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
 6423 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
 6424 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
 6425 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
 6426 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
 6427 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
 6428 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
 6429 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
 6430 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
 6431 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
 6432 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
 6433 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
 6434 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
 6435 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
 6436 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
 6437 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
 6438 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
 6439 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
 6440 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
 6441 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
 6442 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
 6443 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
 6444 :   449 :   144 :   414 :           sp->max_time_step_young);
 6445 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
 6446 :   451 :   146 :   424 :                        sp->target_neighbours);
 6447 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
 6448 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
 6449 :   454 :   149 :   428 :                        sp->h_tolerance);
 6450 :   455 :   150 :   430 :                        sp->log_max_h_change);
 6451 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
 6452 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
 6453 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
 6454 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
 6455 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
