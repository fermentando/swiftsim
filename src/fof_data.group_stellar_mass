./active.h:
  438 :   const timebin_t spart_bin = sp->time_bin;
  442 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  446 :         "s-particle in an impossible time-zone! sp->ti_end=%lld "
  541 :   return sp->time_bin == time_bin_inhibited;
  747 :   const timebin_t spart_bin = sp->time_bin;
  752 :       get_integer_time_begin(ti_current + 1, sp->time_bin);
  756 :         "s-particle in an impossible time-zone! sp->ti_beg=%lld "
./cell.c:
 1353 :     if ((sp->x[0] < c->loc[0] / space_stretch) ||
 1354 :         (sp->x[1] < c->loc[1] / space_stretch) ||
 1355 :         (sp->x[2] < c->loc[2] / space_stretch) ||
 1356 :         (sp->x[0] >= (c->loc[0] + c->width[0]) * space_stretch) ||
 1357 :         (sp->x[1] >= (c->loc[1] + c->width[1]) * space_stretch) ||
 1358 :         (sp->x[2] >= (c->loc[2] + c->width[2]) * space_stretch))
 1361 :     if (sp->time_bin != time_bin_not_created &&
 1362 :         sp->time_bin != time_bin_inhibited) {
 1363 :       const struct gpart *gp = sp->gpart;
 1364 :       if (gp == NULL && sp->time_bin != time_bin_not_created)
./cell_convert_part.c:
  255 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
  256 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
  257 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
  260 :   sp->time_bin = e->min_active_bin;
  264 :   sp->ti_drift = e->ti_current;
  388 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
  389 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
  390 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
  393 :   sp->time_bin = e->min_active_bin;
  397 :   sp->ti_drift = e->ti_current;
  642 :   if (sp->time_bin == time_bin_inhibited) return;
  645 :   sp->time_bin = time_bin_inhibited;
  646 :   if (sp->gpart) {
  647 :     sp->gpart->time_bin = time_bin_inhibited;
  648 :     sp->gpart->id_or_neg_offset = sp->id;
  649 :     sp->gpart->type = swift_type_dark_matter;
  655 :   if (sp->gpart) {
  660 :   sp->gpart = NULL;
  813 :   if (sp->gpart == NULL)
  817 :   struct gpart *gp = sp->gpart;
  820 :   sp->time_bin = time_bin_inhibited;
  823 :   sp->gpart = NULL;
  827 :   gp->id_or_neg_offset = sp->id;
  830 :   gp->ti_kick = sp->ti_kick;
  873 :   sp->x_diff[0] = xp->x_diff[0];
  874 :   sp->x_diff[1] = xp->x_diff[1];
  875 :   sp->x_diff[2] = xp->x_diff[2];
  881 :   sp->id = gp->id_or_neg_offset;
  885 :   sp->gpart = gp;
  889 :   gp->time_bin = sp->time_bin;
  892 :   sp->mass = gp->mass;
  893 :   sp->x[0] = gp->x[0];
  894 :   sp->x[1] = gp->x[1];
  895 :   sp->x[2] = gp->x[2];
  896 :   sp->v[0] = gp->v_full[0];
  897 :   sp->v[1] = gp->v_full[1];
  898 :   sp->v[2] = gp->v_full[2];
  901 :   sp->ti_kick = gp->ti_kick;
  902 :   gp->ti_drift = sp->ti_drift;
  906 :   sp->h = p->h;
  941 :   sp->x_diff[0] = xp->x_diff[0];
  942 :   sp->x_diff[1] = xp->x_diff[1];
  943 :   sp->x_diff[2] = xp->x_diff[2];
  959 :   sp->id = space_get_new_unique_id(e->s);
  963 :   sp->gpart = gp;
  967 :   gp->time_bin = sp->time_bin;
  970 :   sp->mass = hydro_get_mass(p);
  971 :   sp->x[0] = p->x[0];
  972 :   sp->x[1] = p->x[1];
  973 :   sp->x[2] = p->x[2];
  974 :   sp->v[0] = p->v_full[0];
  975 :   sp->v[1] = p->v_full[1];
  976 :   sp->v[2] = p->v_full[2];
  979 :   sp->ti_kick = p->ti_kick;
  980 :   sp->ti_drift = p->ti_drift;
  984 :   sp->h = p->h;
 1024 :   sp->x_diff[0] = xp->x_diff[0];
 1025 :   sp->x_diff[1] = xp->x_diff[1];
 1026 :   sp->x_diff[2] = xp->x_diff[2];
 1032 :   sp->id = p->id;
 1036 :   sp->gpart = gp;
 1040 :   gp->time_bin = sp->time_bin;
 1043 :   sp->mass = gp->mass;
 1044 :   sp->x[0] = gp->x[0];
 1045 :   sp->x[1] = gp->x[1];
 1046 :   sp->x[2] = gp->x[2];
 1047 :   sp->v[0] = gp->v_full[0];
 1048 :   sp->v[1] = gp->v_full[1];
 1049 :   sp->v[2] = gp->v_full[2];
 1052 :   sp->ti_kick = gp->ti_kick;
 1053 :   gp->ti_drift = sp->ti_drift;
 1057 :   sp->r_cut = e->sink_properties->cut_off_radius;
 1090 :   sp->x_diff[0] = s->x_diff[0];
 1091 :   sp->x_diff[1] = s->x_diff[1];
 1092 :   sp->x_diff[2] = s->x_diff[2];
 1108 :   sp->id = space_get_new_unique_id(e->s);
 1112 :   sp->gpart = gp;
 1116 :   gp->time_bin = sp->time_bin;
 1119 :   sp->mass = s->mass;
 1120 :   sp->x[0] = s->x[0];
 1121 :   sp->x[1] = s->x[1];
 1122 :   sp->x[2] = s->x[2];
 1123 :   sp->v[0] = s->v[0];
 1124 :   sp->v[1] = s->v[1];
 1125 :   sp->v[2] = s->v[2];
 1128 :   sp->ti_kick = s->ti_kick;
 1129 :   sp->ti_drift = s->ti_drift;
 1133 :   sp->h = s->r_cut;
./cell_drift.c:
  666 :       if (fabs(sp->v[0] * dt_drift) > e->s->dim[0] ||
  667 :           fabs(sp->v[1] * dt_drift) > e->s->dim[1] ||
  668 :           fabs(sp->v[2] * dt_drift) > e->s->dim[2]) {
  677 :         if ((sp->x[0] > dim[0]) || (sp->x[0] < 0.) ||  // x
  678 :             (sp->x[1] > dim[1]) || (sp->x[1] < 0.) ||  // y
  679 :             (sp->x[2] > dim[2]) || (sp->x[2] < 0.)) {  // z
  707 :       sp->h = min(sp->h, stars_h_max);
  708 :       sp->h = max(sp->h, stars_h_min);
  711 :       const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  712 :                         sp->x_diff[1] * sp->x_diff[1] +
  713 :                         sp->x_diff[2] * sp->x_diff[2];
  716 :       const float dx2_sort = sp->x_diff_sort[0] * sp->x_diff_sort[0] +
  717 :                              sp->x_diff_sort[1] * sp->x_diff_sort[1] +
  718 :                              sp->x_diff_sort[2] * sp->x_diff_sort[2];
  723 :       cell_h_max = max(cell_h_max, sp->h);
  732 :         cell_h_max_active = max(cell_h_max_active, sp->h);
 1094 :       /* sp->h does not need to be limited. */
./cell_unskip.c:
  864 :       for (int k = 0; k < csp->count; k++) {
  865 :         const int pid = csp->pairs[k].pid;
  866 :         const int pjd = csp->pairs[k].pjd;
  994 :       for (int k = 0; k < csp->count; k++) {
  995 :         const int pid = csp->pairs[k].pid;
  996 :         const int pjd = csp->pairs[k].pjd;
 1120 :       for (int k = 0; k < csp->count; k++) {
 1121 :         const int pid = csp->pairs[k].pid;
 1122 :         const int pjd = csp->pairs[k].pjd;
 1225 :       for (int k = 0; k < csp->count; k++) {
 1226 :         const int pid = csp->pairs[k].pid;
 1227 :         const int pjd = csp->pairs[k].pjd;
 1298 :   const struct engine *e = sp->e;
 1523 :   const struct engine *e = sp->e;
 1605 :       for (int k = 0; k < csp->count; k++) {
 1606 :         const int pid = csp->pairs[k].pid;
 1607 :         const int pjd = csp->pairs[k].pjd;
./chemistry/AGORA/chemistry.h:
   69 :     sp->chemistry_data.metal_mass_fraction[i] =
   73 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  297 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  449 :   return sp->chemistry_data
  465 :   return sp->chemistry_data.metal_mass_fraction;
  554 :   return sp->chemistry_data
  556 :          sp->mass;
./chemistry/EAGLE/chemistry.h:
  193 :     sp->chemistry_data.metal_mass_fraction_total =
  197 :       sp->chemistry_data.metal_mass_fraction[elem] =
  203 :     sp->chemistry_data.smoothed_metal_mass_fraction_total =
  207 :       sp->chemistry_data.smoothed_metal_mass_fraction[elem] =
  517 :   return sp->chemistry_data.smoothed_metal_mass_fraction_total;
  532 :   return sp->chemistry_data.smoothed_metal_mass_fraction;
  615 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  640 :   return sp->chemistry_data.metal_mass_fraction_total;
./chemistry/GEAR/chemistry.h:
   55 :     sp->chemistry_data.metal_mass_fraction[i] =
   59 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  429 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  549 :   return sp->chemistry_data
  564 :   return sp->chemistry_data.metal_mass_fraction[0];
  577 :   return sp->chemistry_data.metal_mass_fraction;
  654 :   return sp->chemistry_data
  656 :          sp->mass;
./chemistry/GEAR_DIFFUSION/chemistry.h:
   56 :     sp->chemistry_data.metal_mass_fraction[i] =
   60 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  416 :     sp->chemistry_data.metal_mass_fraction[i] =
  417 :         data->initial_metallicities[i] * sp->mass;
  487 :   return sp->chemistry_data
  501 :   return sp->chemistry_data.metal_mass_fraction;
  590 :   return sp->chemistry_data
  592 :          sp->mass;
./chemistry/KIARA/chemistry.h:
  254 :     sp->chemistry_data.metal_mass_fraction_total =
  258 :       sp->chemistry_data.metal_mass_fraction[elem] =
  601 :   return sp->chemistry_data.metal_mass_fraction_total;
  616 :   return sp->chemistry_data.metal_mass_fraction;
  699 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  724 :   return sp->chemistry_data.metal_mass_fraction_total;
./chemistry/SIMBA/chemistry.h:
  158 :     sp->chemistry_data.metal_mass_fraction_total =
  162 :       sp->chemistry_data.metal_mass_fraction[elem] =
  467 :   return sp->chemistry_data.metal_mass_fraction_total;
  482 :   return sp->chemistry_data.metal_mass_fraction;
  565 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  590 :   return sp->chemistry_data.metal_mass_fraction_total;
./csds.c:
  100 :     if (!spart_is_inhibited(sp, e) && sp->time_bin != time_bin_not_created) {
./debug.c:
  395 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  396 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  397 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  402 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  408 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  409 :                       sp->x_diff[1] * sp->x_diff[1] +
  410 :                       sp->x_diff[2] * sp->x_diff[2];
  412 :     stars_h_max = max(stars_h_max, sp->h);
  422 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  423 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  424 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  429 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  435 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  436 :                       sp->x_diff[1] * sp->x_diff[1] +
  437 :                       sp->x_diff[2] * sp->x_diff[2];
  439 :     sinks_h_max = max(sinks_h_max, sp->r_cut);
./drift.h:
  248 :   if (sp->ti_drift != ti_old)
  251 :         "sp->ti_drift=%lld, "
  253 :         sp->ti_drift, ti_old, ti_current);
  255 :   sp->ti_drift = ti_current;
  261 :   const long long id = sp->id;
  267 :     sp->v[0] = 0.f;
  268 :     sp->v[1] = 0.f;
  269 :     sp->v[2] = 0.f;
  275 :   const double x[3] = {sp->x[0], sp->x[1], sp->x[2]};
  276 :   const float v_full[3] = {sp->v[0], sp->v[1], sp->v[2]};
  280 :   sp->x[0] += sp->v[0] * dt_drift;
  281 :   sp->x[1] += sp->v[1] * dt_drift;
  282 :   sp->x[2] += sp->v[2] * dt_drift;
  289 :     const float dx = sp->v[k] * dt_drift;
  290 :     sp->x_diff[k] -= dx;
  291 :     sp->x_diff_sort[k] -= dx;
  296 :   if (sp->gpart)
  297 :     lightcone_check_particle_crosses(e, replication_list, x, v_full, sp->gpart,
./engine_io.c:
  105 :           get_integer_time_begin(e->ti_current, sp->time_bin);
  112 :       if (e->ti_current - ti_begin == get_integer_timestep(sp->time_bin))
 1355 :             get_integer_time_begin(e->ti_current, sp->time_bin);
./engine_redistribute.c:
  755 :     if (sp->time_bin == time_bin_inhibited)
  758 :     if (sp->time_bin == time_bin_not_created)
  763 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
  764 :                    sp->x[2] * s->iwidth[2]);
  773 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
  774 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
  775 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
./engine_strays.c:
  519 :           sp->gpart = gp;
./feedback/AGORA/feedback.c:
  109 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  110 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  118 :     dt_star = get_timestep(sp->time_bin, time_base);
  124 :     if (cosmo->a > (double)sp->birth_scale_factor)
  126 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  130 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  163 :   if (sp->feedback_data.idle == 1) {
  164 :     sp->feedback_data.will_do_feedback = 0;
  176 :   sp->feedback_data.energy_ejected = 0;
  177 :   sp->feedback_data.will_do_feedback = 0;
  180 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  195 :   double NSN = sp->mass / phys_const->const_solar_mass *
  199 :   sp->feedback_data.energy_ejected = NSN * feedback_props->energy_per_CCSN;
  200 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  203 :   sp->feedback_data.mass_ejected = NSN * feedback_props->ejected_mass_per_CCSN;
  206 :   sp->feedback_data.metal_mass_ejected[0] =
  208 :   sp->feedback_data.metal_mass_ejected[AGORA_CHEMISTRY_ELEMENT_COUNT - 1] =
  212 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  215 :   sp->feedback_data.idle = 1;
  226 :   return sp->feedback_data.will_do_feedback;
  236 :   sp->feedback_data.enrichment_weight = 0.f;
  250 :   sp->feedback_data.energy_ejected = 0;
  253 :   sp->feedback_data.will_do_feedback = 1;
  256 :   sp->feedback_data.idle = 0;
  274 :   sp->feedback_data.energy_ejected = 0;
  277 :   sp->feedback_data.will_do_feedback = 1;
  280 :   sp->feedback_data.idle = 0;
  323 :   const float hi_inv = 1.f / sp->h;
  325 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
./feedback/EAGLE/enrichment.h:
   39 :   return props->num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  139 :   return num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
./feedback/EAGLE_kinetic/feedback.c:
  110 :   const double rho_birth = sp->birth_density;
  175 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  177 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  247 :             sp->id, i, ti_begin, random_number_stellar_feedback_2);
  277 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  281 :     sp->f_E = f_E;
  282 :     sp->feedback_data.to_distribute.SNII_E_kinetic = E_kinetic;
  283 :     sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj =
  312 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  322 :   const double M_init = sp->mass_init;
  335 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  336 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  337 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  338 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  343 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  350 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  353 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  366 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  369 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  407 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  411 :                 abundances, feedback_props, &sp->feedback_data);
  415 :                abundances, feedback_props, &sp->feedback_data);
  419 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  424 :   sp->feedback_data.to_distribute.mass =
  425 :       sp->feedback_data.to_distribute.total_metal_mass +
  426 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  427 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  430 :   sp->feedback_data.to_distribute.energy +=
  431 :       sp->feedback_data.to_distribute.mass *
  435 :   sp->feedback_data.to_distribute.energy +=
  436 :       sp->feedback_data.to_distribute.mass * 0.5f *
  437 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
./feedback/EAGLE_kinetic/feedback.h:
  104 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  127 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  128 :   sp->feedback_data.to_collect.ngb_N = 0;
  129 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  130 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  131 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  134 :   ray_init(sp->feedback_data.SNII_rays_true, eagle_SNII_feedback_num_of_rays);
  135 :   ray_init(sp->feedback_data.SNII_rays_mirr, eagle_SNII_feedback_num_of_rays);
  136 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_true,
  138 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_mirr,
  142 :   sp->has_done_feedback = 0;
  164 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  166 :     return time - (double)sp->last_enrichment_time;
  178 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  181 :   sp->feedback_data.to_distribute.mass = 0.f;
  185 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  187 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  188 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  189 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  190 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  191 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  192 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  193 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  194 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  197 :   sp->feedback_data.to_distribute.energy = 0.f;
  200 :   sp->feedback_data.to_distribute.SNII_E_kinetic = 0.f;
  203 :   sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj = 0;
  258 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  262 :   const float h = sp->h;
  266 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  267 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  268 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  276 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  280 :     sp->last_enrichment_time = cosmo->a;
  282 :     sp->last_enrichment_time = time;
  285 :   sp->has_done_feedback = 1;
  313 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  316 :       sp->count_since_last_enrichment = 0;
  322 :     if (sp->birth_time == (float)time) {
  325 :       sp->count_since_last_enrichment = 0;
  336 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  338 :     age_of_star = time - (double)sp->birth_time;
  345 :     sp->count_since_last_enrichment = 0;
  350 :     sp->count_since_last_enrichment++;
  352 :     if ((sp->count_since_last_enrichment %
  356 :       sp->count_since_last_enrichment = 0;
./feedback/EAGLE_thermal/feedback.c:
  124 :   const double rho_birth = sp->birth_density;
  207 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  209 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  255 :             sp->id, i, ti_begin, random_number_stellar_feedback_3);
  271 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  287 :     double star_f_E = sp->f_E * sp->number_of_SNII_events;
  290 :     star_f_E = (star_f_E + f_E) / (sp->number_of_SNII_events + 1.);
  293 :     sp->f_E = star_f_E;
  294 :     sp->number_of_SNII_events++;
  295 :     sp->feedback_data.to_distribute.SNII_delta_u = delta_u;
  296 :     sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj =
  325 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  335 :   const double M_init = sp->mass_init;
  348 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  349 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  350 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  351 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  356 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  363 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  366 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  379 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  382 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  420 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  424 :                 abundances, feedback_props, &sp->feedback_data);
  428 :                abundances, feedback_props, &sp->feedback_data);
  432 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  437 :   sp->feedback_data.to_distribute.mass =
  438 :       sp->feedback_data.to_distribute.total_metal_mass +
  439 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  440 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  443 :   sp->feedback_data.to_distribute.energy +=
  444 :       sp->feedback_data.to_distribute.mass *
  448 :   sp->feedback_data.to_distribute.energy +=
  449 :       sp->feedback_data.to_distribute.mass * 0.5f *
  450 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
./feedback/EAGLE_thermal/feedback.h:
  103 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  126 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  127 :   sp->feedback_data.to_collect.ngb_N = 0;
  128 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  129 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  130 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  133 :   ray_init(sp->feedback_data.SNII_rays, eagle_SNII_feedback_num_of_rays);
  136 :   sp->has_done_feedback = 0;
  158 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  160 :     return time - sp->last_enrichment_time;
  172 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  175 :   sp->feedback_data.to_distribute.mass = 0.f;
  179 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  181 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  182 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  183 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  184 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  185 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  186 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  187 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  188 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  191 :   sp->feedback_data.to_distribute.energy = 0.f;
  194 :   sp->feedback_data.to_distribute.SNII_delta_u = 0.f;
  197 :   sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj = 0;
  252 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  256 :   const float h = sp->h;
  260 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  261 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  262 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  270 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  274 :     sp->last_enrichment_time = cosmo->a;
  276 :     sp->last_enrichment_time = time;
  279 :   sp->has_done_feedback = 1;
  307 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  310 :       sp->count_since_last_enrichment = 0;
  316 :     if (sp->birth_time == (float)time) {
  319 :       sp->count_since_last_enrichment = 0;
  330 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  332 :     age_of_star = time - (double)sp->birth_time;
  339 :     sp->count_since_last_enrichment = 0;
  344 :     sp->count_since_last_enrichment++;
  346 :     if ((sp->count_since_last_enrichment %
  350 :       sp->count_since_last_enrichment = 0;
./feedback/GEAR/feedback.c:
  169 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  170 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  178 :     dt_star = get_timestep(sp->time_bin, time_base);
  184 :     if (cosmo->a > (double)sp->birth_scale_factor)
  186 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  190 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  230 :   sp->feedback_data.energy_ejected = 0;
  231 :   sp->feedback_data.will_do_feedback = 0;
  234 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  258 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  261 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  272 :   return sp->feedback_data.will_do_feedback;
  302 :   sp->feedback_data.enrichment_weight = 0.f;
  316 :   sp->feedback_data.energy_ejected = 0;
  319 :   sp->feedback_data.will_do_feedback = 1;
  346 :   sp->feedback_data.energy_ejected = 0;
  349 :   sp->feedback_data.will_do_feedback = 1;
  392 :   const float hi_inv = 1.f / sp->h;
  394 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
./feedback/GEAR/stellar_evolution.c:
   74 :   const float rand_sn = random_unit_interval(sp->id, ti_begin, random_type);
  121 :   sp->feedback_data.mass_ejected = mass_frac_snii * sp->sf_data.birth_mass +
  125 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  127 :     message("Negative mass, skipping current star: %lli", sp->id);
  129 :     sp->feedback_data.number_snia = 0;
  130 :     sp->feedback_data.number_snii = 0;
  131 :     sp->feedback_data.mass_ejected = 0;
  136 :   sp->mass -= sp->feedback_data.mass_ejected;
  156 :     sp->feedback_data.metal_mass_ejected[i] =
  164 :     sp->feedback_data.metal_mass_ejected[i] *= sp->sf_data.birth_mass;
  167 :     sp->feedback_data.metal_mass_ejected[i] +=
  212 :   sp->feedback_data.mass_ejected = mass_snia + mass_snii;
  215 :   sp->feedback_data.mass_ejected *= phys_const->const_solar_mass;
  218 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  220 :     message("Negative mass, skipping current star: %lli", sp->id);
  222 :     sp->feedback_data.number_snia = 0;
  223 :     sp->feedback_data.number_snii = 0;
  224 :     sp->feedback_data.mass_ejected = 0;
  229 :   sp->mass -= sp->feedback_data.mass_ejected;
  247 :     sp->feedback_data.metal_mass_ejected[i] =
  255 :     sp->feedback_data.metal_mass_ejected[i] *= m_avg * number_snii;
  258 :     sp->feedback_data.metal_mass_ejected[i] += snia_yields[i] * number_snia;
  261 :     sp->feedback_data.metal_mass_ejected[i] *= phys_const->const_solar_mass;
  331 :   const float m_init = sp->sf_data.birth_mass / phys_const->const_solar_mass;
  366 :     sp->feedback_data.number_snia = number_snia;
  367 :     sp->feedback_data.number_snii = number_snii;
  376 :     sp->feedback_data.number_snia = number_snia_f;
  377 :     sp->feedback_data.number_snii = number_snii_f;
  393 :   sp->feedback_data.energy_ejected = 0;
  397 :   sp->feedback_data.energy_ejected +=
  398 :       sp->feedback_data.number_snia * snia_energy;
  404 :   sp->feedback_data.energy_ejected +=
  405 :       sp->feedback_data.number_snii * snii_energy;
./feedback/KIARA/feedback.c:
   96 :   double logmass6 = log10(sp->mass * fb_props->mass_to_solar_mass * 1.e-6); 
   99 :   double z = sp->chemistry_data.metal_mass_fraction_total;
  183 :   for (k=0; k<chemistry_element_count; k++) sp->feedback_data.delta_dust_mass[k]=0.f;
  187 :     sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->delta_AGBCOG1[chemistry_element_C] * 
  190 :     if (sp->feedback_data.delta_dust_mass[chemistry_element_C] > fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C])
  191 :             sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C];
  193 :     delta_metal_mass[chemistry_element_C] -= sp->feedback_data.delta_dust_mass[chemistry_element_C];
  202 :         sp->feedback_data.delta_dust_mass[k] = 16.0 * (delta_table[chemistry_element_Mg] * delta_metal_mass[chemistry_element_Mg] / 24.305 
  209 :         sp->feedback_data.delta_dust_mass[k] = delta_table[k] * delta_metal_mass[k];
  211 :       if (sp->feedback_data.delta_dust_mass[k] > fb_props->max_dust_fraction * delta_metal_mass[k])
  212 :             sp->feedback_data.delta_dust_mass[k] = fb_props->max_dust_fraction * delta_metal_mass[k];
  213 :       delta_metal_mass[k] -= sp->feedback_data.delta_dust_mass[k];
  261 :   if (sp->mass_init == sp->mass) fb_first = 1;
  263 :   z = sp->chemistry_data.metal_mass_fraction_total;
  272 :     feh = sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H];
  777 :   *ejecta_unprocessed = max(0.f, sp->mass_init * SNII_U);
  778 :   *ejecta_mass = max(0.f, sp->mass_init * SNII_E);
  793 :       SWn = sp->mass_init * SW_R;
  804 :       SWn = sp->mass_init * SW_R;
  805 :       SNn = sp->mass_init * SNII_R;
  808 :         *ejecta_energy += sp->mass_init * SNII_ENE;
  815 :       ejecta_metal_mass[k] = sp->mass_init * SNII_Z[k];
  824 :         SNn = sp->mass_init * SNIa_R;
  840 : /*    if (sp->id == 3554000 ) message("Star %lld with m=%g (frac=%g), age=%g Myr, Z=%g is ejecting %g Msun (fIa=%g, Zej=%g) and %g erg in %g Myr.",
  841 :           sp->id,
  842 :           sp->mass * fb_props->mass_to_solar_mass,
  843 :           sp->mass/sp->mass_init,
./feedback/KIARA/feedback.h:
  215 :   sp->feedback_data.enrichment_weight_inv = 0.f;
  216 :   sp->feedback_data.ngb_N = 0;
  217 :   sp->feedback_data.ngb_mass = 0.f;
  218 :   sp->feedback_data.ngb_rho = 0.f;
  219 :   sp->feedback_data.ngb_Z = 0.f;
  221 :   sp->has_done_feedback = 0;
  264 :   sp->feedback_data.enrichment_weight = 0.f;
  267 :   sp->feedback_data.mass = 0.f;
  271 :     sp->feedback_data.metal_mass[i] = 0.f;
  273 :     sp->feedback_data.delta_dust_mass[i] = 0.f;
  276 :   sp->feedback_data.total_metal_mass = 0.f;
  279 :   sp->feedback_data.energy = 0.f;
  321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  349 :       sp->gpart->fof_data.group_stellar_mass;
  355 :       sp->gpart->fof_data.group_mass;
  364 :   const double rand_for_scatter = random_unit_interval(sp->id, ti_current,
  405 :   if (sp->feedback_data.ngb_rho <= 0.) {
  406 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  411 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  415 :   const float h = sp->h;
  419 :   sp->feedback_data.ngb_rho *= h_inv_dim;
  421 :   const float rho_inv = 1.f / sp->feedback_data.ngb_rho;
  422 :   sp->feedback_data.ngb_Z *= h_inv_dim * rho_inv;
  427 :   if (sp->feedback_data.ngb_rho <= 0) {
  429 :             sp->id, sp->mass);
  436 :   if (sp->feedback_data.ngb_rho <= 0)
  438 :             sp->id, sp->mass);
  439 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  444 :   const float ngb_gas_mass = sp->feedback_data.ngb_mass;
  447 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  454 :       sp->feedback_data.enrichment_weight_inv;
  457 :   if (sp->feedback_data.enrichment_weight_inv < 0.)
  464 :   sp->feedback_data.enrichment_weight = enrichment_weight;
  467 :   if (sp->feedback_data.enrichment_weight < 0.)
  474 :      sp->feedback_data.feedback_mass_to_launch = eta * sp->mass;
  475 :      sp->feedback_data.feedback_wind_velocity = feedback_compute_kick_velocity(sp, cosmo, feedback_props, ti_begin);
  480 :   //sp->feedback_data.lum_habing = feedback_get_lum_from_star_particle(sp, star_age_beg_step, feedback_props);
  481 :   //message("G0: age %g  Lhabing %g\n",star_age_beg_step*feedback_props->time_to_Myr, sp->feedback_data.lum_habing);
  485 :   sp->feedback_data.mass = 0.f;
  489 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  515 :     message("[Fe/H] = %g", sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H]);
  516 :     message("Z = %g", sp->chemistry_data.metal_mass_fraction_total);
  519 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  524 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  529 :   if (sp->mass-ejecta_mass < 0.2 * sp->mass_init) {
  531 :           sp->id, sp->mass, ejecta_mass);
  546 :     dum = ejecta_unprocessed * sp->chemistry_data.metal_mass_fraction[elem];
  572 :   sp->feedback_data.total_metal_mass = 0.f;
  574 :     sp->feedback_data.metal_mass[elem] = ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  578 :       sp->feedback_data.total_metal_mass += ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  583 :     if (sp->mass/sp->mass_init<0.2) message("Star particle %lld with mass %g (init %g) is giving away %g Msun and %g erg (%g Msun metals).",
  584 :           sp->id, 
  585 :           sp->mass, 
  586 :           sp->mass_init, 
  589 :           sp->feedback_data.total_metal_mass * feedback_props->mass_to_solar_mass);
  594 :   if (sp->feedback_data.total_metal_mass > 0.f) {
  596 :                                          sp->feedback_data.metal_mass);
  601 :   sp->feedback_data.mass = ejecta_mass;
  605 :   //sp->feedback_data.energy = ejecta_energy;
  608 :   sp->feedback_data.feedback_energy_reservoir += ejecta_energy;
  611 :   sp->mass -= ejecta_mass;
  614 :   sp->last_enrichment_time = cosmo->a;
  618 :   sp->feedback_data.SNe_ThisTimeStep = N_SNe;
  622 :   sp->has_done_feedback = 1;
./feedback/SIMBA/feedback.c:
  344 :   if (sp->feedback_data.to_collect.ngb_rho <= 0) {
  346 :             sp->id, sp->mass);
  353 :   if (sp->feedback_data.to_collect.ngb_rho <= 0)
  355 :             sp->id, sp->mass);
  356 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  366 :   const double M_init = sp->mass_init;
  379 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  382 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  389 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  392 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  405 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  408 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  439 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  443 :                 abundances, feedback_props, &sp->feedback_data);
  447 :                abundances, feedback_props, &sp->feedback_data);
  451 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  456 :   sp->feedback_data.to_distribute.mass =
  457 :       sp->feedback_data.to_distribute.total_metal_mass +
  458 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  459 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  462 :   sp->feedback_data.to_distribute.energy +=
  463 :       sp->feedback_data.to_distribute.mass *
  467 :   sp->feedback_data.to_distribute.energy +=
  468 :       sp->feedback_data.to_distribute.mass * 0.5f *
  469 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
./feedback/SIMBA/feedback.h:
  176 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  199 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  200 :   sp->feedback_data.to_collect.ngb_N = 0;
  201 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  202 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  203 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  205 :   sp->has_done_feedback = 0;
  241 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  243 :     return time - (double)sp->last_enrichment_time;
  255 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  258 :   sp->feedback_data.to_distribute.mass = 0.f;
  262 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  264 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  265 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  266 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  267 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  268 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  269 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  270 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  271 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  274 :   sp->feedback_data.to_distribute.energy = 0.f;
  330 :   if (sp->feedback_data.to_collect.ngb_rho <= 0.) {
  331 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  336 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  340 :   const float h = sp->h;
  344 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  346 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  347 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  355 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  359 :     sp->last_enrichment_time = cosmo->a;
  361 :     sp->last_enrichment_time = time;
  364 :   sp->has_done_feedback = 1;
  392 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  395 :       sp->count_since_last_enrichment = 0;
  401 :     if (sp->birth_time == (float)time) {
  404 :       sp->count_since_last_enrichment = 0;
  415 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  417 :     age_of_star = time - (double)sp->birth_time;
  424 :     sp->count_since_last_enrichment = 0;
  429 :     sp->count_since_last_enrichment++;
  431 :     if ((sp->count_since_last_enrichment %
  435 :       sp->count_since_last_enrichment = 0;
./feedback/SIMBA_alexei/feedback.h:
   41 :   const float v_circ = pow(sp->feedback_data.host_galaxy_mass /
   44 :   const float sigma = sqrtf(sp->potential * cosmo->a_inv);
   48 :   sp->feedback_data.to_distribute.v_kick =
   59 :   sp->feedback_data.to_distribute.v_kick =
  121 :   return (sp->birth_time != -1.);
  132 :   sp->feedback_data.host_galaxy_mass = 1.;
  153 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  155 :     return time - (double)sp->last_enrichment_time;
  177 :   sp->feedback_data.to_distribute.simba_delay_time =
  218 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  232 :     sp->last_enrichment_time = cosmo->a;
  234 :     sp->last_enrichment_time = time;
  237 :   sp->has_done_feedback = 1;
./fof.c:
 3629 :   sp->gpart->fof_data.is_grouppable = 1;
 3671 :   if (sp->gpart != gp) error("Copying group properties to the wrong star!");
 3674 :   sp->group_data.mass = gp->fof_data.group_mass;
 3675 :   sp->group_data.stellar_mass = gp->fof_data.group_stellar_mass;
 3677 :     sp->group_data.ssfr = gp->fof_data.group_sfr / gp->fof_data.group_stellar_mass;
 3679 :     sp->group_data.ssfr = 0.f;
./fof_data.group_stellar_mass:
    2 :   438 :   const timebin_t spart_bin = sp->time_bin;
    3 :   442 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
    4 :   446 :         "s-particle in an impossible time-zone! sp->ti_end=%lld "
    5 :   541 :   return sp->time_bin == time_bin_inhibited;
    6 :   747 :   const timebin_t spart_bin = sp->time_bin;
    7 :   752 :       get_integer_time_begin(ti_current + 1, sp->time_bin);
    8 :   756 :         "s-particle in an impossible time-zone! sp->ti_beg=%lld "
   10 :  1353 :     if ((sp->x[0] < c->loc[0] / space_stretch) ||
   11 :  1354 :         (sp->x[1] < c->loc[1] / space_stretch) ||
   12 :  1355 :         (sp->x[2] < c->loc[2] / space_stretch) ||
   13 :  1356 :         (sp->x[0] >= (c->loc[0] + c->width[0]) * space_stretch) ||
   14 :  1357 :         (sp->x[1] >= (c->loc[1] + c->width[1]) * space_stretch) ||
   15 :  1358 :         (sp->x[2] >= (c->loc[2] + c->width[2]) * space_stretch))
   16 :  1361 :     if (sp->time_bin != time_bin_not_created &&
   17 :  1362 :         sp->time_bin != time_bin_inhibited) {
   18 :  1363 :       const struct gpart *gp = sp->gpart;
   19 :  1364 :       if (gp == NULL && sp->time_bin != time_bin_not_created)
   21 :   255 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
   22 :   256 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
   23 :   257 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
   24 :   260 :   sp->time_bin = e->min_active_bin;
   25 :   264 :   sp->ti_drift = e->ti_current;
   26 :   388 :   sp->x[0] = c->loc[0] + 0.5 * c->width[0];
   27 :   389 :   sp->x[1] = c->loc[1] + 0.5 * c->width[1];
   28 :   390 :   sp->x[2] = c->loc[2] + 0.5 * c->width[2];
   29 :   393 :   sp->time_bin = e->min_active_bin;
   30 :   397 :   sp->ti_drift = e->ti_current;
   31 :   642 :   if (sp->time_bin == time_bin_inhibited) return;
   32 :   645 :   sp->time_bin = time_bin_inhibited;
   33 :   646 :   if (sp->gpart) {
   34 :   647 :     sp->gpart->time_bin = time_bin_inhibited;
   35 :   648 :     sp->gpart->id_or_neg_offset = sp->id;
   36 :   649 :     sp->gpart->type = swift_type_dark_matter;
   37 :   655 :   if (sp->gpart) {
   38 :   660 :   sp->gpart = NULL;
   39 :   813 :   if (sp->gpart == NULL)
   40 :   817 :   struct gpart *gp = sp->gpart;
   41 :   820 :   sp->time_bin = time_bin_inhibited;
   42 :   823 :   sp->gpart = NULL;
   43 :   827 :   gp->id_or_neg_offset = sp->id;
   44 :   830 :   gp->ti_kick = sp->ti_kick;
   45 :   873 :   sp->x_diff[0] = xp->x_diff[0];
   46 :   874 :   sp->x_diff[1] = xp->x_diff[1];
   47 :   875 :   sp->x_diff[2] = xp->x_diff[2];
   48 :   881 :   sp->id = gp->id_or_neg_offset;
   49 :   885 :   sp->gpart = gp;
   50 :   889 :   gp->time_bin = sp->time_bin;
   51 :   892 :   sp->mass = gp->mass;
   52 :   893 :   sp->x[0] = gp->x[0];
   53 :   894 :   sp->x[1] = gp->x[1];
   54 :   895 :   sp->x[2] = gp->x[2];
   55 :   896 :   sp->v[0] = gp->v_full[0];
   56 :   897 :   sp->v[1] = gp->v_full[1];
   57 :   898 :   sp->v[2] = gp->v_full[2];
   58 :   901 :   sp->ti_kick = gp->ti_kick;
   59 :   902 :   gp->ti_drift = sp->ti_drift;
   60 :   906 :   sp->h = p->h;
   61 :   941 :   sp->x_diff[0] = xp->x_diff[0];
   62 :   942 :   sp->x_diff[1] = xp->x_diff[1];
   63 :   943 :   sp->x_diff[2] = xp->x_diff[2];
   64 :   959 :   sp->id = space_get_new_unique_id(e->s);
   65 :   963 :   sp->gpart = gp;
   66 :   967 :   gp->time_bin = sp->time_bin;
   67 :   970 :   sp->mass = hydro_get_mass(p);
   68 :   971 :   sp->x[0] = p->x[0];
   69 :   972 :   sp->x[1] = p->x[1];
   70 :   973 :   sp->x[2] = p->x[2];
   71 :   974 :   sp->v[0] = p->v_full[0];
   72 :   975 :   sp->v[1] = p->v_full[1];
   73 :   976 :   sp->v[2] = p->v_full[2];
   74 :   979 :   sp->ti_kick = p->ti_kick;
   75 :   980 :   sp->ti_drift = p->ti_drift;
   76 :   984 :   sp->h = p->h;
   77 :  1024 :   sp->x_diff[0] = xp->x_diff[0];
   78 :  1025 :   sp->x_diff[1] = xp->x_diff[1];
   79 :  1026 :   sp->x_diff[2] = xp->x_diff[2];
   80 :  1032 :   sp->id = p->id;
   81 :  1036 :   sp->gpart = gp;
   82 :  1040 :   gp->time_bin = sp->time_bin;
   83 :  1043 :   sp->mass = gp->mass;
   84 :  1044 :   sp->x[0] = gp->x[0];
   85 :  1045 :   sp->x[1] = gp->x[1];
   86 :  1046 :   sp->x[2] = gp->x[2];
   87 :  1047 :   sp->v[0] = gp->v_full[0];
   88 :  1048 :   sp->v[1] = gp->v_full[1];
   89 :  1049 :   sp->v[2] = gp->v_full[2];
   90 :  1052 :   sp->ti_kick = gp->ti_kick;
   91 :  1053 :   gp->ti_drift = sp->ti_drift;
   92 :  1057 :   sp->r_cut = e->sink_properties->cut_off_radius;
   93 :  1090 :   sp->x_diff[0] = s->x_diff[0];
   94 :  1091 :   sp->x_diff[1] = s->x_diff[1];
   95 :  1092 :   sp->x_diff[2] = s->x_diff[2];
   96 :  1108 :   sp->id = space_get_new_unique_id(e->s);
   97 :  1112 :   sp->gpart = gp;
   98 :  1116 :   gp->time_bin = sp->time_bin;
   99 :  1119 :   sp->mass = s->mass;
  100 :  1120 :   sp->x[0] = s->x[0];
  101 :  1121 :   sp->x[1] = s->x[1];
  102 :  1122 :   sp->x[2] = s->x[2];
  103 :  1123 :   sp->v[0] = s->v[0];
  104 :  1124 :   sp->v[1] = s->v[1];
  105 :  1125 :   sp->v[2] = s->v[2];
  106 :  1128 :   sp->ti_kick = s->ti_kick;
  107 :  1129 :   sp->ti_drift = s->ti_drift;
  108 :  1133 :   sp->h = s->r_cut;
  110 :   666 :       if (fabs(sp->v[0] * dt_drift) > e->s->dim[0] ||
  111 :   667 :           fabs(sp->v[1] * dt_drift) > e->s->dim[1] ||
  112 :   668 :           fabs(sp->v[2] * dt_drift) > e->s->dim[2]) {
  113 :   677 :         if ((sp->x[0] > dim[0]) || (sp->x[0] < 0.) ||  // x
  114 :   678 :             (sp->x[1] > dim[1]) || (sp->x[1] < 0.) ||  // y
  115 :   679 :             (sp->x[2] > dim[2]) || (sp->x[2] < 0.)) {  // z
  116 :   707 :       sp->h = min(sp->h, stars_h_max);
  117 :   708 :       sp->h = max(sp->h, stars_h_min);
  118 :   711 :       const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  119 :   712 :                         sp->x_diff[1] * sp->x_diff[1] +
  120 :   713 :                         sp->x_diff[2] * sp->x_diff[2];
  121 :   716 :       const float dx2_sort = sp->x_diff_sort[0] * sp->x_diff_sort[0] +
  122 :   717 :                              sp->x_diff_sort[1] * sp->x_diff_sort[1] +
  123 :   718 :                              sp->x_diff_sort[2] * sp->x_diff_sort[2];
  124 :   723 :       cell_h_max = max(cell_h_max, sp->h);
  125 :   732 :         cell_h_max_active = max(cell_h_max_active, sp->h);
  126 :  1094 :       /* sp->h does not need to be limited. */
  128 :   864 :       for (int k = 0; k < csp->count; k++) {
  129 :   865 :         const int pid = csp->pairs[k].pid;
  130 :   866 :         const int pjd = csp->pairs[k].pjd;
  131 :   994 :       for (int k = 0; k < csp->count; k++) {
  132 :   995 :         const int pid = csp->pairs[k].pid;
  133 :   996 :         const int pjd = csp->pairs[k].pjd;
  134 :  1120 :       for (int k = 0; k < csp->count; k++) {
  135 :  1121 :         const int pid = csp->pairs[k].pid;
  136 :  1122 :         const int pjd = csp->pairs[k].pjd;
  137 :  1225 :       for (int k = 0; k < csp->count; k++) {
  138 :  1226 :         const int pid = csp->pairs[k].pid;
  139 :  1227 :         const int pjd = csp->pairs[k].pjd;
  140 :  1298 :   const struct engine *e = sp->e;
  141 :  1523 :   const struct engine *e = sp->e;
  142 :  1605 :       for (int k = 0; k < csp->count; k++) {
  143 :  1606 :         const int pid = csp->pairs[k].pid;
  144 :  1607 :         const int pjd = csp->pairs[k].pjd;
  146 :    69 :     sp->chemistry_data.metal_mass_fraction[i] =
  147 :    73 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  148 :   297 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  149 :   449 :   return sp->chemistry_data
  150 :   465 :   return sp->chemistry_data.metal_mass_fraction;
  151 :   554 :   return sp->chemistry_data
  152 :   556 :          sp->mass;
  154 :   193 :     sp->chemistry_data.metal_mass_fraction_total =
  155 :   197 :       sp->chemistry_data.metal_mass_fraction[elem] =
  156 :   203 :     sp->chemistry_data.smoothed_metal_mass_fraction_total =
  157 :   207 :       sp->chemistry_data.smoothed_metal_mass_fraction[elem] =
  158 :   517 :   return sp->chemistry_data.smoothed_metal_mass_fraction_total;
  159 :   532 :   return sp->chemistry_data.smoothed_metal_mass_fraction;
  160 :   615 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  161 :   640 :   return sp->chemistry_data.metal_mass_fraction_total;
  163 :    55 :     sp->chemistry_data.metal_mass_fraction[i] =
  164 :    59 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  165 :   429 :     sp->chemistry_data.metal_mass_fraction[i] = data->initial_metallicities[i];
  166 :   549 :   return sp->chemistry_data
  167 :   564 :   return sp->chemistry_data.metal_mass_fraction[0];
  168 :   577 :   return sp->chemistry_data.metal_mass_fraction;
  169 :   654 :   return sp->chemistry_data
  170 :   656 :          sp->mass;
  172 :    56 :     sp->chemistry_data.metal_mass_fraction[i] =
  173 :    60 :     p->chemistry_data.metal_mass[i] *= mass / (mass + sp->mass);
  174 :   416 :     sp->chemistry_data.metal_mass_fraction[i] =
  175 :   417 :         data->initial_metallicities[i] * sp->mass;
  176 :   487 :   return sp->chemistry_data
  177 :   501 :   return sp->chemistry_data.metal_mass_fraction;
  178 :   590 :   return sp->chemistry_data
  179 :   592 :          sp->mass;
  181 :   254 :     sp->chemistry_data.metal_mass_fraction_total =
  182 :   258 :       sp->chemistry_data.metal_mass_fraction[elem] =
  183 :   601 :   return sp->chemistry_data.metal_mass_fraction_total;
  184 :   616 :   return sp->chemistry_data.metal_mass_fraction;
  185 :   699 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  186 :   724 :   return sp->chemistry_data.metal_mass_fraction_total;
  188 :   158 :     sp->chemistry_data.metal_mass_fraction_total =
  189 :   162 :       sp->chemistry_data.metal_mass_fraction[elem] =
  190 :   467 :   return sp->chemistry_data.metal_mass_fraction_total;
  191 :   482 :   return sp->chemistry_data.metal_mass_fraction;
  192 :   565 :   return sp->chemistry_data.metal_mass_fraction_total * sp->mass;
  193 :   590 :   return sp->chemistry_data.metal_mass_fraction_total;
  195 :   100 :     if (!spart_is_inhibited(sp, e) && sp->time_bin != time_bin_not_created) {
  197 :   395 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  198 :   396 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  199 :   397 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  200 :   402 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  201 :   408 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  202 :   409 :                       sp->x_diff[1] * sp->x_diff[1] +
  203 :   410 :                       sp->x_diff[2] * sp->x_diff[2];
  204 :   412 :     stars_h_max = max(stars_h_max, sp->h);
  205 :   422 :     if (sp->x[0] < loc_min[0] || sp->x[0] >= loc_max[0] ||
  206 :   423 :         sp->x[1] < loc_min[1] || sp->x[1] >= loc_max[1] ||
  207 :   424 :         sp->x[2] < loc_min[2] || sp->x[2] >= loc_max[2]) {
  208 :   429 :           sp->x[0], sp->x[1], sp->x[2], c->loc[0], c->loc[1], c->loc[2],
  209 :   435 :     const float dx2 = sp->x_diff[0] * sp->x_diff[0] +
  210 :   436 :                       sp->x_diff[1] * sp->x_diff[1] +
  211 :   437 :                       sp->x_diff[2] * sp->x_diff[2];
  212 :   439 :     sinks_h_max = max(sinks_h_max, sp->r_cut);
  214 :   248 :   if (sp->ti_drift != ti_old)
  215 :   251 :         "sp->ti_drift=%lld, "
  216 :   253 :         sp->ti_drift, ti_old, ti_current);
  217 :   255 :   sp->ti_drift = ti_current;
  218 :   261 :   const long long id = sp->id;
  219 :   267 :     sp->v[0] = 0.f;
  220 :   268 :     sp->v[1] = 0.f;
  221 :   269 :     sp->v[2] = 0.f;
  222 :   275 :   const double x[3] = {sp->x[0], sp->x[1], sp->x[2]};
  223 :   276 :   const float v_full[3] = {sp->v[0], sp->v[1], sp->v[2]};
  224 :   280 :   sp->x[0] += sp->v[0] * dt_drift;
  225 :   281 :   sp->x[1] += sp->v[1] * dt_drift;
  226 :   282 :   sp->x[2] += sp->v[2] * dt_drift;
  227 :   289 :     const float dx = sp->v[k] * dt_drift;
  228 :   290 :     sp->x_diff[k] -= dx;
  229 :   291 :     sp->x_diff_sort[k] -= dx;
  230 :   296 :   if (sp->gpart)
  231 :   297 :     lightcone_check_particle_crosses(e, replication_list, x, v_full, sp->gpart,
  233 :   105 :           get_integer_time_begin(e->ti_current, sp->time_bin);
  234 :   112 :       if (e->ti_current - ti_begin == get_integer_timestep(sp->time_bin))
  235 :  1355 :             get_integer_time_begin(e->ti_current, sp->time_bin);
  237 :   755 :     if (sp->time_bin == time_bin_inhibited)
  238 :   758 :     if (sp->time_bin == time_bin_not_created)
  239 :   763 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
  240 :   764 :                    sp->x[2] * s->iwidth[2]);
  241 :   773 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
  242 :   774 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
  243 :   775 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
  245 :   519 :           sp->gpart = gp;
  247 :   109 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  248 :   110 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  249 :   118 :     dt_star = get_timestep(sp->time_bin, time_base);
  250 :   124 :     if (cosmo->a > (double)sp->birth_scale_factor)
  251 :   126 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  252 :   130 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  253 :   163 :   if (sp->feedback_data.idle == 1) {
  254 :   164 :     sp->feedback_data.will_do_feedback = 0;
  255 :   176 :   sp->feedback_data.energy_ejected = 0;
  256 :   177 :   sp->feedback_data.will_do_feedback = 0;
  257 :   180 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  258 :   195 :   double NSN = sp->mass / phys_const->const_solar_mass *
  259 :   199 :   sp->feedback_data.energy_ejected = NSN * feedback_props->energy_per_CCSN;
  260 :   200 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  261 :   203 :   sp->feedback_data.mass_ejected = NSN * feedback_props->ejected_mass_per_CCSN;
  262 :   206 :   sp->feedback_data.metal_mass_ejected[0] =
  263 :   208 :   sp->feedback_data.metal_mass_ejected[AGORA_CHEMISTRY_ELEMENT_COUNT - 1] =
  264 :   212 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  265 :   215 :   sp->feedback_data.idle = 1;
  266 :   226 :   return sp->feedback_data.will_do_feedback;
  267 :   236 :   sp->feedback_data.enrichment_weight = 0.f;
  268 :   250 :   sp->feedback_data.energy_ejected = 0;
  269 :   253 :   sp->feedback_data.will_do_feedback = 1;
  270 :   256 :   sp->feedback_data.idle = 0;
  271 :   274 :   sp->feedback_data.energy_ejected = 0;
  272 :   277 :   sp->feedback_data.will_do_feedback = 1;
  273 :   280 :   sp->feedback_data.idle = 0;
  274 :   323 :   const float hi_inv = 1.f / sp->h;
  275 :   325 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
  277 :    39 :   return props->num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  278 :   139 :   return num_SNII_per_msun * sp->mass_init * props->mass_to_solar_mass;
  280 :   110 :   const double rho_birth = sp->birth_density;
  281 :   175 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  282 :   177 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  283 :   247 :             sp->id, i, ti_begin, random_number_stellar_feedback_2);
  284 :   277 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  285 :   281 :     sp->f_E = f_E;
  286 :   282 :     sp->feedback_data.to_distribute.SNII_E_kinetic = E_kinetic;
  287 :   283 :     sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj =
  288 :   312 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  289 :   322 :   const double M_init = sp->mass_init;
  290 :   335 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  291 :   336 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  292 :   337 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  293 :   338 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  294 :   343 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  295 :   350 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  296 :   353 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  297 :   366 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  298 :   369 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  299 :   407 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  300 :   411 :                 abundances, feedback_props, &sp->feedback_data);
  301 :   415 :                abundances, feedback_props, &sp->feedback_data);
  302 :   419 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  303 :   424 :   sp->feedback_data.to_distribute.mass =
  304 :   425 :       sp->feedback_data.to_distribute.total_metal_mass +
  305 :   426 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  306 :   427 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  307 :   430 :   sp->feedback_data.to_distribute.energy +=
  308 :   431 :       sp->feedback_data.to_distribute.mass *
  309 :   435 :   sp->feedback_data.to_distribute.energy +=
  310 :   436 :       sp->feedback_data.to_distribute.mass * 0.5f *
  311 :   437 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  313 :   104 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  314 :   127 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  315 :   128 :   sp->feedback_data.to_collect.ngb_N = 0;
  316 :   129 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  317 :   130 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  318 :   131 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  319 :   134 :   ray_init(sp->feedback_data.SNII_rays_true, eagle_SNII_feedback_num_of_rays);
  320 :   135 :   ray_init(sp->feedback_data.SNII_rays_mirr, eagle_SNII_feedback_num_of_rays);
  321 :   136 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_true,
  322 :   138 :   ray_extra_init(sp->feedback_data.SNII_rays_ext_mirr,
  323 :   142 :   sp->has_done_feedback = 0;
  324 :   164 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  325 :   166 :     return time - (double)sp->last_enrichment_time;
  326 :   178 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  327 :   181 :   sp->feedback_data.to_distribute.mass = 0.f;
  328 :   185 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  329 :   187 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  330 :   188 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  331 :   189 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  332 :   190 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  333 :   191 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  334 :   192 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  335 :   193 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  336 :   194 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  337 :   197 :   sp->feedback_data.to_distribute.energy = 0.f;
  338 :   200 :   sp->feedback_data.to_distribute.SNII_E_kinetic = 0.f;
  339 :   203 :   sp->feedback_data.to_distribute.SNII_num_of_kinetic_energy_inj = 0;
  340 :   258 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  341 :   262 :   const float h = sp->h;
  342 :   266 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  343 :   267 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  344 :   268 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  345 :   276 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  346 :   280 :     sp->last_enrichment_time = cosmo->a;
  347 :   282 :     sp->last_enrichment_time = time;
  348 :   285 :   sp->has_done_feedback = 1;
  349 :   313 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  350 :   316 :       sp->count_since_last_enrichment = 0;
  351 :   322 :     if (sp->birth_time == (float)time) {
  352 :   325 :       sp->count_since_last_enrichment = 0;
  353 :   336 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  354 :   338 :     age_of_star = time - (double)sp->birth_time;
  355 :   345 :     sp->count_since_last_enrichment = 0;
  356 :   350 :     sp->count_since_last_enrichment++;
  357 :   352 :     if ((sp->count_since_last_enrichment %
  358 :   356 :       sp->count_since_last_enrichment = 0;
  360 :   124 :   const double rho_birth = sp->birth_density;
  361 :   207 :     if (!SNII_sampled_delay && sp->f_E != -1.f) {
  362 :   209 :       message("Star has already done feedback! sp->id=%lld age=%e d=%e", sp->id,
  363 :   255 :             sp->id, i, ti_begin, random_number_stellar_feedback_3);
  364 :   271 :       error("f_E is not in the valid range! f_E=%f sp->id=%lld", f_E, sp->id);
  365 :   287 :     double star_f_E = sp->f_E * sp->number_of_SNII_events;
  366 :   290 :     star_f_E = (star_f_E + f_E) / (sp->number_of_SNII_events + 1.);
  367 :   293 :     sp->f_E = star_f_E;
  368 :   294 :     sp->number_of_SNII_events++;
  369 :   295 :     sp->feedback_data.to_distribute.SNII_delta_u = delta_u;
  370 :   296 :     sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj =
  371 :   325 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  372 :   335 :   const double M_init = sp->mass_init;
  373 :   348 :   const int ngb_Number = sp->feedback_data.to_collect.ngb_N;
  374 :   349 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  375 :   350 :   const float ngb_gas_Z = sp->feedback_data.to_collect.ngb_Z;
  376 :   351 :   const float ngb_gas_rho = sp->feedback_data.to_collect.ngb_rho;
  377 :   356 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  378 :   363 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  379 :   366 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  380 :   379 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  381 :   382 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  382 :   420 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  383 :   424 :                 abundances, feedback_props, &sp->feedback_data);
  384 :   428 :                abundances, feedback_props, &sp->feedback_data);
  385 :   432 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  386 :   437 :   sp->feedback_data.to_distribute.mass =
  387 :   438 :       sp->feedback_data.to_distribute.total_metal_mass +
  388 :   439 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  389 :   440 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  390 :   443 :   sp->feedback_data.to_distribute.energy +=
  391 :   444 :       sp->feedback_data.to_distribute.mass *
  392 :   448 :   sp->feedback_data.to_distribute.energy +=
  393 :   449 :       sp->feedback_data.to_distribute.mass * 0.5f *
  394 :   450 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
  396 :   103 :          ((sp->birth_time != -1.) && (sp->count_since_last_enrichment == 0));
  397 :   126 :   sp->feedback_data.to_collect.enrichment_weight_inv = 0.f;
  398 :   127 :   sp->feedback_data.to_collect.ngb_N = 0;
  399 :   128 :   sp->feedback_data.to_collect.ngb_mass = 0.f;
  400 :   129 :   sp->feedback_data.to_collect.ngb_rho = 0.f;
  401 :   130 :   sp->feedback_data.to_collect.ngb_Z = 0.f;
  402 :   133 :   ray_init(sp->feedback_data.SNII_rays, eagle_SNII_feedback_num_of_rays);
  403 :   136 :   sp->has_done_feedback = 0;
  404 :   158 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  405 :   160 :     return time - sp->last_enrichment_time;
  406 :   172 :   sp->feedback_data.to_distribute.enrichment_weight = 0.f;
  407 :   175 :   sp->feedback_data.to_distribute.mass = 0.f;
  408 :   179 :     sp->feedback_data.to_distribute.metal_mass[i] = 0.f;
  409 :   181 :   sp->feedback_data.to_distribute.total_metal_mass = 0.f;
  410 :   182 :   sp->feedback_data.to_distribute.mass_from_AGB = 0.f;
  411 :   183 :   sp->feedback_data.to_distribute.metal_mass_from_AGB = 0.f;
  412 :   184 :   sp->feedback_data.to_distribute.mass_from_SNII = 0.f;
  413 :   185 :   sp->feedback_data.to_distribute.metal_mass_from_SNII = 0.f;
  414 :   186 :   sp->feedback_data.to_distribute.mass_from_SNIa = 0.f;
  415 :   187 :   sp->feedback_data.to_distribute.metal_mass_from_SNIa = 0.f;
  416 :   188 :   sp->feedback_data.to_distribute.Fe_mass_from_SNIa = 0.f;
  417 :   191 :   sp->feedback_data.to_distribute.energy = 0.f;
  418 :   194 :   sp->feedback_data.to_distribute.SNII_delta_u = 0.f;
  419 :   197 :   sp->feedback_data.to_distribute.SNII_num_of_thermal_energy_inj = 0;
  420 :   252 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  421 :   256 :   const float h = sp->h;
  422 :   260 :   sp->feedback_data.to_collect.ngb_rho *= h_inv_dim;
  423 :   261 :   const float rho_inv = 1.f / sp->feedback_data.to_collect.ngb_rho;
  424 :   262 :   sp->feedback_data.to_collect.ngb_Z *= h_inv_dim * rho_inv;
  425 :   270 :   sp->mass -= sp->feedback_data.to_distribute.mass;
  426 :   274 :     sp->last_enrichment_time = cosmo->a;
  427 :   276 :     sp->last_enrichment_time = time;
  428 :   279 :   sp->has_done_feedback = 1;
  429 :   307 :     if (sp->birth_scale_factor == (float)cosmo->a) {
  430 :   310 :       sp->count_since_last_enrichment = 0;
  431 :   316 :     if (sp->birth_time == (float)time) {
  432 :   319 :       sp->count_since_last_enrichment = 0;
  433 :   330 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  434 :   332 :     age_of_star = time - (double)sp->birth_time;
  435 :   339 :     sp->count_since_last_enrichment = 0;
  436 :   344 :     sp->count_since_last_enrichment++;
  437 :   346 :     if ((sp->count_since_last_enrichment %
  438 :   350 :       sp->count_since_last_enrichment = 0;
  440 :   169 :   const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  441 :   170 :   *ti_begin_star = get_integer_time_begin(ti_current, sp->time_bin);
  442 :   178 :     dt_star = get_timestep(sp->time_bin, time_base);
  443 :   184 :     if (cosmo->a > (double)sp->birth_scale_factor)
  444 :   186 :           cosmo, (double)sp->birth_scale_factor, cosmo->a);
  445 :   190 :     star_age_end_of_step = max(time - (double)sp->birth_time, 0.);
  446 :   230 :   sp->feedback_data.energy_ejected = 0;
  447 :   231 :   sp->feedback_data.will_do_feedback = 0;
  448 :   234 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  449 :   258 :   sp->feedback_data.energy_ejected *= feedback_props->supernovae_efficiency;
  450 :   261 :   sp->feedback_data.will_do_feedback = sp->feedback_data.energy_ejected != 0.;
  451 :   272 :   return sp->feedback_data.will_do_feedback;
  452 :   302 :   sp->feedback_data.enrichment_weight = 0.f;
  453 :   316 :   sp->feedback_data.energy_ejected = 0;
  454 :   319 :   sp->feedback_data.will_do_feedback = 1;
  455 :   346 :   sp->feedback_data.energy_ejected = 0;
  456 :   349 :   sp->feedback_data.will_do_feedback = 1;
  457 :   392 :   const float hi_inv = 1.f / sp->h;
  458 :   394 :   sp->feedback_data.enrichment_weight *= hi_inv_dim;
  460 :    74 :   const float rand_sn = random_unit_interval(sp->id, ti_begin, random_type);
  461 :   121 :   sp->feedback_data.mass_ejected = mass_frac_snii * sp->sf_data.birth_mass +
  462 :   125 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  463 :   127 :     message("Negative mass, skipping current star: %lli", sp->id);
  464 :   129 :     sp->feedback_data.number_snia = 0;
  465 :   130 :     sp->feedback_data.number_snii = 0;
  466 :   131 :     sp->feedback_data.mass_ejected = 0;
  467 :   136 :   sp->mass -= sp->feedback_data.mass_ejected;
  468 :   156 :     sp->feedback_data.metal_mass_ejected[i] =
  469 :   164 :     sp->feedback_data.metal_mass_ejected[i] *= sp->sf_data.birth_mass;
  470 :   167 :     sp->feedback_data.metal_mass_ejected[i] +=
  471 :   212 :   sp->feedback_data.mass_ejected = mass_snia + mass_snii;
  472 :   215 :   sp->feedback_data.mass_ejected *= phys_const->const_solar_mass;
  473 :   218 :   const int negative_mass = sp->mass <= sp->feedback_data.mass_ejected;
  474 :   220 :     message("Negative mass, skipping current star: %lli", sp->id);
  475 :   222 :     sp->feedback_data.number_snia = 0;
  476 :   223 :     sp->feedback_data.number_snii = 0;
  477 :   224 :     sp->feedback_data.mass_ejected = 0;
  478 :   229 :   sp->mass -= sp->feedback_data.mass_ejected;
  479 :   247 :     sp->feedback_data.metal_mass_ejected[i] =
  480 :   255 :     sp->feedback_data.metal_mass_ejected[i] *= m_avg * number_snii;
  481 :   258 :     sp->feedback_data.metal_mass_ejected[i] += snia_yields[i] * number_snia;
  482 :   261 :     sp->feedback_data.metal_mass_ejected[i] *= phys_const->const_solar_mass;
  483 :   331 :   const float m_init = sp->sf_data.birth_mass / phys_const->const_solar_mass;
  484 :   366 :     sp->feedback_data.number_snia = number_snia;
  485 :   367 :     sp->feedback_data.number_snii = number_snii;
  486 :   376 :     sp->feedback_data.number_snia = number_snia_f;
  487 :   377 :     sp->feedback_data.number_snii = number_snii_f;
  488 :   393 :   sp->feedback_data.energy_ejected = 0;
  489 :   397 :   sp->feedback_data.energy_ejected +=
  490 :   398 :       sp->feedback_data.number_snia * snia_energy;
  491 :   404 :   sp->feedback_data.energy_ejected +=
  492 :   405 :       sp->feedback_data.number_snii * snii_energy;
  494 :    96 :   double logmass6 = log10(sp->mass * fb_props->mass_to_solar_mass * 1.e-6); 
  495 :    99 :   double z = sp->chemistry_data.metal_mass_fraction_total;
  496 :   183 :   for (k=0; k<chemistry_element_count; k++) sp->feedback_data.delta_dust_mass[k]=0.f;
  497 :   187 :     sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->delta_AGBCOG1[chemistry_element_C] * 
  498 :   190 :     if (sp->feedback_data.delta_dust_mass[chemistry_element_C] > fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C])
  499 :   191 :             sp->feedback_data.delta_dust_mass[chemistry_element_C] = fb_props->max_dust_fraction * delta_metal_mass[chemistry_element_C];
  500 :   193 :     delta_metal_mass[chemistry_element_C] -= sp->feedback_data.delta_dust_mass[chemistry_element_C];
  501 :   202 :         sp->feedback_data.delta_dust_mass[k] = 16.0 * (delta_table[chemistry_element_Mg] * delta_metal_mass[chemistry_element_Mg] / 24.305 
  502 :   209 :         sp->feedback_data.delta_dust_mass[k] = delta_table[k] * delta_metal_mass[k];
  503 :   211 :       if (sp->feedback_data.delta_dust_mass[k] > fb_props->max_dust_fraction * delta_metal_mass[k])
  504 :   212 :             sp->feedback_data.delta_dust_mass[k] = fb_props->max_dust_fraction * delta_metal_mass[k];
  505 :   213 :       delta_metal_mass[k] -= sp->feedback_data.delta_dust_mass[k];
  506 :   261 :   if (sp->mass_init == sp->mass) fb_first = 1;
  507 :   263 :   z = sp->chemistry_data.metal_mass_fraction_total;
  508 :   272 :     feh = sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H];
  509 :   777 :   *ejecta_unprocessed = max(0.f, sp->mass_init * SNII_U);
  510 :   778 :   *ejecta_mass = max(0.f, sp->mass_init * SNII_E);
  511 :   793 :       SWn = sp->mass_init * SW_R;
  512 :   804 :       SWn = sp->mass_init * SW_R;
  513 :   805 :       SNn = sp->mass_init * SNII_R;
  514 :   808 :         *ejecta_energy += sp->mass_init * SNII_ENE;
  515 :   815 :       ejecta_metal_mass[k] = sp->mass_init * SNII_Z[k];
  516 :   824 :         SNn = sp->mass_init * SNIa_R;
  517 :   840 : /*    if (sp->id == 3554000 ) message("Star %lld with m=%g (frac=%g), age=%g Myr, Z=%g is ejecting %g Msun (fIa=%g, Zej=%g) and %g erg in %g Myr.",
  518 :   841 :           sp->id,
  519 :   842 :           sp->mass * fb_props->mass_to_solar_mass,
  520 :   843 :           sp->mass/sp->mass_init,
  522 :   215 :   sp->feedback_data.enrichment_weight_inv = 0.f;
  523 :   216 :   sp->feedback_data.ngb_N = 0;
  524 :   217 :   sp->feedback_data.ngb_mass = 0.f;
  525 :   218 :   sp->feedback_data.ngb_rho = 0.f;
  526 :   219 :   sp->feedback_data.ngb_Z = 0.f;
  527 :   221 :   sp->has_done_feedback = 0;
  528 :   264 :   sp->feedback_data.enrichment_weight = 0.f;
  529 :   267 :   sp->feedback_data.mass = 0.f;
  530 :   271 :     sp->feedback_data.metal_mass[i] = 0.f;
  531 :   273 :     sp->feedback_data.delta_dust_mass[i] = 0.f;
  532 :   276 :   sp->feedback_data.total_metal_mass = 0.f;
  533 :   279 :   sp->feedback_data.energy = 0.f;
  534 :   321 :   const double galaxy_stellar_mass = max(sp->gpart->fof_data.group_stellar_mass,
  535 :   349 :       sp->gpart->fof_data.group_stellar_mass;
  536 :   355 :       sp->gpart->fof_data.group_mass;
  537 :   364 :   const double rand_for_scatter = random_unit_interval(sp->id, ti_current,
  538 :   405 :   if (sp->feedback_data.ngb_rho <= 0.) {
  539 :   406 :     warning("Star %lld has zero neighbor gas density.", sp->id);
  540 :   411 :   if (sp->birth_time == -1.) error("Evolving a star particle that should not!");
  541 :   415 :   const float h = sp->h;
  542 :   419 :   sp->feedback_data.ngb_rho *= h_inv_dim;
  543 :   421 :   const float rho_inv = 1.f / sp->feedback_data.ngb_rho;
  544 :   422 :   sp->feedback_data.ngb_Z *= h_inv_dim * rho_inv;
  545 :   427 :   if (sp->feedback_data.ngb_rho <= 0) {
  546 :   429 :             sp->id, sp->mass);
  547 :   436 :   if (sp->feedback_data.ngb_rho <= 0)
  548 :   438 :             sp->id, sp->mass);
  549 :   439 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  550 :   444 :   const float ngb_gas_mass = sp->feedback_data.ngb_mass;
  551 :   447 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  552 :   454 :       sp->feedback_data.enrichment_weight_inv;
  553 :   457 :   if (sp->feedback_data.enrichment_weight_inv < 0.)
  554 :   464 :   sp->feedback_data.enrichment_weight = enrichment_weight;
  555 :   467 :   if (sp->feedback_data.enrichment_weight < 0.)
  556 :   474 :      sp->feedback_data.feedback_mass_to_launch = eta * sp->mass;
  557 :   475 :      sp->feedback_data.feedback_wind_velocity = feedback_compute_kick_velocity(sp, cosmo, feedback_props, ti_begin);
  558 :   480 :   //sp->feedback_data.lum_habing = feedback_get_lum_from_star_particle(sp, star_age_beg_step, feedback_props);
  559 :   481 :   //message("G0: age %g  Lhabing %g\n",star_age_beg_step*feedback_props->time_to_Myr, sp->feedback_data.lum_habing);
  560 :   485 :   sp->feedback_data.mass = 0.f;
  561 :   489 :         cosmo, (double)sp->last_enrichment_time, cosmo->a);
  562 :   515 :     message("[Fe/H] = %g", sp->chemistry_data.metal_mass_fraction[chemistry_element_Fe] / sp->chemistry_data.metal_mass_fraction[chemistry_element_H]);
  563 :   516 :     message("Z = %g", sp->chemistry_data.metal_mass_fraction_total);
  564 :   519 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  565 :   524 :           sp->id, sp->mass, sp->mass_init, ejecta_mass, ejecta_energy, ejecta_unprocessed);
  566 :   529 :   if (sp->mass-ejecta_mass < 0.2 * sp->mass_init) {
  567 :   531 :           sp->id, sp->mass, ejecta_mass);
  568 :   546 :     dum = ejecta_unprocessed * sp->chemistry_data.metal_mass_fraction[elem];
  569 :   572 :   sp->feedback_data.total_metal_mass = 0.f;
  570 :   574 :     sp->feedback_data.metal_mass[elem] = ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  571 :   578 :       sp->feedback_data.total_metal_mass += ejecta_metal_mass[feedback_props->element_index_conversions[elem]];
  572 :   583 :     if (sp->mass/sp->mass_init<0.2) message("Star particle %lld with mass %g (init %g) is giving away %g Msun and %g erg (%g Msun metals).",
  573 :   584 :           sp->id, 
  574 :   585 :           sp->mass, 
  575 :   586 :           sp->mass_init, 
  576 :   589 :           sp->feedback_data.total_metal_mass * feedback_props->mass_to_solar_mass);
  577 :   594 :   if (sp->feedback_data.total_metal_mass > 0.f) {
  578 :   596 :                                          sp->feedback_data.metal_mass);
  579 :   601 :   sp->feedback_data.mass = ejecta_mass;
  580 :   605 :   //sp->feedback_data.energy = ejecta_energy;
  581 :   608 :   sp->feedback_data.feedback_energy_reservoir += ejecta_energy;
  582 :   611 :   sp->mass -= ejecta_mass;
  583 :   614 :   sp->last_enrichment_time = cosmo->a;
  584 :   618 :   sp->feedback_data.SNe_ThisTimeStep = N_SNe;
  585 :   622 :   sp->has_done_feedback = 1;
  587 :   344 :   if (sp->feedback_data.to_collect.ngb_rho <= 0) {
  588 :   346 :             sp->id, sp->mass);
  589 :   353 :   if (sp->feedback_data.to_collect.ngb_rho <= 0)
  590 :   355 :             sp->id, sp->mass);
  591 :   356 :   if (sp->count_since_last_enrichment != 0 && engine_current_step > 0)
  592 :   366 :   const double M_init = sp->mass_init;
  593 :   379 :   const float ngb_gas_mass = sp->feedback_data.to_collect.ngb_mass;
  594 :   382 :   if (ngb_gas_mass == 0.f || sp->density.wcount * pow_dimension(sp->h) < 1e-4) {
  595 :   389 :       sp->feedback_data.to_collect.enrichment_weight_inv;
  596 :   392 :   if (sp->feedback_data.to_collect.enrichment_weight_inv < 0.)
  597 :   405 :   sp->feedback_data.to_distribute.enrichment_weight = enrichment_weight;
  598 :   408 :   if (sp->feedback_data.to_distribute.enrichment_weight < 0.)
  599 :   439 :                 feedback_props, star_age_Gyr, dt_Gyr, &sp->feedback_data);
  600 :   443 :                 abundances, feedback_props, &sp->feedback_data);
  601 :   447 :                abundances, feedback_props, &sp->feedback_data);
  602 :   451 :   if (sp->feedback_data.to_distribute.mass != 0.f)
  603 :   456 :   sp->feedback_data.to_distribute.mass =
  604 :   457 :       sp->feedback_data.to_distribute.total_metal_mass +
  605 :   458 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_H] +
  606 :   459 :       sp->feedback_data.to_distribute.metal_mass[chemistry_element_He];
  607 :   462 :   sp->feedback_data.to_distribute.energy +=
  608 :   463 :       sp->feedback_data.to_distribute.mass *
  609 :   467 :   sp->feedback_data.to_distribute.energy +=
  610 :   468 :       sp->feedback_data.to_distribute.mass * 0.5f *
  611 :   469 :       (sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2]) *
./fof_io.h:
   37 :   ret[0] = sp->gpart->fof_data.group_id;
./ghost_stats.h:
  168 :   const float hi = sp->h;
./kick.h:
  303 :   if (sp->ti_kick != ti_start)
  305 :         "s-particle has not been kicked to the current time sp->ti_kick=%lld, "
  307 :         sp->ti_kick, ti_start, ti_end, sp->id);
  309 :   sp->ti_kick = ti_end;
  321 :   sp->v[0] += sp->gpart->a_grav[0] * dt_kick_grav;
  322 :   sp->v[1] += sp->gpart->a_grav[1] * dt_kick_grav;
  323 :   sp->v[2] += sp->gpart->a_grav[2] * dt_kick_grav;
  326 :   sp->v[0] += sp->gpart->a_grav_mesh[0] * dt_kick_mesh_grav;
  327 :   sp->v[1] += sp->gpart->a_grav_mesh[1] * dt_kick_mesh_grav;
  328 :   sp->v[2] += sp->gpart->a_grav_mesh[2] * dt_kick_mesh_grav;
  331 :   sp->gpart->v_full[0] = sp->v[0];
  332 :   sp->gpart->v_full[1] = sp->v[1];
  333 :   sp->gpart->v_full[2] = sp->v[2];
./lightcone/lightcone_map_types.c:
  104 :       return sp->mass;
  267 :       return sp->mass;
./lightcone/lightcone_particle_io.c:
  499 :   data->id = sp->id;
  504 :       sp->v[0] / a_cross;  // TODO: extrapolate velocities to a_cross?
  505 :   data->vel[1] = sp->v[1] / a_cross;
  506 :   data->vel[2] = sp->v[2] / a_cross;
  507 :   data->mass = sp->mass;
  515 :   data->mass_init = sp->mass_init;
  516 :   data->birth_scale_factor = sp->birth_scale_factor;
  517 :   data->birth_density = sp->birth_density;
  526 :         sp->chemistry_data.smoothed_metal_mass_fraction[i];
  528 :       sp->chemistry_data.metal_mass_fraction_total;
  530 :       sp->chemistry_data.smoothed_metal_mass_fraction_total;
  535 :       sp->tracers_data.last_AGN_injection_scale_factor;
./part.c:
  340 :             "gp->x=[%e %e %e] sp->x=[%e %e %e] diff=[%e %e %e]",
  349 :             "gp->m=%e sp->m=%e",
  383 :             "gp->m=%e sp->m=%e",
./rt/GEAR/rt.h:
   60 :   sp->rt_data.debug_emission_rate_set += 1;
   89 :         emission_this_step, sp->mass, dt, rt_props->photon_number_integral,
   97 :     sp->rt_data.emission_this_step[g] = emission_this_step[g];
  187 :     sp->rt_data.octant_weights[i] = 0.f;
  193 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
  194 :   sp->rt_data.debug_iact_hydro_inject = 0;
  195 :   sp->rt_data.debug_emission_rate_set = 0;
  198 :     sp->rt_data.debug_injected_energy[g] = 0.f;
  201 :     sp->rt_data.emission_this_step[g] = 0.f;
  203 :   sp->rt_data.debug_psi_sum = 0.f;
  218 :     sp->rt_data.emission_this_step[g] = 0.f;
  233 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
  235 :     sp->rt_data.debug_injected_energy_tot[g] = 0.f;
  272 :     sp->rt_data.emission_this_step[g] = 0.f;
./rt/GEAR/rt_debugging.h:
  134 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
  135 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
  137 :     sp->rt_data.debug_iact_hydro_inject = 0;
  138 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
  146 :        * sp->rt_data.emission_this_step: energy we should distribute
  148 :        * sp->rt_data.debug_injected_energy: energy we actually did
  150 :       if (sp->rt_data.debug_injected_energy[g] != 0.f) {
  151 :         float diff = 1.f - sp->rt_data.emission_this_step[g] /
  152 :                                sp->rt_data.debug_injected_energy[g];
  162 :             psi_sum_now += sp->rt_data.octant_weights[i];
  163 :           float diff_weights = 1.f - sp->rt_data.debug_psi_sum / psi_sum_now;
  168 :                 sp->id, g, sp->rt_data.emission_this_step[g],
  169 :                 sp->rt_data.debug_injected_energy[g], diff, diff_weights);
  176 :       sp->rt_data.debug_injected_energy[g] = 0.f;
  179 :       sp->rt_data.emission_this_step[g] = 0.f;
./rt/SPHM1RT/rt.h:
  149 :   sp->rt_data.injection_weight = 0.f;
  151 :     sp->rt_data.emission_reinject[g] = 0.f;
  165 :     sp->rt_data.emission_this_step[g] = 0.f;
./rt/SPHM1RT/rt_stellar_emission_rate.h:
   50 :       sp->rt_data.emission_this_step[g] +=
./rt/debug/rt.h:
   51 :   sp->rt_data.debug_emission_rate_set += 1;
  128 :   sp->rt_data.debug_iact_hydro_inject_prep = 0;
  129 :   sp->rt_data.debug_iact_hydro_inject = 0;
  130 :   sp->rt_data.debug_emission_rate_set = 0;
  153 :   sp->rt_data.debug_radiation_emitted_tot = 0ULL;
./rt/debug/rt_debugging.h:
  164 :     emission_sum_this_step += sp->rt_data.debug_iact_hydro_inject;
  165 :     emission_sum_tot += sp->rt_data.debug_radiation_emitted_tot;
  167 :     sp->rt_data.debug_iact_hydro_inject = 0;
  168 :     sp->rt_data.debug_iact_hydro_inject_prep = 0;
./runner_doiact_functions_black_holes.h:
  878 :       for (int k = 0; k < csp->count; k++) {
  879 :         const int pid = csp->pairs[k].pid;
  880 :         const int pjd = csp->pairs[k].pjd;
 1027 :     for (int k = 0; k < csp->count; k++) {
 1028 :       const int pid = csp->pairs[k].pid;
 1029 :       const int pjd = csp->pairs[k].pjd;
./runner_doiact_functions_hydro.h:
 2670 :     for (int k = 0; k < csp->count; k++) {
 2671 :       const int pid = csp->pairs[k].pid;
 2672 :       const int pjd = csp->pairs[k].pjd;
 2776 :     for (int k = 0; k < csp->count; k++) {
 2777 :       const int pid = csp->pairs[k].pid;
 2778 :       const int pjd = csp->pairs[k].pjd;
 2907 :       for (int k = 0; k < csp->count; k++) {
 2908 :         const int pid = csp->pairs[k].pid;
 2909 :         const int pjd = csp->pairs[k].pjd;
./runner_doiact_functions_limiter.h:
  749 :     for (int k = 0; k < csp->count; k++) {
  750 :       const int pid = csp->pairs[k].pid;
  751 :       const int pjd = csp->pairs[k].pjd;
./runner_doiact_functions_stars.h:
 1486 :       for (int k = 0; k < csp->count; k++) {
 1487 :         const int pid = csp->pairs[k].pid;
 1488 :         const int pjd = csp->pairs[k].pjd;
 1687 :     for (int k = 0; k < csp->count; k++) {
 1688 :       const int pid = csp->pairs[k].pid;
 1689 :       const int pjd = csp->pairs[k].pjd;
./runner_ghost.c:
  168 :         const float h_old = sp->h;
  175 :         if (sp->density.wcount < 1.e-5 * kernel_root) { /* No neighbours case */
  191 :           const float n_sum = sp->density.wcount * h_old_dim;
  195 :               sp->density.wcount_dh * h_old_dim +
  196 :               hydro_dimension * sp->density.wcount * h_old_dim_minus_one;
  213 :           if (((sp->h >= stars_h_max) && (f < 0.f)) ||
  214 :               ((sp->h <= stars_h_min) && (f > 0.f))) {
  221 :               const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  223 :                   get_integer_time_begin(e->ti_current - 1, sp->time_bin);
  231 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
  272 :                     get_integer_time_begin(e->ti_current - 1, sp->time_bin);
  274 :                     get_integer_timestep(sp->time_bin);
  279 :                 dt_star = get_timestep(sp->time_bin, e->time_base);
  307 :                 num_reruns, sp->id, h_init, h_old, h_new, f, f_prime, n_sum,
  331 :             sp->h = pow_inv_dimension(
  337 :             sp->h = h_new;
  341 :           if (sp->h < stars_h_max && sp->h > stars_h_min) {
  358 :           } else if (sp->h <= stars_h_min) {
  361 :             sp->h = stars_h_min;
  363 :           } else if (sp->h >= stars_h_max) {
  366 :             sp->h = stars_h_max;
  385 :         h_max = max(h_max, sp->h);
  386 :         h_max_active = max(h_max_active, sp->h);
  395 :           const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  397 :               get_integer_time_begin(e->ti_current - 1, sp->time_bin);
  405 :             dt_star = get_timestep(sp->time_bin, e->time_base);
  446 :                 get_integer_time_begin(e->ti_current - 1, sp->time_bin);
  447 :             const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  452 :             dt_star = get_timestep(sp->time_bin, e->time_base);
  526 :         warning("ID: %lld, h: %g, wcount: %g", sp->id, sp->h,
  527 :                 sp->density.wcount);
  551 :       error("Particle has h larger than h_max (id=%lld)", sp->id);
  553 :       error("Active particle has h larger than h_max_active (id=%lld)", sp->id);
./runner_others.c:
  269 :           c->stars.h_max = max(c->stars.h_max, sp->h);
  270 :           c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
  481 :               /* message("We formed a star id=%lld cellID=%lld", sp->id,
  498 :               c->stars.h_max = max(c->stars.h_max, sp->h);
  499 :               c->stars.h_max_active = max(c->stars.h_max_active, sp->h);
  522 :                 csds_part_data_init(&sp->csds_data);
  525 :                 sp->csds_data = xp->csds_data;
 1035 :         if (csds_should_write(&sp->csds_data, e->csds)) {
 1042 :           sp->csds_data.steps_since_last_output += 1;
./runner_sinks.c:
  406 :     for (int k = 0; k < csp->count; k++) {
  407 :       const int pid = csp->pairs[k].pid;
  408 :       const int pjd = csp->pairs[k].pjd;
  588 :           if (sp->id == sink_id) {
  604 :               message("sink %lld removing gas particle %lld", sp->id, p->id);
  752 :           sink_get_sink_swallow_id(&cell_sp->merger_data);
  758 :         if (cell_sp->ti_drift != e->ti_current)
  774 :           if (sp->id == sink_id) {
  778 :             if (sink_get_sink_swallow_id(&sp->merger_data) != -1) {
  781 :               sink_mark_sink_as_not_swallowed(&cell_sp->merger_data);
  798 :             // message("sink %lld swallowing sink particle %lld", sp->id,
  799 :             // cell_sp->id);
  804 :               message("sink %lld removing sink particle %lld", sp->id,
  805 :                       cell_sp->id);
  814 :             sink_mark_sink_as_merged(&cell_sp->merger_data);
  830 :                 cell_sp->id, swallow_id);
./runner_time_integration.c:
  250 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  252 :             get_integer_time_begin(ti_current + 1, sp->time_bin);
  257 :             get_integer_time_end(ti_current + 1, sp->time_bin);
  263 :               ti_end_check, ti_begin, ti_step, sp->time_bin, ti_current);
  524 :         const integertime_t ti_step = get_integer_timestep(sp->time_bin);
  526 :             get_integer_time_begin(ti_current, sp->time_bin) + ti_step / 2;
  543 :         if (sp->ti_drift != sp->ti_kick)
  914 :             get_integer_time_end(ti_current, sp->time_bin);
  920 :         const integertime_t ti_old_step = get_integer_timestep(sp->time_bin);
  926 :           old_time_step_length = get_timestep(sp->time_bin, e->time_base);
  933 :         sp->time_bin = get_time_bin(ti_new_step);
  934 :         sp->gpart->time_bin = get_time_bin(ti_new_step);
  969 :               get_integer_time_end(ti_current, sp->time_bin);
  972 :               get_integer_time_begin(ti_current + 1, sp->time_bin);
./scheduler.c:
 1340 :           t->ci = ci->progeny[csp->pairs[0].pid];
 1341 :           t->cj = cj->progeny[csp->pairs[0].pjd];
 1345 :           t->flags = csp->pairs[0].sid;
 1346 :           for (int k = 1; k < csp->count; k++) {
 1349 :                                   csp->pairs[k].sid, 0,
 1350 :                                   ci->progeny[csp->pairs[k].pid],
 1351 :                                   cj->progeny[csp->pairs[k].pjd]),
 1388 :   struct engine *e = sp->e;
./sink/Default/sink_io.h:
   54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   58 :     ret[0] = sp->x[0];
   59 :     ret[1] = sp->x[1];
   60 :     ret[2] = sp->x[2];
   72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   86 :   const struct gpart* gp = sp->gpart;
./sink/Default/sink_properties.h:
   46 :   sp->cut_off_radius =
./sink/GEAR/sink.h:
   54 :   sp->r_cut = sink_props->cut_off_radius;
   55 :   sp->time_bin = 0;
   57 :   sp->number_of_gas_swallows = 0;
   58 :   sp->number_of_direct_gas_swallows = 0;
   59 :   sp->number_of_sink_swallows = 0;
   60 :   sp->number_of_direct_sink_swallows = 0;
   61 :   sp->swallowed_angular_momentum[0] = 0.f;
   62 :   sp->swallowed_angular_momentum[1] = 0.f;
   63 :   sp->swallowed_angular_momentum[2] = 0.f;
   65 :   sink_mark_sink_as_not_swallowed(&sp->merger_data);
   92 :     sp->ids_ngbs_accretion[i] = -1;
   93 :   sp->num_ngb_accretion = 0;
   96 :     sp->ids_ngbs_merger[i] = -1;
   97 :   sp->num_ngb_merger = 0;
  100 :     sp->ids_ngbs_formation[i] = -1;
  101 :   sp->num_ngb_formation = 0;
  247 :   const float sink_mass = sp->mass;
  250 :   sp->mass += gas_mass;
  251 :   sp->gpart->mass += gas_mass;
  254 :   const float dv[3] = {(sp->v[0] - p->v[0]) * cosmo->a_inv,
  255 :                        (sp->v[1] - p->v[1]) * cosmo->a_inv,
  256 :                        (sp->v[2] - p->v[2]) * cosmo->a_inv};
  259 :   const float dx[3] = {(sp->x[0] - p->x[0]) * cosmo->a,
  260 :                        (sp->x[1] - p->x[1]) * cosmo->a,
  261 :                        (sp->x[2] - p->x[2]) * cosmo->a};
  264 :   sp->swallowed_angular_momentum[0] +=
  266 :   sp->swallowed_angular_momentum[1] +=
  268 :   sp->swallowed_angular_momentum[2] +=
  272 :   const float sink_mom[3] = {sink_mass * sp->v[0] + gas_mass * p->v[0],
  273 :                              sink_mass * sp->v[1] + gas_mass * p->v[1],
  274 :                              sink_mass * sp->v[2] + gas_mass * p->v[2]};
  276 :   sp->v[0] = sink_mom[0] / sp->mass;
  277 :   sp->v[1] = sink_mom[1] / sp->mass;
  278 :   sp->v[2] = sink_mom[2] / sp->mass;
  279 :   sp->gpart->v_full[0] = sp->v[0];
  280 :   sp->gpart->v_full[1] = sp->v[1];
  281 :   sp->gpart->v_full[2] = sp->v[2];
  290 :       sp->id, p->id, -dv[0], -dv[1], -dv[2], -dx[0], -dx[1], -dx[2],
  295 :   struct chemistry_sink_data* sp_chem = &sp->chemistry_data;
  300 :   sp->number_of_gas_swallows++;
  301 :   sp->number_of_direct_gas_swallows++;
  407 :   sp->h = sink->r_cut;
./sink/GEAR/sink_io.h:
   54 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   55 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   56 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   58 :     ret[0] = sp->x[0];
   59 :     ret[1] = sp->x[1];
   60 :     ret[2] = sp->x[2];
   72 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   73 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   86 :   const struct gpart* gp = sp->gpart;
./sink/GEAR/sink_properties.h:
   52 :   sp->cut_off_radius =
   55 :   sp->maximal_temperature =
   58 :   sp->density_threshold =
   62 :   sp->maximal_temperature /=
   65 :   sp->density_threshold /= units_cgs_conversion_factor(us, UNIT_CONV_DENSITY);
   67 :   message("maximal_temperature = %g", sp->maximal_temperature);
   68 :   message("density_threshold  = %g", sp->density_threshold);
./space.c:
  628 :     if (sp->time_bin == time_bin_not_created ||
  629 :         sp->time_bin == time_bin_inhibited)
  633 :     struct gpart *gp = sp->gpart;
  640 :     gp->x[0] = sp->x[0];
  641 :     gp->x[1] = sp->x[1];
  642 :     gp->x[2] = sp->x[2];
  644 :     gp->v_full[0] = sp->v[0];
  645 :     gp->v_full[1] = sp->v[1];
  646 :     gp->v_full[2] = sp->v[2];
  648 :     gp->mass = sp->mass;
./space_cell_index.c:
  357 :     double old_pos_x = sp->x[0];
  358 :     double old_pos_y = sp->x[1];
  359 :     double old_pos_z = sp->x[2];
  362 :     if (!s->periodic && sp->time_bin != time_bin_inhibited) {
  400 :     if (sp->time_bin == time_bin_inhibited) {
  403 :     } else if (sp->time_bin == time_bin_not_created) {
  415 :       min_mass = min(min_mass, sp->mass);
  419 :           sp->v[0] * sp->v[0] + sp->v[1] * sp->v[1] + sp->v[2] * sp->v[2];
  422 :       sp->x[0] = pos_x;
  423 :       sp->x[1] = pos_y;
  424 :       sp->x[2] = pos_z;
./space_rebuild.c:
  581 :         cell_getid(cdim, sp->x[0] * ih[0], sp->x[1] * ih[1], sp->x[2] * ih[2]);
  655 :     if (sp->time_bin == time_bin_inhibited)
  660 :         cell_getid(s->cdim, sp->x[0] * s->iwidth[0], sp->x[1] * s->iwidth[1],
  661 :                    sp->x[2] * s->iwidth[2]);
  669 :     if (sp->x[0] < c->loc[0] || sp->x[0] > c->loc[0] + c->width[0] ||
  670 :         sp->x[1] < c->loc[1] || sp->x[1] > c->loc[1] + c->width[1] ||
  671 :         sp->x[2] < c->loc[2] || sp->x[2] > c->loc[2] + c->width[2])
./star_formation/EAGLE/star_formation.h:
  591 :   sp->mass = hydro_get_mass(p);
  594 :   sp->mass_init = hydro_get_mass(p);
  598 :     sp->birth_scale_factor = cosmo->a;
  600 :     sp->birth_time = e->time;
  604 :   sp->split_data = xp->split_data;
  607 :   sp->chemistry_data = p->chemistry_data;
  610 :   sp->tracers_data = xp->tracers_data;
  613 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
  616 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
  620 :   sp->f_E = -1.f;
  621 :   sp->number_of_SNII_events = 0;
  622 :   sp->last_enrichment_time = sp->birth_time;
  623 :   sp->count_since_last_enrichment = -1;
  624 :   sp->number_of_heating_events = 0.;
./star_formation/EAGLE/star_formation_logger.h:
   43 :   sf->new_stellar_mass += sp->mass;
./star_formation/GEAR/star_formation.h:
  244 :   if (p->x[0] != sp->x[0] || p->x[1] != sp->x[1] || p->x[2] != sp->x[2]) {
  248 :         p->x[0], p->x[1], p->x[2], sp->x[0], sp->x[1], sp->x[2]);
  269 :   sp->x[0] += delta_x * max_displacement * p->h;
  270 :   sp->x[1] += delta_y * max_displacement * p->h;
  271 :   sp->x[2] += delta_z * max_displacement * p->h;
  274 :   sp->gpart->x[0] = sp->x[0];
  275 :   sp->gpart->x[1] = sp->x[1];
  276 :   sp->gpart->x[2] = sp->x[2];
  279 :   const double mass_ratio = sp->mass / hydro_get_mass(p);
  338 :     sp->mass = mass_star;
  339 :     sp->gpart->mass = mass_star;
  347 :     sp->mass = mass_gas;
  349 :   sp->sf_data.birth_mass = sp->mass;
  353 :     sp->birth_scale_factor = cosmo->a;
  355 :     sp->birth_time = e->time;
  359 :   // sp->tracers_data = xp->tracers_data;
  362 :   sp->split_data = xp->split_data;
  365 :   sp->sf_data.birth_density = hydro_get_physical_density(p, cosmo);
  368 :   sp->sf_data.birth_temperature = cooling_get_temperature(
  375 :   sp->sf_data.progenitor_id = p->id;
./star_formation/GEAR/star_formation_csds.h:
   41 :   out[0] = sp->sf_data.birth_density;
   42 :   out[1] = sp->sf_data.birth_mass;
   44 :   *id = sp->sf_data.progenitor_id;
./star_formation/GEAR/star_formation_logger.h:
   44 :   sf->new_stellar_mass += sp->mass;
./star_formation/KIARA/star_formation.h:
  425 :   sp->mass = hydro_get_mass(p);
  428 :   sp->mass_init = hydro_get_mass(p);
  432 :     sp->birth_scale_factor = cosmo->a;
  434 :     sp->birth_time = e->time;
  438 :   sp->split_data = xp->split_data;
  441 :   sp->chemistry_data = p->chemistry_data;
  444 :   sp->tracers_data = xp->tracers_data;
  447 :   sp->birth_density = cooling_get_subgrid_density(p, xp);
  450 :   sp->birth_temperature = cooling_get_subgrid_temperature(p, xp);
  453 :   sp->feedback_data.feedback_mass_to_launch = 0.f;
  454 :   sp->feedback_data.feedback_energy_reservoir = 0.f;
  455 :   sp->last_enrichment_time = sp->birth_time;
  456 :   sp->count_since_last_enrichment = -1;
./star_formation/KIARA/star_formation_logger.h:
   43 :   sf->new_stellar_mass += sp->mass;
./star_formation/QLA/star_formation.h:
  173 :   sp->mass = hydro_get_mass(p);
  176 :   sp->mass_init = hydro_get_mass(p);
  179 :   sp->split_data = xp->split_data;
  183 :     sp->birth_scale_factor = cosmo->a;
  185 :     sp->birth_time = e->time;
./star_formation/SIMBA/star_formation.h:
  663 :   sp->mass = hydro_get_mass(p);
  666 :   sp->mass_init = hydro_get_mass(p);
  670 :     sp->birth_scale_factor = cosmo->a;
  672 :     sp->birth_time = e->time;
  676 :   sp->split_data = xp->split_data;
  679 :   sp->chemistry_data = p->chemistry_data;
  682 :   sp->tracers_data = xp->tracers_data;
  685 :   sp->birth_density = hydro_get_physical_density(p, cosmo);
  688 :   sp->birth_temperature = cooling_get_temperature(phys_const, hydro_props, us,
  692 :   sp->f_E = -1.f;
  693 :   sp->number_of_SNII_events = 0;
  694 :   sp->last_enrichment_time = sp->birth_time;
  695 :   sp->count_since_last_enrichment = -1;
  696 :   sp->number_of_heating_events = 0.;
./star_formation/SIMBA/star_formation_logger.h:
   43 :   sf->new_stellar_mass += sp->mass;
./stars/Basic/stars.h:
   59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   61 :     return time - (double)sp->birth_time;
   81 :   sp->time_bin = 0;
   84 :   sp->group_data.mass = 0.f;
   85 :   sp->group_data.stellar_mass = 0.f;
   99 :     sp->ids_ngbs_density[i] = -1;
  100 :   sp->num_ngb_density = 0;
  103 :   sp->density.wcount = 0.f;
  104 :   sp->density.wcount_dh = 0.f;
  152 :   const float h = sp->h;
  158 :   sp->density.wcount *= h_inv_dim;
  159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  175 :       sp->id, sp->h, sp->density.wcount);
  178 :   const float h = sp->h;
  183 :   sp->density.wcount = kernel_root * h_inv_dim;
  184 :   sp->density.wcount_dh = 0.f;
./stars/Basic/stars_csds.h:
   40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
   41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
   42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
./stars/Basic/stars_io.h:
   58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   62 :     ret[0] = sp->x[0];
   63 :     ret[1] = sp->x[1];
   64 :     ret[2] = sp->x[2];
   81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   92 :   const struct gpart *gp = sp->gpart;
  111 :   if (sp->gpart != NULL)
  112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  195 :   sp->eta_neighbours = parser_get_opt_param_float(
  199 :   sp->h_tolerance =
  203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  205 :   sp->delta_neighbours =
  206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  217 :     sp->log_max_h_change = p->log_max_h_change;
  219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  231 :           sp->eta_neighbours, sp->target_neighbours);
  234 :           sp->h_tolerance, sp->delta_neighbours);
  239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  242 :           sp->max_smoothing_iterations);
  252 :                        sp->target_neighbours);
  253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  256 :                        sp->h_tolerance);
  258 :                        sp->log_max_h_change);
  260 :                        pow_dimension(expf(sp->log_max_h_change)));
  262 :                        sp->max_smoothing_iterations);
./stars/EAGLE/stars.h:
   43 :   if (sp->birth_time == -1.) {
   52 :     if (sp->birth_scale_factor >= cosmo->a) {
   56 :           cosmo, sp->birth_scale_factor, cosmo->a);
   59 :     star_age = time - sp->birth_time;
   86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   88 :     return time - (double)sp->birth_time;
  102 :     sp->ids_ngbs_density[i] = -1;
  103 :   sp->num_ngb_density = 0;
  106 :   sp->density.wcount = 0.f;
  107 :   sp->density.wcount_dh = 0.f;
  110 :   sp->N_density = 0;
  111 :   sp->N_density_exact = 0;
  112 :   sp->rho = 0.f;
  113 :   sp->rho_exact = 0.f;
  114 :   sp->n = 0.f;
  115 :   sp->n_exact = 0.f;
  116 :   sp->inhibited_exact = 0;
  137 :   sp->time_bin = 0;
  138 :   sp->f_E = -1.f;
  139 :   sp->count_since_last_enrichment = -1;
  140 :   sp->number_of_heating_events = 0.;
  141 :   sp->number_of_SNII_events = 0;
  144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  148 :     sp->birth_temperature =
  152 :     sp->last_enrichment_time = scale_factor;
  154 :     sp->last_enrichment_time = time;
  159 :   sp->group_data.mass = 0.f;
  160 :   sp->group_data.stellar_mass = 0.f;
  211 :   const float h = sp->h;
  217 :   sp->density.wcount *= h_inv_dim;
  218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  221 :   sp->rho *= h_inv_dim;
  222 :   sp->n *= h_inv_dim;
  239 :       sp->id, sp->h, sp->density.wcount);
  242 :   sp->density.wcount = 0.f;
  243 :   sp->density.wcount_dh = 0.f;
  303 :   const float mass = sp->mass_init;
  307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  309 :     age = time - sp->birth_time;
./stars/EAGLE/stars_io.h:
   67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   71 :     ret[0] = sp->x[0];
   72 :     ret[1] = sp->x[1];
   73 :     ret[2] = sp->x[2];
   90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  101 :   const struct gpart *gp = sp->gpart;
  128 :   if (sp->gpart != NULL)
  129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  249 :   sp->eta_neighbours = parser_get_opt_param_float(
  253 :   sp->h_tolerance =
  257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  259 :   sp->delta_neighbours =
  260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  271 :     sp->log_max_h_change = p->log_max_h_change;
  273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  276 :   sp->overwrite_birth_time =
  278 :   sp->overwrite_birth_density =
  280 :   sp->overwrite_birth_temperature =
  284 :   if (sp->overwrite_birth_time) {
  285 :     sp->spart_first_init_birth_time =
  290 :   if (sp->overwrite_birth_density) {
  291 :     sp->spart_first_init_birth_density =
  296 :   if (sp->overwrite_birth_temperature) {
  297 :     sp->spart_first_init_birth_temperature =
  325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  359 :           sp->lum_tables_Z[i][k++] = log10(z);
  363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  393 :           sp->eta_neighbours, sp->target_neighbours);
  396 :           sp->h_tolerance, sp->delta_neighbours);
  401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  404 :           sp->max_smoothing_iterations);
  406 :   if (sp->overwrite_birth_time)
  408 :             sp->spart_first_init_birth_time);
  411 :           sp->age_threshold_unlimited);
  412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  414 :           sp->max_time_step_young);
  415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  424 :                        sp->target_neighbours);
  425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  428 :                        sp->h_tolerance);
  430 :                        sp->log_max_h_change);
  432 :                        pow_dimension(expf(sp->log_max_h_change)));
  434 :                        sp->max_smoothing_iterations);
  462 :     free(sp->lum_tables_Z[i]);
  463 :     free(sp->lum_tables_ages[i]);
  464 :     free(sp->lum_tables_luminosities[i]);
./stars/GEAR/stars.h:
   58 :     const double birth = sp->birth_scale_factor;
   62 :     return time - (double)sp->birth_time;
   76 :     sp->ids_ngbs_density[i] = -1;
   77 :   sp->num_ngb_density = 0;
   80 :   sp->density.wcount = 0.f;
   81 :   sp->density.wcount_dh = 0.f;
  100 :   sp->time_bin = 0;
  105 :   sp->group_data.mass = 0.f;
  106 :   sp->group_data.stellar_mass = 0.f;
  157 :   const float h = sp->h;
  163 :   sp->density.wcount *= h_inv_dim;
  164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  180 :       sp->id, sp->h, sp->density.wcount);
  183 :   sp->density.wcount = 0.f;
  184 :   sp->density.wcount_dh = 0.f;
./stars/GEAR/stars_csds.h:
   42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
   43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
   44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
./stars/GEAR/stars_io.h:
   60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   64 :     ret[0] = sp->x[0];
   65 :     ret[1] = sp->x[1];
   66 :     ret[2] = sp->x[2];
   83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   94 :   const struct gpart *gp = sp->gpart;
  113 :   if (sp->gpart != NULL)
  114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  207 :   sp->eta_neighbours = parser_get_opt_param_float(
  211 :   sp->h_tolerance =
  215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  217 :   sp->delta_neighbours =
  218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  229 :     sp->log_max_h_change = p->log_max_h_change;
  231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  243 :           sp->eta_neighbours, sp->target_neighbours);
  246 :           sp->h_tolerance, sp->delta_neighbours);
  251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  254 :           sp->max_smoothing_iterations);
  264 :                        sp->target_neighbours);
  265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  268 :                        sp->h_tolerance);
  270 :                        sp->log_max_h_change);
  272 :                        pow_dimension(expf(sp->log_max_h_change)));
  274 :                        sp->max_smoothing_iterations);
./stars/None/stars.h:
   72 :   sp->group_data.mass = 0.f;
   73 :   sp->group_data.stellar_mass = 0.f;
./stars/SIMBA/stars.h:
   43 :   if (sp->birth_time == -1.) {
   52 :     if (sp->birth_scale_factor >= cosmo->a) {
   56 :           cosmo, sp->birth_scale_factor, cosmo->a);
   59 :     star_age = time - sp->birth_time;
   86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   88 :     return time - (double)sp->birth_time;
  102 :     sp->ids_ngbs_density[i] = -1;
  103 :   sp->num_ngb_density = 0;
  106 :   sp->density.wcount = 0.f;
  107 :   sp->density.wcount_dh = 0.f;
  110 :   sp->N_density = 0;
  111 :   sp->N_density_exact = 0;
  112 :   sp->rho = 0.f;
  113 :   sp->rho_exact = 0.f;
  114 :   sp->n = 0.f;
  115 :   sp->n_exact = 0.f;
  116 :   sp->inhibited_exact = 0;
  137 :   sp->time_bin = 0;
  140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  144 :     sp->birth_temperature =
  148 :     sp->last_enrichment_time = scale_factor;
  150 :     sp->last_enrichment_time = time;
  155 :   sp->group_data.mass = 0.f;
  156 :   sp->group_data.stellar_mass = 0.f;
  157 :   sp->group_data.ssfr = 0.f;
  208 :   const float h = sp->h;
  214 :   sp->density.wcount *= h_inv_dim;
  215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  218 :   sp->rho *= h_inv_dim;
  219 :   sp->n *= h_inv_dim;
  236 :       sp->id, sp->h, sp->density.wcount);
  239 :   sp->density.wcount = 0.f;
  240 :   sp->density.wcount_dh = 0.f;
  300 :   const float mass = sp->mass_init;
  304 :         cosmo, sp->birth_scale_factor, cosmo->a);
  306 :     age = time - sp->birth_time;
./stars/SIMBA/stars_io.h:
   67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   71 :     ret[0] = sp->x[0];
   72 :     ret[1] = sp->x[1];
   73 :     ret[2] = sp->x[2];
   90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  101 :   const struct gpart *gp = sp->gpart;
  128 :   if (sp->gpart != NULL)
  129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  248 :   sp->eta_neighbours = parser_get_opt_param_float(
  252 :   sp->h_tolerance =
  256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  258 :   sp->delta_neighbours =
  259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  270 :     sp->log_max_h_change = p->log_max_h_change;
  272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  275 :   sp->overwrite_birth_time =
  277 :   sp->overwrite_birth_density =
  279 :   sp->overwrite_birth_temperature =
  283 :   if (sp->overwrite_birth_time) {
  284 :     sp->spart_first_init_birth_time =
  289 :   if (sp->overwrite_birth_density) {
  290 :     sp->spart_first_init_birth_density =
  295 :   if (sp->overwrite_birth_temperature) {
  296 :     sp->spart_first_init_birth_temperature =
  324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  358 :           sp->lum_tables_Z[i][k++] = log10(z);
  362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  365 :         sp->lum_tables_luminosities[i][j] = log10(L);
  382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  392 :           sp->eta_neighbours, sp->target_neighbours);
  395 :           sp->h_tolerance, sp->delta_neighbours);
  400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  403 :           sp->max_smoothing_iterations);
  405 :   if (sp->overwrite_birth_time)
  407 :             sp->spart_first_init_birth_time);
  410 :           sp->age_threshold_unlimited);
  411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  413 :           sp->max_time_step_young);
  414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  423 :                        sp->target_neighbours);
  424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  427 :                        sp->h_tolerance);
  429 :                        sp->log_max_h_change);
  431 :                        pow_dimension(expf(sp->log_max_h_change)));
  433 :                        sp->max_smoothing_iterations);
  461 :     free(sp->lum_tables_Z[i]);
  462 :     free(sp->lum_tables_ages[i]);
  463 :     free(sp->lum_tables_luminosities[i]);
./stars/fof_data:
    2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
    3 :    61 :     return time - (double)sp->birth_time;
    4 :    81 :   sp->time_bin = 0;
    5 :    84 :   sp->group_data.mass = 0.f;
    6 :    85 :   sp->group_data.stellar_mass = 0.f;
    7 :    99 :     sp->ids_ngbs_density[i] = -1;
    8 :   100 :   sp->num_ngb_density = 0;
    9 :   103 :   sp->density.wcount = 0.f;
   10 :   104 :   sp->density.wcount_dh = 0.f;
   11 :   152 :   const float h = sp->h;
   12 :   158 :   sp->density.wcount *= h_inv_dim;
   13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
   14 :   175 :       sp->id, sp->h, sp->density.wcount);
   15 :   178 :   const float h = sp->h;
   16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
   17 :   184 :   sp->density.wcount_dh = 0.f;
   19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
   20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
   21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
   23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   26 :    62 :     ret[0] = sp->x[0];
   27 :    63 :     ret[1] = sp->x[1];
   28 :    64 :     ret[2] = sp->x[2];
   29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   31 :    92 :   const struct gpart *gp = sp->gpart;
   32 :   111 :   if (sp->gpart != NULL)
   33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
   34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
   35 :   199 :   sp->h_tolerance =
   36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
   37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
   38 :   205 :   sp->delta_neighbours =
   39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
   40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
   41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
   42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
   43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
   44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
   45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
   46 :   242 :           sp->max_smoothing_iterations);
   47 :   252 :                        sp->target_neighbours);
   48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
   49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
   50 :   256 :                        sp->h_tolerance);
   51 :   258 :                        sp->log_max_h_change);
   52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
   53 :   262 :                        sp->max_smoothing_iterations);
   55 :    43 :   if (sp->birth_time == -1.) {
   56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
   57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
   58 :    59 :     star_age = time - sp->birth_time;
   59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   60 :    88 :     return time - (double)sp->birth_time;
   61 :   102 :     sp->ids_ngbs_density[i] = -1;
   62 :   103 :   sp->num_ngb_density = 0;
   63 :   106 :   sp->density.wcount = 0.f;
   64 :   107 :   sp->density.wcount_dh = 0.f;
   65 :   110 :   sp->N_density = 0;
   66 :   111 :   sp->N_density_exact = 0;
   67 :   112 :   sp->rho = 0.f;
   68 :   113 :   sp->rho_exact = 0.f;
   69 :   114 :   sp->n = 0.f;
   70 :   115 :   sp->n_exact = 0.f;
   71 :   116 :   sp->inhibited_exact = 0;
   72 :   137 :   sp->time_bin = 0;
   73 :   138 :   sp->f_E = -1.f;
   74 :   139 :   sp->count_since_last_enrichment = -1;
   75 :   140 :   sp->number_of_heating_events = 0.;
   76 :   141 :   sp->number_of_SNII_events = 0;
   77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
   78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
   79 :   148 :     sp->birth_temperature =
   80 :   152 :     sp->last_enrichment_time = scale_factor;
   81 :   154 :     sp->last_enrichment_time = time;
   82 :   159 :   sp->group_data.mass = 0.f;
   83 :   160 :   sp->group_data.stellar_mass = 0.f;
   84 :   211 :   const float h = sp->h;
   85 :   217 :   sp->density.wcount *= h_inv_dim;
   86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
   87 :   221 :   sp->rho *= h_inv_dim;
   88 :   222 :   sp->n *= h_inv_dim;
   89 :   239 :       sp->id, sp->h, sp->density.wcount);
   90 :   242 :   sp->density.wcount = 0.f;
   91 :   243 :   sp->density.wcount_dh = 0.f;
   92 :   303 :   const float mass = sp->mass_init;
   93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
   94 :   309 :     age = time - sp->birth_time;
   96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   99 :    71 :     ret[0] = sp->x[0];
  100 :    72 :     ret[1] = sp->x[1];
  101 :    73 :     ret[2] = sp->x[2];
  102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  104 :   101 :   const struct gpart *gp = sp->gpart;
  105 :   128 :   if (sp->gpart != NULL)
  106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  108 :   253 :   sp->h_tolerance =
  109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  111 :   259 :   sp->delta_neighbours =
  112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  116 :   276 :   sp->overwrite_birth_time =
  117 :   278 :   sp->overwrite_birth_density =
  118 :   280 :   sp->overwrite_birth_temperature =
  119 :   284 :   if (sp->overwrite_birth_time) {
  120 :   285 :     sp->spart_first_init_birth_time =
  121 :   290 :   if (sp->overwrite_birth_density) {
  122 :   291 :     sp->spart_first_init_birth_density =
  123 :   296 :   if (sp->overwrite_birth_temperature) {
  124 :   297 :     sp->spart_first_init_birth_temperature =
  125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  139 :   404 :           sp->max_smoothing_iterations);
  140 :   406 :   if (sp->overwrite_birth_time)
  141 :   408 :             sp->spart_first_init_birth_time);
  142 :   411 :           sp->age_threshold_unlimited);
  143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  144 :   414 :           sp->max_time_step_young);
  145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  146 :   424 :                        sp->target_neighbours);
  147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  149 :   428 :                        sp->h_tolerance);
  150 :   430 :                        sp->log_max_h_change);
  151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  152 :   434 :                        sp->max_smoothing_iterations);
  153 :   462 :     free(sp->lum_tables_Z[i]);
  154 :   463 :     free(sp->lum_tables_ages[i]);
  155 :   464 :     free(sp->lum_tables_luminosities[i]);
  157 :    58 :     const double birth = sp->birth_scale_factor;
  158 :    62 :     return time - (double)sp->birth_time;
  159 :    76 :     sp->ids_ngbs_density[i] = -1;
  160 :    77 :   sp->num_ngb_density = 0;
  161 :    80 :   sp->density.wcount = 0.f;
  162 :    81 :   sp->density.wcount_dh = 0.f;
  163 :   100 :   sp->time_bin = 0;
  164 :   105 :   sp->group_data.mass = 0.f;
  165 :   106 :   sp->group_data.stellar_mass = 0.f;
  166 :   157 :   const float h = sp->h;
  167 :   163 :   sp->density.wcount *= h_inv_dim;
  168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  169 :   180 :       sp->id, sp->h, sp->density.wcount);
  170 :   183 :   sp->density.wcount = 0.f;
  171 :   184 :   sp->density.wcount_dh = 0.f;
  173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  180 :    64 :     ret[0] = sp->x[0];
  181 :    65 :     ret[1] = sp->x[1];
  182 :    66 :     ret[2] = sp->x[2];
  183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  185 :    94 :   const struct gpart *gp = sp->gpart;
  186 :   113 :   if (sp->gpart != NULL)
  187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
  189 :   211 :   sp->h_tolerance =
  190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  192 :   217 :   sp->delta_neighbours =
  193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
  196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
  198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
  199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  200 :   254 :           sp->max_smoothing_iterations);
  201 :   264 :                        sp->target_neighbours);
  202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  204 :   268 :                        sp->h_tolerance);
  205 :   270 :                        sp->log_max_h_change);
  206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
  207 :   274 :                        sp->max_smoothing_iterations);
  209 :    72 :   sp->group_data.mass = 0.f;
  210 :    73 :   sp->group_data.stellar_mass = 0.f;
  212 :    43 :   if (sp->birth_time == -1.) {
  213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  215 :    59 :     star_age = time - sp->birth_time;
  216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  217 :    88 :     return time - (double)sp->birth_time;
  218 :   102 :     sp->ids_ngbs_density[i] = -1;
  219 :   103 :   sp->num_ngb_density = 0;
  220 :   106 :   sp->density.wcount = 0.f;
  221 :   107 :   sp->density.wcount_dh = 0.f;
  222 :   110 :   sp->N_density = 0;
  223 :   111 :   sp->N_density_exact = 0;
  224 :   112 :   sp->rho = 0.f;
  225 :   113 :   sp->rho_exact = 0.f;
  226 :   114 :   sp->n = 0.f;
  227 :   115 :   sp->n_exact = 0.f;
  228 :   116 :   sp->inhibited_exact = 0;
  229 :   137 :   sp->time_bin = 0;
  230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  232 :   144 :     sp->birth_temperature =
  233 :   148 :     sp->last_enrichment_time = scale_factor;
  234 :   150 :     sp->last_enrichment_time = time;
  235 :   155 :   sp->group_data.mass = 0.f;
  236 :   156 :   sp->group_data.stellar_mass = 0.f;
  237 :   157 :   sp->group_data.ssfr = 0.f;
  238 :   208 :   const float h = sp->h;
  239 :   214 :   sp->density.wcount *= h_inv_dim;
  240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  241 :   218 :   sp->rho *= h_inv_dim;
  242 :   219 :   sp->n *= h_inv_dim;
  243 :   236 :       sp->id, sp->h, sp->density.wcount);
  244 :   239 :   sp->density.wcount = 0.f;
  245 :   240 :   sp->density.wcount_dh = 0.f;
  246 :   300 :   const float mass = sp->mass_init;
  247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
  248 :   306 :     age = time - sp->birth_time;
  250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  253 :    71 :     ret[0] = sp->x[0];
  254 :    72 :     ret[1] = sp->x[1];
  255 :    73 :     ret[2] = sp->x[2];
  256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  258 :   101 :   const struct gpart *gp = sp->gpart;
  259 :   128 :   if (sp->gpart != NULL)
  260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
  262 :   252 :   sp->h_tolerance =
  263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  265 :   258 :   sp->delta_neighbours =
  266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
  269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  270 :   275 :   sp->overwrite_birth_time =
  271 :   277 :   sp->overwrite_birth_density =
  272 :   279 :   sp->overwrite_birth_temperature =
  273 :   283 :   if (sp->overwrite_birth_time) {
  274 :   284 :     sp->spart_first_init_birth_time =
  275 :   289 :   if (sp->overwrite_birth_density) {
  276 :   290 :     sp->spart_first_init_birth_density =
  277 :   295 :   if (sp->overwrite_birth_temperature) {
  278 :   296 :     sp->spart_first_init_birth_temperature =
  279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
  287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
  289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
  291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
  292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  293 :   403 :           sp->max_smoothing_iterations);
  294 :   405 :   if (sp->overwrite_birth_time)
  295 :   407 :             sp->spart_first_init_birth_time);
  296 :   410 :           sp->age_threshold_unlimited);
  297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  298 :   413 :           sp->max_time_step_young);
  299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  300 :   423 :                        sp->target_neighbours);
  301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  303 :   427 :                        sp->h_tolerance);
  304 :   429 :                        sp->log_max_h_change);
  305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
  306 :   433 :                        sp->max_smoothing_iterations);
  307 :   461 :     free(sp->lum_tables_Z[i]);
  308 :   462 :     free(sp->lum_tables_ages[i]);
  309 :   463 :     free(sp->lum_tables_luminosities[i]);
  311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  312 :     3 :    61 :     return time - (double)sp->birth_time;
  313 :     4 :    81 :   sp->time_bin = 0;
  314 :     5 :    84 :   sp->group_data.mass = 0.f;
  315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
  316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
  317 :     8 :   100 :   sp->num_ngb_density = 0;
  318 :     9 :   103 :   sp->density.wcount = 0.f;
  319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
  320 :    11 :   152 :   const float h = sp->h;
  321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
  322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
  324 :    15 :   178 :   const float h = sp->h;
  325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
  326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
  327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  333 :    26 :    62 :     ret[0] = sp->x[0];
  334 :    27 :    63 :     ret[1] = sp->x[1];
  335 :    28 :    64 :     ret[2] = sp->x[2];
  336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
  339 :    32 :   111 :   if (sp->gpart != NULL)
  340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
  342 :    35 :   199 :   sp->h_tolerance =
  343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  345 :    38 :   205 :   sp->delta_neighbours =
  346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
  349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
  351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
  352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  353 :    46 :   242 :           sp->max_smoothing_iterations);
  354 :    47 :   252 :                        sp->target_neighbours);
  355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  357 :    50 :   256 :                        sp->h_tolerance);
  358 :    51 :   258 :                        sp->log_max_h_change);
  359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
  360 :    53 :   262 :                        sp->max_smoothing_iterations);
  361 :    55 :    43 :   if (sp->birth_time == -1.) {
  362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  364 :    58 :    59 :     star_age = time - sp->birth_time;
  365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  366 :    60 :    88 :     return time - (double)sp->birth_time;
  367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
  368 :    62 :   103 :   sp->num_ngb_density = 0;
  369 :    63 :   106 :   sp->density.wcount = 0.f;
  370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
  371 :    65 :   110 :   sp->N_density = 0;
  372 :    66 :   111 :   sp->N_density_exact = 0;
  373 :    67 :   112 :   sp->rho = 0.f;
  374 :    68 :   113 :   sp->rho_exact = 0.f;
  375 :    69 :   114 :   sp->n = 0.f;
  376 :    70 :   115 :   sp->n_exact = 0.f;
  377 :    71 :   116 :   sp->inhibited_exact = 0;
  378 :    72 :   137 :   sp->time_bin = 0;
  379 :    73 :   138 :   sp->f_E = -1.f;
  380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
  381 :    75 :   140 :   sp->number_of_heating_events = 0.;
  382 :    76 :   141 :   sp->number_of_SNII_events = 0;
  383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  385 :    79 :   148 :     sp->birth_temperature =
  386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
  387 :    81 :   154 :     sp->last_enrichment_time = time;
  388 :    82 :   159 :   sp->group_data.mass = 0.f;
  389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
  390 :    84 :   211 :   const float h = sp->h;
  391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
  392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  393 :    87 :   221 :   sp->rho *= h_inv_dim;
  394 :    88 :   222 :   sp->n *= h_inv_dim;
  395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
  396 :    90 :   242 :   sp->density.wcount = 0.f;
  397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
  398 :    92 :   303 :   const float mass = sp->mass_init;
  399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  400 :    94 :   309 :     age = time - sp->birth_time;
  401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  404 :    99 :    71 :     ret[0] = sp->x[0];
  405 :   100 :    72 :     ret[1] = sp->x[1];
  406 :   101 :    73 :     ret[2] = sp->x[2];
  407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
  410 :   105 :   128 :   if (sp->gpart != NULL)
  411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  413 :   108 :   253 :   sp->h_tolerance =
  414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  416 :   111 :   259 :   sp->delta_neighbours =
  417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  421 :   116 :   276 :   sp->overwrite_birth_time =
  422 :   117 :   278 :   sp->overwrite_birth_density =
  423 :   118 :   280 :   sp->overwrite_birth_temperature =
  424 :   119 :   284 :   if (sp->overwrite_birth_time) {
  425 :   120 :   285 :     sp->spart_first_init_birth_time =
  426 :   121 :   290 :   if (sp->overwrite_birth_density) {
  427 :   122 :   291 :     sp->spart_first_init_birth_density =
  428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
  429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
  430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  444 :   139 :   404 :           sp->max_smoothing_iterations);
  445 :   140 :   406 :   if (sp->overwrite_birth_time)
  446 :   141 :   408 :             sp->spart_first_init_birth_time);
  447 :   142 :   411 :           sp->age_threshold_unlimited);
  448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  449 :   144 :   414 :           sp->max_time_step_young);
  450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  451 :   146 :   424 :                        sp->target_neighbours);
  452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  454 :   149 :   428 :                        sp->h_tolerance);
  455 :   150 :   430 :                        sp->log_max_h_change);
  456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  457 :   152 :   434 :                        sp->max_smoothing_iterations);
  458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
  459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
  460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
  462 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  463 :     3 :    61 :     return time - (double)sp->birth_time;
  464 :     4 :    81 :   sp->time_bin = 0;
  465 :     5 :    84 :   sp->group_data.mass = 0.f;
  466 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
  467 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
  468 :     8 :   100 :   sp->num_ngb_density = 0;
  469 :     9 :   103 :   sp->density.wcount = 0.f;
  470 :    10 :   104 :   sp->density.wcount_dh = 0.f;
  471 :    11 :   152 :   const float h = sp->h;
  472 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
  473 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  474 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
  475 :    15 :   178 :   const float h = sp->h;
  476 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
  477 :    17 :   184 :   sp->density.wcount_dh = 0.f;
  478 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  479 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  480 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  481 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  482 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  483 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  484 :    26 :    62 :     ret[0] = sp->x[0];
  485 :    27 :    63 :     ret[1] = sp->x[1];
  486 :    28 :    64 :     ret[2] = sp->x[2];
  487 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  488 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  489 :    31 :    92 :   const struct gpart *gp = sp->gpart;
  490 :    32 :   111 :   if (sp->gpart != NULL)
  491 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  492 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
  493 :    35 :   199 :   sp->h_tolerance =
  494 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  495 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  496 :    38 :   205 :   sp->delta_neighbours =
  497 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  498 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  499 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
  500 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  501 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
  502 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
  503 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  504 :    46 :   242 :           sp->max_smoothing_iterations);
  505 :    47 :   252 :                        sp->target_neighbours);
  506 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  507 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  508 :    50 :   256 :                        sp->h_tolerance);
  509 :    51 :   258 :                        sp->log_max_h_change);
  510 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
  511 :    53 :   262 :                        sp->max_smoothing_iterations);
  512 :    55 :    43 :   if (sp->birth_time == -1.) {
  513 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  514 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  515 :    58 :    59 :     star_age = time - sp->birth_time;
  516 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  517 :    60 :    88 :     return time - (double)sp->birth_time;
  518 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
  519 :    62 :   103 :   sp->num_ngb_density = 0;
  520 :    63 :   106 :   sp->density.wcount = 0.f;
  521 :    64 :   107 :   sp->density.wcount_dh = 0.f;
  522 :    65 :   110 :   sp->N_density = 0;
  523 :    66 :   111 :   sp->N_density_exact = 0;
  524 :    67 :   112 :   sp->rho = 0.f;
  525 :    68 :   113 :   sp->rho_exact = 0.f;
  526 :    69 :   114 :   sp->n = 0.f;
  527 :    70 :   115 :   sp->n_exact = 0.f;
  528 :    71 :   116 :   sp->inhibited_exact = 0;
  529 :    72 :   137 :   sp->time_bin = 0;
  530 :    73 :   138 :   sp->f_E = -1.f;
  531 :    74 :   139 :   sp->count_since_last_enrichment = -1;
  532 :    75 :   140 :   sp->number_of_heating_events = 0.;
  533 :    76 :   141 :   sp->number_of_SNII_events = 0;
  534 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  535 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  536 :    79 :   148 :     sp->birth_temperature =
  537 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
  538 :    81 :   154 :     sp->last_enrichment_time = time;
  539 :    82 :   159 :   sp->group_data.mass = 0.f;
  540 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
  541 :    84 :   211 :   const float h = sp->h;
  542 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
  543 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  544 :    87 :   221 :   sp->rho *= h_inv_dim;
  545 :    88 :   222 :   sp->n *= h_inv_dim;
  546 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
  547 :    90 :   242 :   sp->density.wcount = 0.f;
  548 :    91 :   243 :   sp->density.wcount_dh = 0.f;
  549 :    92 :   303 :   const float mass = sp->mass_init;
  550 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  551 :    94 :   309 :     age = time - sp->birth_time;
  552 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  553 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  554 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  555 :    99 :    71 :     ret[0] = sp->x[0];
  556 :   100 :    72 :     ret[1] = sp->x[1];
  557 :   101 :    73 :     ret[2] = sp->x[2];
  558 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  559 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  560 :   104 :   101 :   const struct gpart *gp = sp->gpart;
  561 :   105 :   128 :   if (sp->gpart != NULL)
  562 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  563 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  564 :   108 :   253 :   sp->h_tolerance =
  565 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  566 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  567 :   111 :   259 :   sp->delta_neighbours =
  568 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  569 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  570 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  571 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  572 :   116 :   276 :   sp->overwrite_birth_time =
  573 :   117 :   278 :   sp->overwrite_birth_density =
  574 :   118 :   280 :   sp->overwrite_birth_temperature =
  575 :   119 :   284 :   if (sp->overwrite_birth_time) {
  576 :   120 :   285 :     sp->spart_first_init_birth_time =
  577 :   121 :   290 :   if (sp->overwrite_birth_density) {
  578 :   122 :   291 :     sp->spart_first_init_birth_density =
  579 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
  580 :   124 :   297 :     sp->spart_first_init_birth_temperature =
  581 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  582 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  583 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  584 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  585 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  586 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  587 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  588 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  589 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  590 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  591 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  592 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  593 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  594 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  595 :   139 :   404 :           sp->max_smoothing_iterations);
  596 :   140 :   406 :   if (sp->overwrite_birth_time)
  597 :   141 :   408 :             sp->spart_first_init_birth_time);
  598 :   142 :   411 :           sp->age_threshold_unlimited);
  599 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  600 :   144 :   414 :           sp->max_time_step_young);
  601 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  602 :   146 :   424 :                        sp->target_neighbours);
  603 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  604 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  605 :   149 :   428 :                        sp->h_tolerance);
  606 :   150 :   430 :                        sp->log_max_h_change);
  607 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  608 :   152 :   434 :                        sp->max_smoothing_iterations);
  609 :   153 :   462 :     free(sp->lum_tables_Z[i]);
  610 :   154 :   463 :     free(sp->lum_tables_ages[i]);
  611 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
  612 :   157 :    58 :     const double birth = sp->birth_scale_factor;
  613 :   158 :    62 :     return time - (double)sp->birth_time;
  614 :   159 :    76 :     sp->ids_ngbs_density[i] = -1;
  615 :   160 :    77 :   sp->num_ngb_density = 0;
  616 :   161 :    80 :   sp->density.wcount = 0.f;
  617 :   162 :    81 :   sp->density.wcount_dh = 0.f;
  618 :   163 :   100 :   sp->time_bin = 0;
  619 :   164 :   105 :   sp->group_data.mass = 0.f;
  620 :   165 :   106 :   sp->group_data.stellar_mass = 0.f;
  621 :   166 :   157 :   const float h = sp->h;
  622 :   167 :   163 :   sp->density.wcount *= h_inv_dim;
  623 :   168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  624 :   169 :   180 :       sp->id, sp->h, sp->density.wcount);
  625 :   170 :   183 :   sp->density.wcount = 0.f;
  626 :   171 :   184 :   sp->density.wcount_dh = 0.f;
  627 :   173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  628 :   174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  629 :   175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  630 :   177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  631 :   178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  632 :   179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  633 :   180 :    64 :     ret[0] = sp->x[0];
  634 :   181 :    65 :     ret[1] = sp->x[1];
  635 :   182 :    66 :     ret[2] = sp->x[2];
  636 :   183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  637 :   184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  638 :   185 :    94 :   const struct gpart *gp = sp->gpart;
  639 :   186 :   113 :   if (sp->gpart != NULL)
  640 :   187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  641 :   188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
  642 :   189 :   211 :   sp->h_tolerance =
  643 :   190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  644 :   191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  645 :   192 :   217 :   sp->delta_neighbours =
  646 :   193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  647 :   194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  648 :   195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
  649 :   196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  650 :   197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
  651 :   198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
  652 :   199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  653 :   200 :   254 :           sp->max_smoothing_iterations);
  654 :   201 :   264 :                        sp->target_neighbours);
  655 :   202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  656 :   203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  657 :   204 :   268 :                        sp->h_tolerance);
  658 :   205 :   270 :                        sp->log_max_h_change);
  659 :   206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
  660 :   207 :   274 :                        sp->max_smoothing_iterations);
  661 :   209 :    72 :   sp->group_data.mass = 0.f;
  662 :   210 :    73 :   sp->group_data.stellar_mass = 0.f;
  663 :   212 :    43 :   if (sp->birth_time == -1.) {
  664 :   213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  665 :   214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  666 :   215 :    59 :     star_age = time - sp->birth_time;
  667 :   216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  668 :   217 :    88 :     return time - (double)sp->birth_time;
  669 :   218 :   102 :     sp->ids_ngbs_density[i] = -1;
  670 :   219 :   103 :   sp->num_ngb_density = 0;
  671 :   220 :   106 :   sp->density.wcount = 0.f;
  672 :   221 :   107 :   sp->density.wcount_dh = 0.f;
  673 :   222 :   110 :   sp->N_density = 0;
  674 :   223 :   111 :   sp->N_density_exact = 0;
  675 :   224 :   112 :   sp->rho = 0.f;
  676 :   225 :   113 :   sp->rho_exact = 0.f;
  677 :   226 :   114 :   sp->n = 0.f;
  678 :   227 :   115 :   sp->n_exact = 0.f;
  679 :   228 :   116 :   sp->inhibited_exact = 0;
  680 :   229 :   137 :   sp->time_bin = 0;
  681 :   230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  682 :   231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  683 :   232 :   144 :     sp->birth_temperature =
  684 :   233 :   148 :     sp->last_enrichment_time = scale_factor;
  685 :   234 :   150 :     sp->last_enrichment_time = time;
  686 :   235 :   155 :   sp->group_data.mass = 0.f;
  687 :   236 :   156 :   sp->group_data.stellar_mass = 0.f;
  688 :   237 :   157 :   sp->group_data.ssfr = 0.f;
  689 :   238 :   208 :   const float h = sp->h;
  690 :   239 :   214 :   sp->density.wcount *= h_inv_dim;
  691 :   240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  692 :   241 :   218 :   sp->rho *= h_inv_dim;
  693 :   242 :   219 :   sp->n *= h_inv_dim;
  694 :   243 :   236 :       sp->id, sp->h, sp->density.wcount);
  695 :   244 :   239 :   sp->density.wcount = 0.f;
  696 :   245 :   240 :   sp->density.wcount_dh = 0.f;
  697 :   246 :   300 :   const float mass = sp->mass_init;
  698 :   247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
  699 :   248 :   306 :     age = time - sp->birth_time;
  700 :   250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  701 :   251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  702 :   252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  703 :   253 :    71 :     ret[0] = sp->x[0];
  704 :   254 :    72 :     ret[1] = sp->x[1];
  705 :   255 :    73 :     ret[2] = sp->x[2];
  706 :   256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  707 :   257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  708 :   258 :   101 :   const struct gpart *gp = sp->gpart;
  709 :   259 :   128 :   if (sp->gpart != NULL)
  710 :   260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  711 :   261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
  712 :   262 :   252 :   sp->h_tolerance =
  713 :   263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  714 :   264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  715 :   265 :   258 :   sp->delta_neighbours =
  716 :   266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  717 :   267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  718 :   268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
  719 :   269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  720 :   270 :   275 :   sp->overwrite_birth_time =
  721 :   271 :   277 :   sp->overwrite_birth_density =
  722 :   272 :   279 :   sp->overwrite_birth_temperature =
  723 :   273 :   283 :   if (sp->overwrite_birth_time) {
  724 :   274 :   284 :     sp->spart_first_init_birth_time =
  725 :   275 :   289 :   if (sp->overwrite_birth_density) {
  726 :   276 :   290 :     sp->spart_first_init_birth_density =
  727 :   277 :   295 :   if (sp->overwrite_birth_temperature) {
  728 :   278 :   296 :     sp->spart_first_init_birth_temperature =
  729 :   279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  730 :   280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  731 :   281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  732 :   282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  733 :   283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  734 :   284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  735 :   285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  736 :   286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
  737 :   287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  738 :   288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
  739 :   289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  740 :   290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
  741 :   291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
  742 :   292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  743 :   293 :   403 :           sp->max_smoothing_iterations);
  744 :   294 :   405 :   if (sp->overwrite_birth_time)
  745 :   295 :   407 :             sp->spart_first_init_birth_time);
  746 :   296 :   410 :           sp->age_threshold_unlimited);
  747 :   297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  748 :   298 :   413 :           sp->max_time_step_young);
  749 :   299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  750 :   300 :   423 :                        sp->target_neighbours);
  751 :   301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  752 :   302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  753 :   303 :   427 :                        sp->h_tolerance);
  754 :   304 :   429 :                        sp->log_max_h_change);
  755 :   305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
  756 :   306 :   433 :                        sp->max_smoothing_iterations);
  757 :   307 :   461 :     free(sp->lum_tables_Z[i]);
  758 :   308 :   462 :     free(sp->lum_tables_ages[i]);
  759 :   309 :   463 :     free(sp->lum_tables_luminosities[i]);
  760 :   311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  761 :   312 :     3 :    61 :     return time - (double)sp->birth_time;
  762 :   313 :     4 :    81 :   sp->time_bin = 0;
  763 :   314 :     5 :    84 :   sp->group_data.mass = 0.f;
  764 :   315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
  765 :   316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
  766 :   317 :     8 :   100 :   sp->num_ngb_density = 0;
  767 :   318 :     9 :   103 :   sp->density.wcount = 0.f;
  768 :   319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
  769 :   320 :    11 :   152 :   const float h = sp->h;
  770 :   321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
  771 :   322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  772 :   323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
  773 :   324 :    15 :   178 :   const float h = sp->h;
  774 :   325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
  775 :   326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
  776 :   327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  777 :   328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  778 :   329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  779 :   330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  780 :   331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  781 :   332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  782 :   333 :    26 :    62 :     ret[0] = sp->x[0];
  783 :   334 :    27 :    63 :     ret[1] = sp->x[1];
  784 :   335 :    28 :    64 :     ret[2] = sp->x[2];
  785 :   336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  786 :   337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  787 :   338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
  788 :   339 :    32 :   111 :   if (sp->gpart != NULL)
  789 :   340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  790 :   341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
  791 :   342 :    35 :   199 :   sp->h_tolerance =
  792 :   343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  793 :   344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  794 :   345 :    38 :   205 :   sp->delta_neighbours =
  795 :   346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  796 :   347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  797 :   348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
  798 :   349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  799 :   350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
  800 :   351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
  801 :   352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  802 :   353 :    46 :   242 :           sp->max_smoothing_iterations);
  803 :   354 :    47 :   252 :                        sp->target_neighbours);
  804 :   355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  805 :   356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  806 :   357 :    50 :   256 :                        sp->h_tolerance);
  807 :   358 :    51 :   258 :                        sp->log_max_h_change);
  808 :   359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
  809 :   360 :    53 :   262 :                        sp->max_smoothing_iterations);
  810 :   361 :    55 :    43 :   if (sp->birth_time == -1.) {
  811 :   362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  812 :   363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  813 :   364 :    58 :    59 :     star_age = time - sp->birth_time;
  814 :   365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  815 :   366 :    60 :    88 :     return time - (double)sp->birth_time;
  816 :   367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
  817 :   368 :    62 :   103 :   sp->num_ngb_density = 0;
  818 :   369 :    63 :   106 :   sp->density.wcount = 0.f;
  819 :   370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
  820 :   371 :    65 :   110 :   sp->N_density = 0;
  821 :   372 :    66 :   111 :   sp->N_density_exact = 0;
  822 :   373 :    67 :   112 :   sp->rho = 0.f;
  823 :   374 :    68 :   113 :   sp->rho_exact = 0.f;
  824 :   375 :    69 :   114 :   sp->n = 0.f;
  825 :   376 :    70 :   115 :   sp->n_exact = 0.f;
  826 :   377 :    71 :   116 :   sp->inhibited_exact = 0;
  827 :   378 :    72 :   137 :   sp->time_bin = 0;
  828 :   379 :    73 :   138 :   sp->f_E = -1.f;
  829 :   380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
  830 :   381 :    75 :   140 :   sp->number_of_heating_events = 0.;
  831 :   382 :    76 :   141 :   sp->number_of_SNII_events = 0;
  832 :   383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  833 :   384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  834 :   385 :    79 :   148 :     sp->birth_temperature =
  835 :   386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
  836 :   387 :    81 :   154 :     sp->last_enrichment_time = time;
  837 :   388 :    82 :   159 :   sp->group_data.mass = 0.f;
  838 :   389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
  839 :   390 :    84 :   211 :   const float h = sp->h;
  840 :   391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
  841 :   392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  842 :   393 :    87 :   221 :   sp->rho *= h_inv_dim;
  843 :   394 :    88 :   222 :   sp->n *= h_inv_dim;
  844 :   395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
  845 :   396 :    90 :   242 :   sp->density.wcount = 0.f;
  846 :   397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
  847 :   398 :    92 :   303 :   const float mass = sp->mass_init;
  848 :   399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  849 :   400 :    94 :   309 :     age = time - sp->birth_time;
  850 :   401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  851 :   402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  852 :   403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  853 :   404 :    99 :    71 :     ret[0] = sp->x[0];
  854 :   405 :   100 :    72 :     ret[1] = sp->x[1];
  855 :   406 :   101 :    73 :     ret[2] = sp->x[2];
  856 :   407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  857 :   408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  858 :   409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
  859 :   410 :   105 :   128 :   if (sp->gpart != NULL)
  860 :   411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  861 :   412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  862 :   413 :   108 :   253 :   sp->h_tolerance =
  863 :   414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  864 :   415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  865 :   416 :   111 :   259 :   sp->delta_neighbours =
  866 :   417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  867 :   418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  868 :   419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  869 :   420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  870 :   421 :   116 :   276 :   sp->overwrite_birth_time =
  871 :   422 :   117 :   278 :   sp->overwrite_birth_density =
  872 :   423 :   118 :   280 :   sp->overwrite_birth_temperature =
  873 :   424 :   119 :   284 :   if (sp->overwrite_birth_time) {
  874 :   425 :   120 :   285 :     sp->spart_first_init_birth_time =
  875 :   426 :   121 :   290 :   if (sp->overwrite_birth_density) {
  876 :   427 :   122 :   291 :     sp->spart_first_init_birth_density =
  877 :   428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
  878 :   429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
  879 :   430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  880 :   431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  881 :   432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  882 :   433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  883 :   434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  884 :   435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  885 :   436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  886 :   437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  887 :   438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  888 :   439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  889 :   440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  890 :   441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  891 :   442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  892 :   443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  893 :   444 :   139 :   404 :           sp->max_smoothing_iterations);
  894 :   445 :   140 :   406 :   if (sp->overwrite_birth_time)
  895 :   446 :   141 :   408 :             sp->spart_first_init_birth_time);
  896 :   447 :   142 :   411 :           sp->age_threshold_unlimited);
  897 :   448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  898 :   449 :   144 :   414 :           sp->max_time_step_young);
  899 :   450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  900 :   451 :   146 :   424 :                        sp->target_neighbours);
  901 :   452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  902 :   453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  903 :   454 :   149 :   428 :                        sp->h_tolerance);
  904 :   455 :   150 :   430 :                        sp->log_max_h_change);
  905 :   456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  906 :   457 :   152 :   434 :                        sp->max_smoothing_iterations);
  907 :   458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
  908 :   459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
  909 :   460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
./stars/fof_data.:
    2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
    3 :    61 :     return time - (double)sp->birth_time;
    4 :    81 :   sp->time_bin = 0;
    5 :    84 :   sp->group_data.mass = 0.f;
    6 :    85 :   sp->group_data.stellar_mass = 0.f;
    7 :    99 :     sp->ids_ngbs_density[i] = -1;
    8 :   100 :   sp->num_ngb_density = 0;
    9 :   103 :   sp->density.wcount = 0.f;
   10 :   104 :   sp->density.wcount_dh = 0.f;
   11 :   152 :   const float h = sp->h;
   12 :   158 :   sp->density.wcount *= h_inv_dim;
   13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
   14 :   175 :       sp->id, sp->h, sp->density.wcount);
   15 :   178 :   const float h = sp->h;
   16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
   17 :   184 :   sp->density.wcount_dh = 0.f;
   19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
   20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
   21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
   23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   26 :    62 :     ret[0] = sp->x[0];
   27 :    63 :     ret[1] = sp->x[1];
   28 :    64 :     ret[2] = sp->x[2];
   29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
   30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
   31 :    92 :   const struct gpart *gp = sp->gpart;
   32 :   111 :   if (sp->gpart != NULL)
   33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
   34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
   35 :   199 :   sp->h_tolerance =
   36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
   37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
   38 :   205 :   sp->delta_neighbours =
   39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
   40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
   41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
   42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
   43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
   44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
   45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
   46 :   242 :           sp->max_smoothing_iterations);
   47 :   252 :                        sp->target_neighbours);
   48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
   49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
   50 :   256 :                        sp->h_tolerance);
   51 :   258 :                        sp->log_max_h_change);
   52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
   53 :   262 :                        sp->max_smoothing_iterations);
   55 :    43 :   if (sp->birth_time == -1.) {
   56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
   57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
   58 :    59 :     star_age = time - sp->birth_time;
   59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
   60 :    88 :     return time - (double)sp->birth_time;
   61 :   102 :     sp->ids_ngbs_density[i] = -1;
   62 :   103 :   sp->num_ngb_density = 0;
   63 :   106 :   sp->density.wcount = 0.f;
   64 :   107 :   sp->density.wcount_dh = 0.f;
   65 :   110 :   sp->N_density = 0;
   66 :   111 :   sp->N_density_exact = 0;
   67 :   112 :   sp->rho = 0.f;
   68 :   113 :   sp->rho_exact = 0.f;
   69 :   114 :   sp->n = 0.f;
   70 :   115 :   sp->n_exact = 0.f;
   71 :   116 :   sp->inhibited_exact = 0;
   72 :   137 :   sp->time_bin = 0;
   73 :   138 :   sp->f_E = -1.f;
   74 :   139 :   sp->count_since_last_enrichment = -1;
   75 :   140 :   sp->number_of_heating_events = 0.;
   76 :   141 :   sp->number_of_SNII_events = 0;
   77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
   78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
   79 :   148 :     sp->birth_temperature =
   80 :   152 :     sp->last_enrichment_time = scale_factor;
   81 :   154 :     sp->last_enrichment_time = time;
   82 :   159 :   sp->group_data.mass = 0.f;
   83 :   160 :   sp->group_data.stellar_mass = 0.f;
   84 :   211 :   const float h = sp->h;
   85 :   217 :   sp->density.wcount *= h_inv_dim;
   86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
   87 :   221 :   sp->rho *= h_inv_dim;
   88 :   222 :   sp->n *= h_inv_dim;
   89 :   239 :       sp->id, sp->h, sp->density.wcount);
   90 :   242 :   sp->density.wcount = 0.f;
   91 :   243 :   sp->density.wcount_dh = 0.f;
   92 :   303 :   const float mass = sp->mass_init;
   93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
   94 :   309 :     age = time - sp->birth_time;
   96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
   97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
   98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
   99 :    71 :     ret[0] = sp->x[0];
  100 :    72 :     ret[1] = sp->x[1];
  101 :    73 :     ret[2] = sp->x[2];
  102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  104 :   101 :   const struct gpart *gp = sp->gpart;
  105 :   128 :   if (sp->gpart != NULL)
  106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  108 :   253 :   sp->h_tolerance =
  109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  111 :   259 :   sp->delta_neighbours =
  112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  116 :   276 :   sp->overwrite_birth_time =
  117 :   278 :   sp->overwrite_birth_density =
  118 :   280 :   sp->overwrite_birth_temperature =
  119 :   284 :   if (sp->overwrite_birth_time) {
  120 :   285 :     sp->spart_first_init_birth_time =
  121 :   290 :   if (sp->overwrite_birth_density) {
  122 :   291 :     sp->spart_first_init_birth_density =
  123 :   296 :   if (sp->overwrite_birth_temperature) {
  124 :   297 :     sp->spart_first_init_birth_temperature =
  125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  139 :   404 :           sp->max_smoothing_iterations);
  140 :   406 :   if (sp->overwrite_birth_time)
  141 :   408 :             sp->spart_first_init_birth_time);
  142 :   411 :           sp->age_threshold_unlimited);
  143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  144 :   414 :           sp->max_time_step_young);
  145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  146 :   424 :                        sp->target_neighbours);
  147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  149 :   428 :                        sp->h_tolerance);
  150 :   430 :                        sp->log_max_h_change);
  151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  152 :   434 :                        sp->max_smoothing_iterations);
  153 :   462 :     free(sp->lum_tables_Z[i]);
  154 :   463 :     free(sp->lum_tables_ages[i]);
  155 :   464 :     free(sp->lum_tables_luminosities[i]);
  157 :    58 :     const double birth = sp->birth_scale_factor;
  158 :    62 :     return time - (double)sp->birth_time;
  159 :    76 :     sp->ids_ngbs_density[i] = -1;
  160 :    77 :   sp->num_ngb_density = 0;
  161 :    80 :   sp->density.wcount = 0.f;
  162 :    81 :   sp->density.wcount_dh = 0.f;
  163 :   100 :   sp->time_bin = 0;
  164 :   105 :   sp->group_data.mass = 0.f;
  165 :   106 :   sp->group_data.stellar_mass = 0.f;
  166 :   157 :   const float h = sp->h;
  167 :   163 :   sp->density.wcount *= h_inv_dim;
  168 :   164 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  169 :   180 :       sp->id, sp->h, sp->density.wcount);
  170 :   183 :   sp->density.wcount = 0.f;
  171 :   184 :   sp->density.wcount_dh = 0.f;
  173 :    42 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  174 :    43 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  175 :    44 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  177 :    60 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  178 :    61 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  179 :    62 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  180 :    64 :     ret[0] = sp->x[0];
  181 :    65 :     ret[1] = sp->x[1];
  182 :    66 :     ret[2] = sp->x[2];
  183 :    83 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  184 :    84 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  185 :    94 :   const struct gpart *gp = sp->gpart;
  186 :   113 :   if (sp->gpart != NULL)
  187 :   114 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  188 :   207 :   sp->eta_neighbours = parser_get_opt_param_float(
  189 :   211 :   sp->h_tolerance =
  190 :   215 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  191 :   216 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  192 :   217 :   sp->delta_neighbours =
  193 :   218 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  194 :   222 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  195 :   229 :     sp->log_max_h_change = p->log_max_h_change;
  196 :   231 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  197 :   243 :           sp->eta_neighbours, sp->target_neighbours);
  198 :   246 :           sp->h_tolerance, sp->delta_neighbours);
  199 :   251 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  200 :   254 :           sp->max_smoothing_iterations);
  201 :   264 :                        sp->target_neighbours);
  202 :   265 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  203 :   266 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  204 :   268 :                        sp->h_tolerance);
  205 :   270 :                        sp->log_max_h_change);
  206 :   272 :                        pow_dimension(expf(sp->log_max_h_change)));
  207 :   274 :                        sp->max_smoothing_iterations);
  209 :    72 :   sp->group_data.mass = 0.f;
  210 :    73 :   sp->group_data.stellar_mass = 0.f;
  212 :    43 :   if (sp->birth_time == -1.) {
  213 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  214 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  215 :    59 :     star_age = time - sp->birth_time;
  216 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  217 :    88 :     return time - (double)sp->birth_time;
  218 :   102 :     sp->ids_ngbs_density[i] = -1;
  219 :   103 :   sp->num_ngb_density = 0;
  220 :   106 :   sp->density.wcount = 0.f;
  221 :   107 :   sp->density.wcount_dh = 0.f;
  222 :   110 :   sp->N_density = 0;
  223 :   111 :   sp->N_density_exact = 0;
  224 :   112 :   sp->rho = 0.f;
  225 :   113 :   sp->rho_exact = 0.f;
  226 :   114 :   sp->n = 0.f;
  227 :   115 :   sp->n_exact = 0.f;
  228 :   116 :   sp->inhibited_exact = 0;
  229 :   137 :   sp->time_bin = 0;
  230 :   140 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  231 :   142 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  232 :   144 :     sp->birth_temperature =
  233 :   148 :     sp->last_enrichment_time = scale_factor;
  234 :   150 :     sp->last_enrichment_time = time;
  235 :   155 :   sp->group_data.mass = 0.f;
  236 :   156 :   sp->group_data.stellar_mass = 0.f;
  237 :   157 :   sp->group_data.ssfr = 0.f;
  238 :   208 :   const float h = sp->h;
  239 :   214 :   sp->density.wcount *= h_inv_dim;
  240 :   215 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  241 :   218 :   sp->rho *= h_inv_dim;
  242 :   219 :   sp->n *= h_inv_dim;
  243 :   236 :       sp->id, sp->h, sp->density.wcount);
  244 :   239 :   sp->density.wcount = 0.f;
  245 :   240 :   sp->density.wcount_dh = 0.f;
  246 :   300 :   const float mass = sp->mass_init;
  247 :   304 :         cosmo, sp->birth_scale_factor, cosmo->a);
  248 :   306 :     age = time - sp->birth_time;
  250 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  251 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  252 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  253 :    71 :     ret[0] = sp->x[0];
  254 :    72 :     ret[1] = sp->x[1];
  255 :    73 :     ret[2] = sp->x[2];
  256 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  257 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  258 :   101 :   const struct gpart *gp = sp->gpart;
  259 :   128 :   if (sp->gpart != NULL)
  260 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  261 :   248 :   sp->eta_neighbours = parser_get_opt_param_float(
  262 :   252 :   sp->h_tolerance =
  263 :   256 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  264 :   257 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  265 :   258 :   sp->delta_neighbours =
  266 :   259 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  267 :   263 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  268 :   270 :     sp->log_max_h_change = p->log_max_h_change;
  269 :   272 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  270 :   275 :   sp->overwrite_birth_time =
  271 :   277 :   sp->overwrite_birth_density =
  272 :   279 :   sp->overwrite_birth_temperature =
  273 :   283 :   if (sp->overwrite_birth_time) {
  274 :   284 :     sp->spart_first_init_birth_time =
  275 :   289 :   if (sp->overwrite_birth_density) {
  276 :   290 :     sp->spart_first_init_birth_density =
  277 :   295 :   if (sp->overwrite_birth_temperature) {
  278 :   296 :     sp->spart_first_init_birth_temperature =
  279 :   324 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  280 :   325 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  281 :   326 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  282 :   327 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  283 :   342 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  284 :   343 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  285 :   344 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  286 :   358 :           sp->lum_tables_Z[i][k++] = log10(z);
  287 :   362 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  288 :   365 :         sp->lum_tables_luminosities[i][j] = log10(L);
  289 :   382 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  290 :   392 :           sp->eta_neighbours, sp->target_neighbours);
  291 :   395 :           sp->h_tolerance, sp->delta_neighbours);
  292 :   400 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  293 :   403 :           sp->max_smoothing_iterations);
  294 :   405 :   if (sp->overwrite_birth_time)
  295 :   407 :             sp->spart_first_init_birth_time);
  296 :   410 :           sp->age_threshold_unlimited);
  297 :   411 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  298 :   413 :           sp->max_time_step_young);
  299 :   414 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  300 :   423 :                        sp->target_neighbours);
  301 :   424 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  302 :   425 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  303 :   427 :                        sp->h_tolerance);
  304 :   429 :                        sp->log_max_h_change);
  305 :   431 :                        pow_dimension(expf(sp->log_max_h_change)));
  306 :   433 :                        sp->max_smoothing_iterations);
  307 :   461 :     free(sp->lum_tables_Z[i]);
  308 :   462 :     free(sp->lum_tables_ages[i]);
  309 :   463 :     free(sp->lum_tables_luminosities[i]);
  311 :     2 :    59 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  312 :     3 :    61 :     return time - (double)sp->birth_time;
  313 :     4 :    81 :   sp->time_bin = 0;
  314 :     5 :    84 :   sp->group_data.mass = 0.f;
  315 :     6 :    85 :   sp->group_data.stellar_mass = 0.f;
  316 :     7 :    99 :     sp->ids_ngbs_density[i] = -1;
  317 :     8 :   100 :   sp->num_ngb_density = 0;
  318 :     9 :   103 :   sp->density.wcount = 0.f;
  319 :    10 :   104 :   sp->density.wcount_dh = 0.f;
  320 :    11 :   152 :   const float h = sp->h;
  321 :    12 :   158 :   sp->density.wcount *= h_inv_dim;
  322 :    13 :   159 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  323 :    14 :   175 :       sp->id, sp->h, sp->density.wcount);
  324 :    15 :   178 :   const float h = sp->h;
  325 :    16 :   183 :   sp->density.wcount = kernel_root * h_inv_dim;
  326 :    17 :   184 :   sp->density.wcount_dh = 0.f;
  327 :    19 :    40 :   acc[0] = sp->gpart->a_grav[0] + sp->gpart->a_grav_mesh[0];
  328 :    20 :    41 :   acc[1] = sp->gpart->a_grav[1] + sp->gpart->a_grav_mesh[1];
  329 :    21 :    42 :   acc[2] = sp->gpart->a_grav[2] + sp->gpart->a_grav_mesh[2];
  330 :    23 :    58 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  331 :    24 :    59 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  332 :    25 :    60 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  333 :    26 :    62 :     ret[0] = sp->x[0];
  334 :    27 :    63 :     ret[1] = sp->x[1];
  335 :    28 :    64 :     ret[2] = sp->x[2];
  336 :    29 :    81 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  337 :    30 :    82 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  338 :    31 :    92 :   const struct gpart *gp = sp->gpart;
  339 :    32 :   111 :   if (sp->gpart != NULL)
  340 :    33 :   112 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  341 :    34 :   195 :   sp->eta_neighbours = parser_get_opt_param_float(
  342 :    35 :   199 :   sp->h_tolerance =
  343 :    36 :   203 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  344 :    37 :   204 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  345 :    38 :   205 :   sp->delta_neighbours =
  346 :    39 :   206 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  347 :    40 :   210 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  348 :    41 :   217 :     sp->log_max_h_change = p->log_max_h_change;
  349 :    42 :   219 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  350 :    43 :   231 :           sp->eta_neighbours, sp->target_neighbours);
  351 :    44 :   234 :           sp->h_tolerance, sp->delta_neighbours);
  352 :    45 :   239 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  353 :    46 :   242 :           sp->max_smoothing_iterations);
  354 :    47 :   252 :                        sp->target_neighbours);
  355 :    48 :   253 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  356 :    49 :   254 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  357 :    50 :   256 :                        sp->h_tolerance);
  358 :    51 :   258 :                        sp->log_max_h_change);
  359 :    52 :   260 :                        pow_dimension(expf(sp->log_max_h_change)));
  360 :    53 :   262 :                        sp->max_smoothing_iterations);
  361 :    55 :    43 :   if (sp->birth_time == -1.) {
  362 :    56 :    52 :     if (sp->birth_scale_factor >= cosmo->a) {
  363 :    57 :    56 :           cosmo, sp->birth_scale_factor, cosmo->a);
  364 :    58 :    59 :     star_age = time - sp->birth_time;
  365 :    59 :    86 :         cosmo, (double)sp->birth_scale_factor, cosmo->a);
  366 :    60 :    88 :     return time - (double)sp->birth_time;
  367 :    61 :   102 :     sp->ids_ngbs_density[i] = -1;
  368 :    62 :   103 :   sp->num_ngb_density = 0;
  369 :    63 :   106 :   sp->density.wcount = 0.f;
  370 :    64 :   107 :   sp->density.wcount_dh = 0.f;
  371 :    65 :   110 :   sp->N_density = 0;
  372 :    66 :   111 :   sp->N_density_exact = 0;
  373 :    67 :   112 :   sp->rho = 0.f;
  374 :    68 :   113 :   sp->rho_exact = 0.f;
  375 :    69 :   114 :   sp->n = 0.f;
  376 :    70 :   115 :   sp->n_exact = 0.f;
  377 :    71 :   116 :   sp->inhibited_exact = 0;
  378 :    72 :   137 :   sp->time_bin = 0;
  379 :    73 :   138 :   sp->f_E = -1.f;
  380 :    74 :   139 :   sp->count_since_last_enrichment = -1;
  381 :    75 :   140 :   sp->number_of_heating_events = 0.;
  382 :    76 :   141 :   sp->number_of_SNII_events = 0;
  383 :    77 :   144 :     sp->birth_time = stars_properties->spart_first_init_birth_time;
  384 :    78 :   146 :     sp->birth_density = stars_properties->spart_first_init_birth_density;
  385 :    79 :   148 :     sp->birth_temperature =
  386 :    80 :   152 :     sp->last_enrichment_time = scale_factor;
  387 :    81 :   154 :     sp->last_enrichment_time = time;
  388 :    82 :   159 :   sp->group_data.mass = 0.f;
  389 :    83 :   160 :   sp->group_data.stellar_mass = 0.f;
  390 :    84 :   211 :   const float h = sp->h;
  391 :    85 :   217 :   sp->density.wcount *= h_inv_dim;
  392 :    86 :   218 :   sp->density.wcount_dh *= h_inv_dim_plus_one;
  393 :    87 :   221 :   sp->rho *= h_inv_dim;
  394 :    88 :   222 :   sp->n *= h_inv_dim;
  395 :    89 :   239 :       sp->id, sp->h, sp->density.wcount);
  396 :    90 :   242 :   sp->density.wcount = 0.f;
  397 :    91 :   243 :   sp->density.wcount_dh = 0.f;
  398 :    92 :   303 :   const float mass = sp->mass_init;
  399 :    93 :   307 :         cosmo, sp->birth_scale_factor, cosmo->a);
  400 :    94 :   309 :     age = time - sp->birth_time;
  401 :    96 :    67 :     ret[0] = box_wrap(sp->x[0], 0.0, s->dim[0]);
  402 :    97 :    68 :     ret[1] = box_wrap(sp->x[1], 0.0, s->dim[1]);
  403 :    98 :    69 :     ret[2] = box_wrap(sp->x[2], 0.0, s->dim[2]);
  404 :    99 :    71 :     ret[0] = sp->x[0];
  405 :   100 :    72 :     ret[1] = sp->x[1];
  406 :   101 :    73 :     ret[2] = sp->x[2];
  407 :   102 :    90 :   const integertime_t ti_beg = get_integer_time_begin(ti_current, sp->time_bin);
  408 :   103 :    91 :   const integertime_t ti_end = get_integer_time_end(ti_current, sp->time_bin);
  409 :   104 :   101 :   const struct gpart *gp = sp->gpart;
  410 :   105 :   128 :   if (sp->gpart != NULL)
  411 :   106 :   129 :     ret[0] = gravity_get_comoving_potential(sp->gpart);
  412 :   107 :   249 :   sp->eta_neighbours = parser_get_opt_param_float(
  413 :   108 :   253 :   sp->h_tolerance =
  414 :   109 :   257 :   sp->target_neighbours = pow_dimension(sp->eta_neighbours) * kernel_norm;
  415 :   110 :   258 :   const float delta_eta = sp->eta_neighbours * (1.f + sp->h_tolerance);
  416 :   111 :   259 :   sp->delta_neighbours =
  417 :   112 :   260 :       (pow_dimension(delta_eta) - pow_dimension(sp->eta_neighbours)) *
  418 :   113 :   264 :   sp->max_smoothing_iterations = parser_get_opt_param_int(
  419 :   114 :   271 :     sp->log_max_h_change = p->log_max_h_change;
  420 :   115 :   273 :     sp->log_max_h_change = logf(powf(max_volume_change, hydro_dimension_inv));
  421 :   116 :   276 :   sp->overwrite_birth_time =
  422 :   117 :   278 :   sp->overwrite_birth_density =
  423 :   118 :   280 :   sp->overwrite_birth_temperature =
  424 :   119 :   284 :   if (sp->overwrite_birth_time) {
  425 :   120 :   285 :     sp->spart_first_init_birth_time =
  426 :   121 :   290 :   if (sp->overwrite_birth_density) {
  427 :   122 :   291 :     sp->spart_first_init_birth_density =
  428 :   123 :   296 :   if (sp->overwrite_birth_temperature) {
  429 :   124 :   297 :     sp->spart_first_init_birth_temperature =
  430 :   125 :   325 :   sp->max_time_step_young = max_time_step_young_Myr * Myr / conv_fac;
  431 :   126 :   326 :   sp->max_time_step_old = max_time_step_old_Myr * Myr / conv_fac;
  432 :   127 :   327 :   sp->age_threshold = age_threshold_Myr * Myr / conv_fac;
  433 :   128 :   328 :   sp->age_threshold_unlimited = age_threshold_unlimited_Myr * Myr / conv_fac;
  434 :   129 :   343 :     sp->lum_tables_Z[i] = (float *)malloc(count_Z * sizeof(float));
  435 :   130 :   344 :     sp->lum_tables_ages[i] = (float *)malloc(count_ages * sizeof(float));
  436 :   131 :   345 :     sp->lum_tables_luminosities[i] = (float *)malloc(count_L * sizeof(float));
  437 :   132 :   359 :           sp->lum_tables_Z[i][k++] = log10(z);
  438 :   133 :   363 :           sp->lum_tables_ages[i][j] = log10(age + FLT_MIN);
  439 :   134 :   366 :         sp->lum_tables_luminosities[i][j] = log10(L);
  440 :   135 :   383 :   sp->lum_tables_factor = to_Jansky / zero_point_AB;
  441 :   136 :   393 :           sp->eta_neighbours, sp->target_neighbours);
  442 :   137 :   396 :           sp->h_tolerance, sp->delta_neighbours);
  443 :   138 :   401 :       pow_dimension(expf(sp->log_max_h_change)), sp->log_max_h_change);
  444 :   139 :   404 :           sp->max_smoothing_iterations);
  445 :   140 :   406 :   if (sp->overwrite_birth_time)
  446 :   141 :   408 :             sp->spart_first_init_birth_time);
  447 :   142 :   411 :           sp->age_threshold_unlimited);
  448 :   143 :   412 :   message("Stars' young/old age threshold: %e [U_t]", sp->age_threshold);
  449 :   144 :   414 :           sp->max_time_step_young);
  450 :   145 :   415 :   message("Max time-step size of old stars: %e [U_t]", sp->max_time_step_old);
  451 :   146 :   424 :                        sp->target_neighbours);
  452 :   147 :   425 :   io_write_attribute_f(h_grpstars, "Kernel delta N_ngb", sp->delta_neighbours);
  453 :   148 :   426 :   io_write_attribute_f(h_grpstars, "Kernel eta", sp->eta_neighbours);
  454 :   149 :   428 :                        sp->h_tolerance);
  455 :   150 :   430 :                        sp->log_max_h_change);
  456 :   151 :   432 :                        pow_dimension(expf(sp->log_max_h_change)));
  457 :   152 :   434 :                        sp->max_smoothing_iterations);
  458 :   153 :   462 :     free(sp->lum_tables_Z[i]);
  459 :   154 :   463 :     free(sp->lum_tables_ages[i]);
  460 :   155 :   464 :     free(sp->lum_tables_luminosities[i]);
./statistics.c:
  300 :     const struct gpart *gp = sp->gpart;
  303 :     if (sp->time_bin == time_bin_inhibited ||
  304 :         sp->time_bin == time_bin_not_created)
  313 :     const float m = sp->mass;
  388 :     const struct gpart *gp = sp->gpart;
  391 :     if (sp->time_bin == time_bin_inhibited ||
  392 :         sp->time_bin == time_bin_not_created)
  401 :     const float m = sp->mass;
./timestep.h:
  298 :                                            e->physical_constants, sp->gpart);
  303 :         sp->gpart, a_hydro, e->gravity_properties, e->cosmology);
  321 :     error("spart (id=%lld) wants a time-step (%e) below dt_min (%e)", sp->id,
  327 :       new_dt, sp->time_bin, num_time_bins, e->ti_current, e->time_base_inv);
./tracers/EAGLE/tracers.h:
  359 :     sp->tracers_data.averaged_SFR[i] = 0.f;
./tracers/EAGLE/tracers_io.h:
   67 :       ret[i] = sp->tracers_data.averaged_SFR[i] /
./velociraptor_io.h:
   40 :   if (sp->gpart == NULL)
   43 :     const ptrdiff_t offset = sp->gpart - e->s->gparts;
